{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/copyLinesCommand.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class CopyLinesCommand {\n    constructor(selection, isCopyingDown, noop) {\n        this._selection = selection;\n        this._isCopyingDown = isCopyingDown;\n        this._noop = noop || false;\n        this._selectionDirection = 0 /* SelectionDirection.LTR */;\n        this._selectionId = null;\n        this._startLineNumberDelta = 0;\n        this._endLineNumberDelta = 0;\n    }\n    getEditOperations(model, builder) {\n        let s = this._selection;\n        this._startLineNumberDelta = 0;\n        this._endLineNumberDelta = 0;\n        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n            this._endLineNumberDelta = 1;\n            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n        }\n        const sourceLines = [];\n        for (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n            sourceLines.push(model.getLineContent(i));\n        }\n        const sourceText = sourceLines.join('\\n');\n        if (sourceText === '') {\n            // Duplicating empty line\n            if (this._isCopyingDown) {\n                this._startLineNumberDelta++;\n                this._endLineNumberDelta++;\n            }\n        }\n        if (this._noop) {\n            builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber + 1, 1), s.endLineNumber === model.getLineCount() ? '' : '\\n');\n        }\n        else {\n            if (!this._isCopyingDown) {\n                builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + sourceText);\n            }\n            else {\n                builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + '\\n');\n            }\n        }\n        this._selectionId = builder.trackSelection(s);\n        this._selectionDirection = this._selection.getDirection();\n    }\n    computeCursorState(model, helper) {\n        let result = helper.getTrackedSelection(this._selectionId);\n        if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {\n            let startLineNumber = result.startLineNumber;\n            let startColumn = result.startColumn;\n            let endLineNumber = result.endLineNumber;\n            let endColumn = result.endColumn;\n            if (this._startLineNumberDelta !== 0) {\n                startLineNumber = startLineNumber + this._startLineNumberDelta;\n                startColumn = 1;\n            }\n            if (this._endLineNumberDelta !== 0) {\n                endLineNumber = endLineNumber + this._endLineNumberDelta;\n                endColumn = 1;\n            }\n            result = Selection.createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);\n        }\n        return result;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/moveLinesCommand.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as strings from '../../../../base/common/strings.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IndentAction } from '../../../common/languages/languageConfiguration.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport * as indentUtils from '../../indentation/common/indentUtils.js';\nimport { getGoodIndentForLine, getIndentMetadata } from '../../../common/languages/autoIndent.js';\nimport { getEnterAction } from '../../../common/languages/enterAction.js';\nlet MoveLinesCommand = class MoveLinesCommand {\n    constructor(selection, isMovingDown, autoIndent, _languageConfigurationService) {\n        this._languageConfigurationService = _languageConfigurationService;\n        this._selection = selection;\n        this._isMovingDown = isMovingDown;\n        this._autoIndent = autoIndent;\n        this._selectionId = null;\n        this._moveEndLineSelectionShrink = false;\n    }\n    getEditOperations(model, builder) {\n        const getLanguageId = () => {\n            return model.getLanguageId();\n        };\n        const getLanguageIdAtPosition = (lineNumber, column) => {\n            return model.getLanguageIdAtPosition(lineNumber, column);\n        };\n        const modelLineCount = model.getLineCount();\n        if (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\n            this._selectionId = builder.trackSelection(this._selection);\n            return;\n        }\n        if (!this._isMovingDown && this._selection.startLineNumber === 1) {\n            this._selectionId = builder.trackSelection(this._selection);\n            return;\n        }\n        this._moveEndPositionDown = false;\n        let s = this._selection;\n        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n            this._moveEndPositionDown = true;\n            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n        }\n        const { tabSize, indentSize, insertSpaces } = model.getOptions();\n        const indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);\n        if (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\n            // Current line is empty\n            const lineNumber = s.startLineNumber;\n            const otherLineNumber = (this._isMovingDown ? lineNumber + 1 : lineNumber - 1);\n            if (model.getLineMaxColumn(otherLineNumber) === 1) {\n                // Other line number is empty too, so no editing is needed\n                // Add a no-op to force running by the model\n                builder.addEditOperation(new Range(1, 1, 1, 1), null);\n            }\n            else {\n                // Type content from other line number on line number\n                builder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));\n                // Remove content from other line number\n                builder.addEditOperation(new Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\n            }\n            // Track selection at the other line number\n            s = new Selection(otherLineNumber, 1, otherLineNumber, 1);\n        }\n        else {\n            let movingLineNumber;\n            let movingLineText;\n            if (this._isMovingDown) {\n                movingLineNumber = s.endLineNumber + 1;\n                movingLineText = model.getLineContent(movingLineNumber);\n                // Delete line that needs to be moved\n                builder.addEditOperation(new Range(movingLineNumber - 1, model.getLineMaxColumn(movingLineNumber - 1), movingLineNumber, model.getLineMaxColumn(movingLineNumber)), null);\n                let insertingText = movingLineText;\n                if (this.shouldAutoIndent(model, s)) {\n                    const movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber, s.startLineNumber - 1);\n                    // if s.startLineNumber - 1 matches onEnter rule, we still honor that.\n                    if (movingLineMatchResult !== null) {\n                        const oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber));\n                        const newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                        const newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                        insertingText = newIndentation + this.trimStart(movingLineText);\n                    }\n                    else {\n                        // no enter rule matches, let's check indentatin rules then.\n                        const virtualModel = {\n                            tokenization: {\n                                getLineTokens: (lineNumber) => {\n                                    if (lineNumber === s.startLineNumber) {\n                                        return model.tokenization.getLineTokens(movingLineNumber);\n                                    }\n                                    else {\n                                        return model.tokenization.getLineTokens(lineNumber);\n                                    }\n                                },\n                                getLanguageId,\n                                getLanguageIdAtPosition,\n                            },\n                            getLineContent: (lineNumber) => {\n                                if (lineNumber === s.startLineNumber) {\n                                    return model.getLineContent(movingLineNumber);\n                                }\n                                else {\n                                    return model.getLineContent(lineNumber);\n                                }\n                            },\n                        };\n                        const indentOfMovingLine = getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber, 1), s.startLineNumber, indentConverter, this._languageConfigurationService);\n                        if (indentOfMovingLine !== null) {\n                            const oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber));\n                            const newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);\n                            const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                            if (newSpaceCnt !== oldSpaceCnt) {\n                                const newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                                insertingText = newIndentation + this.trimStart(movingLineText);\n                            }\n                        }\n                    }\n                    // add edit operations for moving line first to make sure it's executed after we make indentation change\n                    // to s.startLineNumber\n                    builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\\n');\n                    const ret = this.matchEnterRuleMovingDown(model, indentConverter, tabSize, s.startLineNumber, movingLineNumber, insertingText);\n                    // check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\n                    if (ret !== null) {\n                        if (ret !== 0) {\n                            this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n                        }\n                    }\n                    else {\n                        // it doesn't match onEnter rules, let's check indentation rules then.\n                        const virtualModel = {\n                            tokenization: {\n                                getLineTokens: (lineNumber) => {\n                                    if (lineNumber === s.startLineNumber) {\n                                        // TODO@aiday-mar: the tokens here don't correspond exactly to the corresponding content (after indentation adjustment), have to fix this.\n                                        return model.tokenization.getLineTokens(movingLineNumber);\n                                    }\n                                    else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\n                                        return model.tokenization.getLineTokens(lineNumber - 1);\n                                    }\n                                    else {\n                                        return model.tokenization.getLineTokens(lineNumber);\n                                    }\n                                },\n                                getLanguageId,\n                                getLanguageIdAtPosition,\n                            },\n                            getLineContent: (lineNumber) => {\n                                if (lineNumber === s.startLineNumber) {\n                                    return insertingText;\n                                }\n                                else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\n                                    return model.getLineContent(lineNumber - 1);\n                                }\n                                else {\n                                    return model.getLineContent(lineNumber);\n                                }\n                            },\n                        };\n                        const newIndentatOfMovingBlock = getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber, 1), s.startLineNumber + 1, indentConverter, this._languageConfigurationService);\n                        if (newIndentatOfMovingBlock !== null) {\n                            const oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n                            const newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);\n                            const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                            if (newSpaceCnt !== oldSpaceCnt) {\n                                const spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Insert line that needs to be moved before\n                    builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\\n');\n                }\n            }\n            else {\n                movingLineNumber = s.startLineNumber - 1;\n                movingLineText = model.getLineContent(movingLineNumber);\n                // Delete line that needs to be moved\n                builder.addEditOperation(new Range(movingLineNumber, 1, movingLineNumber + 1, 1), null);\n                // Insert line that needs to be moved after\n                builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\n                if (this.shouldAutoIndent(model, s)) {\n                    const virtualModel = {\n                        tokenization: {\n                            getLineTokens: (lineNumber) => {\n                                if (lineNumber === movingLineNumber) {\n                                    return model.tokenization.getLineTokens(s.startLineNumber);\n                                }\n                                else {\n                                    return model.tokenization.getLineTokens(lineNumber);\n                                }\n                            },\n                            getLanguageId,\n                            getLanguageIdAtPosition,\n                        },\n                        getLineContent: (lineNumber) => {\n                            if (lineNumber === movingLineNumber) {\n                                return model.getLineContent(s.startLineNumber);\n                            }\n                            else {\n                                return model.getLineContent(lineNumber);\n                            }\n                        },\n                    };\n                    const ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);\n                    // check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\n                    if (ret !== null) {\n                        if (ret !== 0) {\n                            this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n                        }\n                    }\n                    else {\n                        // it doesn't match any onEnter rule, let's check indentation rules then.\n                        const indentOfFirstLine = getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber, indentConverter, this._languageConfigurationService);\n                        if (indentOfFirstLine !== null) {\n                            // adjust the indentation of the moving block\n                            const oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n                            const newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n                            const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);\n                            if (newSpaceCnt !== oldSpaceCnt) {\n                                const spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this._selectionId = builder.trackSelection(s);\n    }\n    buildIndentConverter(tabSize, indentSize, insertSpaces) {\n        return {\n            shiftIndent: (indentation) => {\n                return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            },\n            unshiftIndent: (indentation) => {\n                return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            }\n        };\n    }\n    parseEnterResult(model, indentConverter, tabSize, line, enter) {\n        if (enter) {\n            let enterPrefix = enter.indentation;\n            if (enter.indentAction === IndentAction.None) {\n                enterPrefix = enter.indentation + enter.appendText;\n            }\n            else if (enter.indentAction === IndentAction.Indent) {\n                enterPrefix = enter.indentation + enter.appendText;\n            }\n            else if (enter.indentAction === IndentAction.IndentOutdent) {\n                enterPrefix = enter.indentation;\n            }\n            else if (enter.indentAction === IndentAction.Outdent) {\n                enterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;\n            }\n            const movingLineText = model.getLineContent(line);\n            if (this.trimStart(movingLineText).indexOf(this.trimStart(enterPrefix)) >= 0) {\n                const oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));\n                let newIndentation = strings.getLeadingWhitespace(enterPrefix);\n                const indentMetadataOfMovelingLine = getIndentMetadata(model, line, this._languageConfigurationService);\n                if (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & 2 /* IndentConsts.DECREASE_MASK */) {\n                    newIndentation = indentConverter.unshiftIndent(newIndentation);\n                }\n                const newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);\n                const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                return newSpaceCnt - oldSpaceCnt;\n            }\n        }\n        return null;\n    }\n    /**\n     *\n     * @param model\n     * @param indentConverter\n     * @param tabSize\n     * @param line the line moving down\n     * @param futureAboveLineNumber the line which will be at the `line` position\n     * @param futureAboveLineText\n     */\n    matchEnterRuleMovingDown(model, indentConverter, tabSize, line, futureAboveLineNumber, futureAboveLineText) {\n        if (strings.lastNonWhitespaceIndex(futureAboveLineText) >= 0) {\n            // break\n            const maxColumn = model.getLineMaxColumn(futureAboveLineNumber);\n            const enter = getEnterAction(this._autoIndent, model, new Range(futureAboveLineNumber, maxColumn, futureAboveLineNumber, maxColumn), this._languageConfigurationService);\n            return this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n        }\n        else {\n            // go upwards, starting from `line - 1`\n            let validPrecedingLine = line - 1;\n            while (validPrecedingLine >= 1) {\n                const lineContent = model.getLineContent(validPrecedingLine);\n                const nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n                if (nonWhitespaceIdx >= 0) {\n                    break;\n                }\n                validPrecedingLine--;\n            }\n            if (validPrecedingLine < 1 || line > model.getLineCount()) {\n                return null;\n            }\n            const maxColumn = model.getLineMaxColumn(validPrecedingLine);\n            const enter = getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn), this._languageConfigurationService);\n            return this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n        }\n    }\n    matchEnterRule(model, indentConverter, tabSize, line, oneLineAbove, previousLineText) {\n        let validPrecedingLine = oneLineAbove;\n        while (validPrecedingLine >= 1) {\n            // ship empty lines as empty lines just inherit indentation\n            let lineContent;\n            if (validPrecedingLine === oneLineAbove && previousLineText !== undefined) {\n                lineContent = previousLineText;\n            }\n            else {\n                lineContent = model.getLineContent(validPrecedingLine);\n            }\n            const nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n            if (nonWhitespaceIdx >= 0) {\n                break;\n            }\n            validPrecedingLine--;\n        }\n        if (validPrecedingLine < 1 || line > model.getLineCount()) {\n            return null;\n        }\n        const maxColumn = model.getLineMaxColumn(validPrecedingLine);\n        const enter = getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn), this._languageConfigurationService);\n        return this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n    }\n    trimStart(str) {\n        return str.replace(/^\\s+/, '');\n    }\n    shouldAutoIndent(model, selection) {\n        if (this._autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n            return false;\n        }\n        // if it's not easy to tokenize, we stop auto indent.\n        if (!model.tokenization.isCheapToTokenize(selection.startLineNumber)) {\n            return false;\n        }\n        const languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);\n        const languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);\n        if (languageAtSelectionStart !== languageAtSelectionEnd) {\n            return false;\n        }\n        if (this._languageConfigurationService.getLanguageConfiguration(languageAtSelectionStart).indentRulesSupport === null) {\n            return false;\n        }\n        return true;\n    }\n    getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, offset) {\n        for (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n            const lineContent = model.getLineContent(i);\n            const originalIndent = strings.getLeadingWhitespace(lineContent);\n            const originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n            const newSpacesCnt = originalSpacesCnt + offset;\n            const newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n            if (newIndent !== originalIndent) {\n                builder.addEditOperation(new Range(i, 1, i, originalIndent.length + 1), newIndent);\n                if (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {\n                    // as users select part of the original indent white spaces\n                    // when we adjust the indentation of endLine, we should adjust the cursor position as well.\n                    this._moveEndLineSelectionShrink = true;\n                }\n            }\n        }\n    }\n    computeCursorState(model, helper) {\n        let result = helper.getTrackedSelection(this._selectionId);\n        if (this._moveEndPositionDown) {\n            result = result.setEndPosition(result.endLineNumber + 1, 1);\n        }\n        if (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {\n            result = result.setEndPosition(result.endLineNumber, 2);\n        }\n        return result;\n    }\n};\nMoveLinesCommand = __decorate([\n    __param(3, ILanguageConfigurationService)\n], MoveLinesCommand);\nexport { MoveLinesCommand };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/sortLinesCommand.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nexport class SortLinesCommand {\n    static { this._COLLATOR = null; }\n    static getCollator() {\n        if (!SortLinesCommand._COLLATOR) {\n            SortLinesCommand._COLLATOR = new Intl.Collator();\n        }\n        return SortLinesCommand._COLLATOR;\n    }\n    constructor(selection, descending) {\n        this.selection = selection;\n        this.descending = descending;\n        this.selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        const op = sortLines(model, this.selection, this.descending);\n        if (op) {\n            builder.addEditOperation(op.range, op.text);\n        }\n        this.selectionId = builder.trackSelection(this.selection);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    }\n    static canRun(model, selection, descending) {\n        if (model === null) {\n            return false;\n        }\n        const data = getSortData(model, selection, descending);\n        if (!data) {\n            return false;\n        }\n        for (let i = 0, len = data.before.length; i < len; i++) {\n            if (data.before[i] !== data.after[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nfunction getSortData(model, selection, descending) {\n    const startLineNumber = selection.startLineNumber;\n    let endLineNumber = selection.endLineNumber;\n    if (selection.endColumn === 1) {\n        endLineNumber--;\n    }\n    // Nothing to sort if user didn't select anything.\n    if (startLineNumber >= endLineNumber) {\n        return null;\n    }\n    const linesToSort = [];\n    // Get the contents of the selection to be sorted.\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        linesToSort.push(model.getLineContent(lineNumber));\n    }\n    let sorted = linesToSort.slice(0);\n    sorted.sort(SortLinesCommand.getCollator().compare);\n    // If descending, reverse the order.\n    if (descending === true) {\n        sorted = sorted.reverse();\n    }\n    return {\n        startLineNumber: startLineNumber,\n        endLineNumber: endLineNumber,\n        before: linesToSort,\n        after: sorted\n    };\n}\n/**\n * Generate commands for sorting lines on a model.\n */\nfunction sortLines(model, selection, descending) {\n    const data = getSortData(model, selection, descending);\n    if (!data) {\n        return null;\n    }\n    return EditOperation.replace(new Range(data.startLineNumber, 1, data.endLineNumber, model.getLineMaxColumn(data.endLineNumber)), data.after.join('\\n'));\n}\n"],"names":[],"mappings":"AAAA;;;8FAG8F;;;AAC9F;AACA;;;AACO,MAAM;IACT,MAAO;QAAE,IAAI,CAAC,SAAS,GAAG;IAAM,CAAC;IACjC,OAAO,cAAc;QACjB,IAAI,CAAC,iBAAiB,SAAS,EAAE;YAC7B,iBAAiB,SAAS,GAAG,IAAI,KAAK,QAAQ;QAClD;QACA,OAAO,iBAAiB,SAAS;IACrC;IACA,YAAY,SAAS,EAAE,UAAU,CAAE;QAC/B,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,WAAW,GAAG;IACvB;IACA,kBAAkB,KAAK,EAAE,OAAO,EAAE;QAC9B,MAAM,KAAK,UAAU,OAAO,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU;QAC3D,IAAI,IAAI;YACJ,QAAQ,gBAAgB,CAAC,GAAG,KAAK,EAAE,GAAG,IAAI;QAC9C;QACA,IAAI,CAAC,WAAW,GAAG,QAAQ,cAAc,CAAC,IAAI,CAAC,SAAS;IAC5D;IACA,mBAAmB,KAAK,EAAE,MAAM,EAAE;QAC9B,OAAO,OAAO,mBAAmB,CAAC,IAAI,CAAC,WAAW;IACtD;IACA,OAAO,OAAO,KAAK,EAAE,SAAS,EAAE,UAAU,EAAE;QACxC,IAAI,UAAU,MAAM;YAChB,OAAO;QACX;QACA,MAAM,OAAO,YAAY,OAAO,WAAW;QAC3C,IAAI,CAAC,MAAM;YACP,OAAO;QACX;QACA,IAAK,IAAI,IAAI,GAAG,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE,IAAI,KAAK,IAAK;YACpD,IAAI,KAAK,MAAM,CAAC,EAAE,KAAK,KAAK,KAAK,CAAC,EAAE,EAAE;gBAClC,OAAO;YACX;QACJ;QACA,OAAO;IACX;AACJ;AACA,SAAS,YAAY,KAAK,EAAE,SAAS,EAAE,UAAU;IAC7C,MAAM,kBAAkB,UAAU,eAAe;IACjD,IAAI,gBAAgB,UAAU,aAAa;IAC3C,IAAI,UAAU,SAAS,KAAK,GAAG;QAC3B;IACJ;IACA,kDAAkD;IAClD,IAAI,mBAAmB,eAAe;QAClC,OAAO;IACX;IACA,MAAM,cAAc,EAAE;IACtB,kDAAkD;IAClD,IAAK,IAAI,aAAa,iBAAiB,cAAc,eAAe,aAAc;QAC9E,YAAY,IAAI,CAAC,MAAM,cAAc,CAAC;IAC1C;IACA,IAAI,SAAS,YAAY,KAAK,CAAC;IAC/B,OAAO,IAAI,CAAC,iBAAiB,WAAW,GAAG,OAAO;IAClD,oCAAoC;IACpC,IAAI,eAAe,MAAM;QACrB,SAAS,OAAO,OAAO;IAC3B;IACA,OAAO;QACH,iBAAiB;QACjB,eAAe;QACf,QAAQ;QACR,OAAO;IACX;AACJ;AACA;;CAEC,GACD,SAAS,UAAU,KAAK,EAAE,SAAS,EAAE,UAAU;IAC3C,MAAM,OAAO,YAAY,OAAO,WAAW;IAC3C,IAAI,CAAC,MAAM;QACP,OAAO;IACX;IACA,OAAO,0LAAA,CAAA,gBAAa,CAAC,OAAO,CAAC,IAAI,kLAAA,CAAA,QAAK,CAAC,KAAK,eAAe,EAAE,GAAG,KAAK,aAAa,EAAE,MAAM,gBAAgB,CAAC,KAAK,aAAa,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC;AACrJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 569, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/linesOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { CoreEditingCommands } from '../../../browser/coreCommands.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../../common/commands/replaceCommand.js';\nimport { TrimTrailingWhitespaceCommand } from '../../../common/commands/trimTrailingWhitespaceCommand.js';\nimport { TypeOperations } from '../../../common/cursor/cursorTypeOperations.js';\nimport { EnterOperation } from '../../../common/cursor/cursorTypeEditOperations.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyLinesCommand } from './copyLinesCommand.js';\nimport { MoveLinesCommand } from './moveLinesCommand.js';\nimport { SortLinesCommand } from './sortLinesCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n// copy lines\nclass AbstractCopyLinesAction extends EditorAction {\n    constructor(down, opts) {\n        super(opts);\n        this.down = down;\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const selections = editor.getSelections().map((selection, index) => ({ selection, index, ignore: false }));\n        selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n        // Remove selections that would result in copying the same line\n        let prev = selections[0];\n        for (let i = 1; i < selections.length; i++) {\n            const curr = selections[i];\n            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n                // these two selections would copy the same line\n                if (prev.index < curr.index) {\n                    // prev wins\n                    curr.ignore = true;\n                }\n                else {\n                    // curr wins\n                    prev.ignore = true;\n                    prev = curr;\n                }\n            }\n        }\n        const commands = [];\n        for (const selection of selections) {\n            commands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.copyLinesUpAction',\n            label: nls.localize('lines.copyUp', \"Copy Line Up\"),\n            alias: 'Copy Line Up',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n                linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, \"&&Copy Line Up\"),\n                order: 1\n            }\n        });\n    }\n}\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.copyLinesDownAction',\n            label: nls.localize('lines.copyDown', \"Copy Line Down\"),\n            alias: 'Copy Line Down',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n                linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, \"Co&&py Line Down\"),\n                order: 2\n            }\n        });\n    }\n}\nexport class DuplicateSelectionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.duplicateSelection',\n            label: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n            alias: 'Duplicate Selection',\n            precondition: EditorContextKeys.writable,\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, \"&&Duplicate Selection\"),\n                order: 5\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const commands = [];\n        const selections = editor.getSelections();\n        const model = editor.getModel();\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                commands.push(new CopyLinesCommand(selection, true));\n            }\n            else {\n                const insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n                commands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\n// move lines\nclass AbstractMoveLinesAction extends EditorAction {\n    constructor(down, opts) {\n        super(opts);\n        this.down = down;\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const commands = [];\n        const selections = editor.getSelections() || [];\n        const autoIndent = editor.getOption(12 /* EditorOption.autoIndent */);\n        for (const selection of selections) {\n            commands.push(new MoveLinesCommand(selection, this.down, autoIndent, languageConfigurationService));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.moveLinesUpAction',\n            label: nls.localize('lines.moveUp', \"Move Line Up\"),\n            alias: 'Move Line Up',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n                linux: { primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, \"Mo&&ve Line Up\"),\n                order: 3\n            }\n        });\n    }\n}\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.moveLinesDownAction',\n            label: nls.localize('lines.moveDown', \"Move Line Down\"),\n            alias: 'Move Line Down',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n                linux: { primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, \"Move &&Line Down\"),\n                order: 4\n            }\n        });\n    }\n}\nexport class AbstractSortLinesAction extends EditorAction {\n    constructor(descending, opts) {\n        super(opts);\n        this.descending = descending;\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        let selections = editor.getSelections();\n        if (selections.length === 1 && selections[0].isEmpty()) {\n            // Apply to whole document.\n            selections = [new Selection(1, 1, model.getLineCount(), model.getLineMaxColumn(model.getLineCount()))];\n        }\n        for (const selection of selections) {\n            if (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n                return;\n            }\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new SortLinesCommand(selections[i], this.descending);\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.sortLinesAscending',\n            label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n            alias: 'Sort Lines Ascending',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.sortLinesDescending',\n            label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n            alias: 'Sort Lines Descending',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteDuplicateLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.removeDuplicateLines',\n            label: nls.localize('lines.deleteDuplicates', \"Delete Duplicate Lines\"),\n            alias: 'Delete Duplicate Lines',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            return;\n        }\n        const edits = [];\n        const endCursorState = [];\n        let linesDeleted = 0;\n        let updateSelection = true;\n        let selections = editor.getSelections();\n        if (selections.length === 1 && selections[0].isEmpty()) {\n            // Apply to whole document.\n            selections = [new Selection(1, 1, model.getLineCount(), model.getLineMaxColumn(model.getLineCount()))];\n            updateSelection = false;\n        }\n        for (const selection of selections) {\n            const uniqueLines = new Set();\n            const lines = [];\n            for (let i = selection.startLineNumber; i <= selection.endLineNumber; i++) {\n                const line = model.getLineContent(i);\n                if (uniqueLines.has(line)) {\n                    continue;\n                }\n                lines.push(line);\n                uniqueLines.add(line);\n            }\n            const selectionToReplace = new Selection(selection.startLineNumber, 1, selection.endLineNumber, model.getLineMaxColumn(selection.endLineNumber));\n            const adjustedSelectionStart = selection.startLineNumber - linesDeleted;\n            const finalSelection = new Selection(adjustedSelectionStart, 1, adjustedSelectionStart + lines.length - 1, lines[lines.length - 1].length);\n            edits.push(EditOperation.replace(selectionToReplace, lines.join('\\n')));\n            endCursorState.push(finalSelection);\n            linesDeleted += (selection.endLineNumber - selection.startLineNumber + 1) - lines.length;\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, updateSelection ? endCursorState : undefined);\n        editor.pushUndoStop();\n    }\n}\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n    static { this.ID = 'editor.action.trimTrailingWhitespace'; }\n    constructor() {\n        super({\n            id: TrimTrailingWhitespaceAction.ID,\n            label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n            alias: 'Trim Trailing Whitespace',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor, args) {\n        let cursors = [];\n        if (args.reason === 'auto-save') {\n            // See https://github.com/editorconfig/editorconfig-vscode/issues/47\n            // It is very convenient for the editor config extension to invoke this action.\n            // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n            cursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n        }\n        const selection = editor.getSelection();\n        if (selection === null) {\n            return;\n        }\n        const config = _accessor.get(IConfigurationService);\n        const model = editor.getModel();\n        const trimInRegexAndStrings = config.getValue('files.trimTrailingWhitespaceInRegexAndStrings', { overrideIdentifier: model?.getLanguageId(), resource: model?.uri });\n        const command = new TrimTrailingWhitespaceCommand(selection, cursors, trimInRegexAndStrings);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n    }\n}\nexport class DeleteLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.deleteLines',\n            label: nls.localize('lines.delete', \"Delete Line\"),\n            alias: 'Delete Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 41 /* KeyCode.KeyK */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const ops = this._getLinesToRemove(editor);\n        const model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            // Model is empty\n            return;\n        }\n        let linesDeleted = 0;\n        const edits = [];\n        const cursorState = [];\n        for (let i = 0, len = ops.length; i < len; i++) {\n            const op = ops[i];\n            let startLineNumber = op.startLineNumber;\n            let endLineNumber = op.endLineNumber;\n            let startColumn = 1;\n            let endColumn = model.getLineMaxColumn(endLineNumber);\n            if (endLineNumber < model.getLineCount()) {\n                endLineNumber += 1;\n                endColumn = 1;\n            }\n            else if (startLineNumber > 1) {\n                startLineNumber -= 1;\n                startColumn = model.getLineMaxColumn(startLineNumber);\n            }\n            edits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n            cursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n            linesDeleted += (op.endLineNumber - op.startLineNumber + 1);\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, cursorState);\n        editor.pushUndoStop();\n    }\n    _getLinesToRemove(editor) {\n        // Construct delete operations\n        const operations = editor.getSelections().map((s) => {\n            let endLineNumber = s.endLineNumber;\n            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n                endLineNumber -= 1;\n            }\n            return {\n                startLineNumber: s.startLineNumber,\n                selectionStartColumn: s.selectionStartColumn,\n                endLineNumber: endLineNumber,\n                positionColumn: s.positionColumn\n            };\n        });\n        // Sort delete operations\n        operations.sort((a, b) => {\n            if (a.startLineNumber === b.startLineNumber) {\n                return a.endLineNumber - b.endLineNumber;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        });\n        // Merge delete operations which are adjacent or overlapping\n        const mergedOperations = [];\n        let previousOperation = operations[0];\n        for (let i = 1; i < operations.length; i++) {\n            if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n                // Merge current operations into the previous one\n                previousOperation.endLineNumber = operations[i].endLineNumber;\n            }\n            else {\n                // Push previous operation\n                mergedOperations.push(previousOperation);\n                previousOperation = operations[i];\n            }\n        }\n        // Push the last operation\n        mergedOperations.push(previousOperation);\n        return mergedOperations;\n    }\n}\nexport class IndentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.indentLines',\n            label: nls.localize('lines.indent', \"Indent Line\"),\n            alias: 'Indent Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n        editor.pushUndoStop();\n    }\n}\nclass OutdentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.outdentLines',\n            label: nls.localize('lines.outdent', \"Outdent Line\"),\n            alias: 'Outdent Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n    }\n}\nexport class InsertLineBeforeAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertLineBefore',\n            label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n            alias: 'Insert Line Above',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 3 /* KeyCode.Enter */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, EnterOperation.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n}\nexport class InsertLineAfterAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertLineAfter',\n            label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n            alias: 'Insert Line Below',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 3 /* KeyCode.Enter */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, EnterOperation.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n}\nexport class AbstractDeleteAllToBoundaryAction extends EditorAction {\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const primaryCursor = editor.getSelection();\n        const rangesToDelete = this._getRangesToDelete(editor);\n        // merge overlapping selections\n        const effectiveRanges = [];\n        for (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n            const range = rangesToDelete[i];\n            const nextRange = rangesToDelete[i + 1];\n            if (Range.intersectRanges(range, nextRange) === null) {\n                effectiveRanges.push(range);\n            }\n            else {\n                rangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n            }\n        }\n        effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n        const endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n        const edits = effectiveRanges.map(range => {\n            return EditOperation.replace(range, '');\n        });\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n    constructor() {\n        super({\n            id: 'deleteAllLeft',\n            label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n            alias: 'Delete All Left',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1 /* KeyCode.Backspace */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    _getEndCursorState(primaryCursor, rangesToDelete) {\n        let endPrimaryCursor = null;\n        const endCursorState = [];\n        let deletedLines = 0;\n        rangesToDelete.forEach(range => {\n            let endCursor;\n            if (range.endColumn === 1 && deletedLines > 0) {\n                const newStartLine = range.startLineNumber - deletedLines;\n                endCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n            }\n            else {\n                endCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n            }\n            deletedLines += range.endLineNumber - range.startLineNumber;\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        });\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    }\n    _getRangesToDelete(editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        let rangesToDelete = selections;\n        const model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\n        rangesToDelete = rangesToDelete.map(selection => {\n            if (selection.isEmpty()) {\n                if (selection.startColumn === 1) {\n                    const deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n                    const deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineLength(deleteFromLine) + 1;\n                    return new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n                }\n                else {\n                    return new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n                }\n            }\n            else {\n                return new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n            }\n        });\n        return rangesToDelete;\n    }\n}\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n    constructor() {\n        super({\n            id: 'deleteAllRight',\n            label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n            alias: 'Delete All Right',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: 256 /* KeyMod.WinCtrl */ | 41 /* KeyCode.KeyK */, secondary: [2048 /* KeyMod.CtrlCmd */ | 20 /* KeyCode.Delete */] },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    _getEndCursorState(primaryCursor, rangesToDelete) {\n        let endPrimaryCursor = null;\n        const endCursorState = [];\n        for (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n            const range = rangesToDelete[i];\n            const endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        }\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    }\n    _getRangesToDelete(editor) {\n        const model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        const rangesToDelete = selections.map((sel) => {\n            if (sel.isEmpty()) {\n                const maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n                if (sel.startColumn === maxColumn) {\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n                }\n                else {\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n                }\n            }\n            return sel;\n        });\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\n        return rangesToDelete;\n    }\n}\nexport class JoinLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.joinLines',\n            label: nls.localize('lines.joinLines', \"Join Lines\"),\n            alias: 'Join Lines',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 0,\n                mac: { primary: 256 /* KeyMod.WinCtrl */ | 40 /* KeyCode.KeyJ */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        let primaryCursor = editor.getSelection();\n        if (primaryCursor === null) {\n            return;\n        }\n        selections.sort(Range.compareRangesUsingStarts);\n        const reducedSelections = [];\n        const lastSelection = selections.reduce((previousValue, currentValue) => {\n            if (previousValue.isEmpty()) {\n                if (previousValue.endLineNumber === currentValue.startLineNumber) {\n                    if (primaryCursor.equalsSelection(previousValue)) {\n                        primaryCursor = currentValue;\n                    }\n                    return currentValue;\n                }\n                if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n            else {\n                if (currentValue.startLineNumber > previousValue.endLineNumber) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n        });\n        reducedSelections.push(lastSelection);\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const edits = [];\n        const endCursorState = [];\n        let endPrimaryCursor = primaryCursor;\n        let lineOffset = 0;\n        for (let i = 0, len = reducedSelections.length; i < len; i++) {\n            const selection = reducedSelections[i];\n            const startLineNumber = selection.startLineNumber;\n            const startColumn = 1;\n            let columnDeltaOffset = 0;\n            let endLineNumber, endColumn;\n            const selectionEndPositionOffset = model.getLineLength(selection.endLineNumber) - selection.endColumn;\n            if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n                const position = selection.getStartPosition();\n                if (position.lineNumber < model.getLineCount()) {\n                    endLineNumber = startLineNumber + 1;\n                    endColumn = model.getLineMaxColumn(endLineNumber);\n                }\n                else {\n                    endLineNumber = position.lineNumber;\n                    endColumn = model.getLineMaxColumn(position.lineNumber);\n                }\n            }\n            else {\n                endLineNumber = selection.endLineNumber;\n                endColumn = model.getLineMaxColumn(endLineNumber);\n            }\n            let trimmedLinesContent = model.getLineContent(startLineNumber);\n            for (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n                const lineText = model.getLineContent(i);\n                const firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n                if (firstNonWhitespaceIdx >= 1) {\n                    let insertSpace = true;\n                    if (trimmedLinesContent === '') {\n                        insertSpace = false;\n                    }\n                    if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||\n                        trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n                        insertSpace = false;\n                        trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n                    }\n                    const lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n                    trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n                    if (insertSpace) {\n                        columnDeltaOffset = lineTextWithoutIndent.length + 1;\n                    }\n                    else {\n                        columnDeltaOffset = lineTextWithoutIndent.length;\n                    }\n                }\n                else {\n                    columnDeltaOffset = 0;\n                }\n            }\n            const deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            if (!deleteSelection.isEmpty()) {\n                let resultSelection;\n                if (selection.isEmpty()) {\n                    edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                    resultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n                }\n                else {\n                    if (selection.startLineNumber === selection.endLineNumber) {\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\n                    }\n                    else {\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n                    }\n                }\n                if (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n                    endPrimaryCursor = resultSelection;\n                }\n                else {\n                    endCursorState.push(resultSelection);\n                }\n            }\n            lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n        }\n        endCursorState.unshift(endPrimaryCursor);\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class TransposeAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.transpose',\n            label: nls.localize('editor.transpose', \"Transpose Characters around the Cursor\"),\n            alias: 'Transpose Characters around the Cursor',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (!selection.isEmpty()) {\n                continue;\n            }\n            const cursor = selection.getStartPosition();\n            const maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n            if (cursor.column >= maxColumn) {\n                if (cursor.lineNumber === model.getLineCount()) {\n                    continue;\n                }\n                // The cursor is at the end of current line and current line is not empty\n                // then we transpose the character before the cursor and the line break if there is any following line.\n                const deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n                const chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n            }\n            else {\n                const deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n                const chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars, new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class AbstractCaseAction extends EditorAction {\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const wordSeparators = editor.getOption(132 /* EditorOption.wordSeparators */);\n        const textEdits = [];\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                const cursor = selection.getStartPosition();\n                const word = editor.getConfiguredWordAtPosition(cursor);\n                if (!word) {\n                    continue;\n                }\n                const wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n                const text = model.getValueInRange(wordRange);\n                textEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n            }\n            else {\n                const text = model.getValueInRange(selection);\n                textEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, textEdits);\n        editor.pushUndoStop();\n    }\n}\nexport class UpperCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToUppercase',\n            label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n            alias: 'Transform to Uppercase',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        return text.toLocaleUpperCase();\n    }\n}\nexport class LowerCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToLowercase',\n            label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n            alias: 'Transform to Lowercase',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        return text.toLocaleLowerCase();\n    }\n}\nclass BackwardsCompatibleRegExp {\n    constructor(_pattern, _flags) {\n        this._pattern = _pattern;\n        this._flags = _flags;\n        this._actual = null;\n        this._evaluated = false;\n    }\n    get() {\n        if (!this._evaluated) {\n            this._evaluated = true;\n            try {\n                this._actual = new RegExp(this._pattern, this._flags);\n            }\n            catch (err) {\n                // this browser does not support this regular expression\n            }\n        }\n        return this._actual;\n    }\n    isSupported() {\n        return (this.get() !== null);\n    }\n}\nexport class TitleCaseAction extends AbstractCaseAction {\n    static { this.titleBoundary = new BackwardsCompatibleRegExp('(^|[^\\\\p{L}\\\\p{N}\\']|((^|\\\\P{L})\\'))\\\\p{L}', 'gmu'); }\n    constructor() {\n        super({\n            id: 'editor.action.transformToTitlecase',\n            label: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n            alias: 'Transform to Title Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const titleBoundary = TitleCaseAction.titleBoundary.get();\n        if (!titleBoundary) {\n            // cannot support this\n            return text;\n        }\n        return text\n            .toLocaleLowerCase()\n            .replace(titleBoundary, (b) => b.toLocaleUpperCase());\n    }\n}\nexport class SnakeCaseAction extends AbstractCaseAction {\n    static { this.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu'); }\n    static { this.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu})(\\\\p{Ll})', 'gmu'); }\n    constructor() {\n        super({\n            id: 'editor.action.transformToSnakecase',\n            label: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n            alias: 'Transform to Snake Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const caseBoundary = SnakeCaseAction.caseBoundary.get();\n        const singleLetters = SnakeCaseAction.singleLetters.get();\n        if (!caseBoundary || !singleLetters) {\n            // cannot support this\n            return text;\n        }\n        return (text\n            .replace(caseBoundary, '$1_$2')\n            .replace(singleLetters, '$1_$2$3')\n            .toLocaleLowerCase());\n    }\n}\nexport class CamelCaseAction extends AbstractCaseAction {\n    static { this.wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm'); }\n    constructor() {\n        super({\n            id: 'editor.action.transformToCamelcase',\n            label: nls.localize('editor.transformToCamelcase', \"Transform to Camel Case\"),\n            alias: 'Transform to Camel Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const wordBoundary = CamelCaseAction.wordBoundary.get();\n        if (!wordBoundary) {\n            // cannot support this\n            return text;\n        }\n        const words = text.split(wordBoundary);\n        const firstWord = words.shift();\n        return firstWord + words.map((word) => word.substring(0, 1).toLocaleUpperCase() + word.substring(1))\n            .join('');\n    }\n}\nexport class PascalCaseAction extends AbstractCaseAction {\n    static { this.wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm'); }\n    static { this.wordBoundaryToMaintain = new BackwardsCompatibleRegExp('(?<=\\\\.)', 'gm'); }\n    constructor() {\n        super({\n            id: 'editor.action.transformToPascalcase',\n            label: nls.localize('editor.transformToPascalcase', \"Transform to Pascal Case\"),\n            alias: 'Transform to Pascal Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const wordBoundary = PascalCaseAction.wordBoundary.get();\n        const wordBoundaryToMaintain = PascalCaseAction.wordBoundaryToMaintain.get();\n        if (!wordBoundary || !wordBoundaryToMaintain) {\n            // cannot support this\n            return text;\n        }\n        const wordsWithMaintainBoundaries = text.split(wordBoundaryToMaintain);\n        const words = wordsWithMaintainBoundaries.map((word) => word.split(wordBoundary)).flat();\n        return words.map((word) => word.substring(0, 1).toLocaleUpperCase() + word.substring(1))\n            .join('');\n    }\n}\nexport class KebabCaseAction extends AbstractCaseAction {\n    static isSupported() {\n        const areAllRegexpsSupported = [\n            this.caseBoundary,\n            this.singleLetters,\n            this.underscoreBoundary,\n        ].every((regexp) => regexp.isSupported());\n        return areAllRegexpsSupported;\n    }\n    static { this.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu'); }\n    static { this.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu}\\\\p{Ll})', 'gmu'); }\n    static { this.underscoreBoundary = new BackwardsCompatibleRegExp('(\\\\S)(_)(\\\\S)', 'gm'); }\n    constructor() {\n        super({\n            id: 'editor.action.transformToKebabcase',\n            label: nls.localize('editor.transformToKebabcase', 'Transform to Kebab Case'),\n            alias: 'Transform to Kebab Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, _) {\n        const caseBoundary = KebabCaseAction.caseBoundary.get();\n        const singleLetters = KebabCaseAction.singleLetters.get();\n        const underscoreBoundary = KebabCaseAction.underscoreBoundary.get();\n        if (!caseBoundary || !singleLetters || !underscoreBoundary) {\n            // one or more regexps aren't supported\n            return text;\n        }\n        return text\n            .replace(underscoreBoundary, '$1-$3')\n            .replace(caseBoundary, '$1-$2')\n            .replace(singleLetters, '$1-$2')\n            .toLocaleLowerCase();\n    }\n}\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(DeleteDuplicateLinesAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\nif (SnakeCaseAction.caseBoundary.isSupported() && SnakeCaseAction.singleLetters.isSupported()) {\n    registerEditorAction(SnakeCaseAction);\n}\nif (CamelCaseAction.wordBoundary.isSupported()) {\n    registerEditorAction(CamelCaseAction);\n}\nif (PascalCaseAction.wordBoundary.isSupported()) {\n    registerEditorAction(PascalCaseAction);\n}\nif (TitleCaseAction.titleBoundary.isSupported()) {\n    registerEditorAction(TitleCaseAction);\n}\nif (KebabCaseAction.isSupported()) {\n    registerEditorAction(KebabCaseAction);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}