{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/basic-languages/freemarker2/freemarker2.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n\n// src/fillers/monaco-editor-core.ts\nvar monaco_editor_core_exports = {};\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\n\n// src/basic-languages/freemarker2/freemarker2.ts\nvar EMPTY_ELEMENTS = [\n  \"assign\",\n  \"flush\",\n  \"ftl\",\n  \"return\",\n  \"global\",\n  \"import\",\n  \"include\",\n  \"break\",\n  \"continue\",\n  \"local\",\n  \"nested\",\n  \"nt\",\n  \"setting\",\n  \"stop\",\n  \"t\",\n  \"lt\",\n  \"rt\",\n  \"fallback\"\n];\nvar BLOCK_ELEMENTS = [\n  \"attempt\",\n  \"autoesc\",\n  \"autoEsc\",\n  \"compress\",\n  \"comment\",\n  \"escape\",\n  \"noescape\",\n  \"function\",\n  \"if\",\n  \"list\",\n  \"items\",\n  \"sep\",\n  \"macro\",\n  \"noparse\",\n  \"noParse\",\n  \"noautoesc\",\n  \"noAutoEsc\",\n  \"outputformat\",\n  \"switch\",\n  \"visit\",\n  \"recurse\"\n];\nvar TagSyntaxAngle = {\n  close: \">\",\n  id: \"angle\",\n  open: \"<\"\n};\nvar TagSyntaxBracket = {\n  close: \"\\\\]\",\n  id: \"bracket\",\n  open: \"\\\\[\"\n};\nvar TagSyntaxAuto = {\n  close: \"[>\\\\]]\",\n  id: \"auto\",\n  open: \"[<\\\\[]\"\n};\nvar InterpolationSyntaxDollar = {\n  close: \"\\\\}\",\n  id: \"dollar\",\n  open1: \"\\\\$\",\n  open2: \"\\\\{\"\n};\nvar InterpolationSyntaxBracket = {\n  close: \"\\\\]\",\n  id: \"bracket\",\n  open1: \"\\\\[\",\n  open2: \"=\"\n};\nfunction createLangConfiguration(ts) {\n  return {\n    brackets: [\n      [\"<\", \">\"],\n      [\"[\", \"]\"],\n      [\"(\", \")\"],\n      [\"{\", \"}\"]\n    ],\n    comments: {\n      blockComment: [`${ts.open}--`, `--${ts.close}`]\n    },\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\n    autoClosingPairs: [\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: '\"', close: '\"', notIn: [\"string\"] },\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\n    ],\n    surroundingPairs: [\n      { open: '\"', close: '\"' },\n      { open: \"'\", close: \"'\" },\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: \"<\", close: \">\" }\n    ],\n    folding: {\n      markers: {\n        start: new RegExp(\n          `${ts.open}#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`\n        ),\n        end: new RegExp(`${ts.open}/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\n      }\n    },\n    onEnterRules: [\n      {\n        beforeText: new RegExp(\n          `${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`\n        ),\n        afterText: new RegExp(`^${ts.open}/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*${ts.close}$`),\n        action: {\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n        }\n      },\n      {\n        beforeText: new RegExp(\n          `${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`\n        ),\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\n      }\n    ]\n  };\n}\nfunction createLangConfigurationAuto() {\n  return {\n    // Cannot set block comment delimiter in auto mode...\n    // It depends on the content and the cursor position of the file...\n    brackets: [\n      [\"<\", \">\"],\n      [\"[\", \"]\"],\n      [\"(\", \")\"],\n      [\"{\", \"}\"]\n    ],\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\n    autoClosingPairs: [\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: '\"', close: '\"', notIn: [\"string\"] },\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\n    ],\n    surroundingPairs: [\n      { open: '\"', close: '\"' },\n      { open: \"'\", close: \"'\" },\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: \"<\", close: \">\" }\n    ],\n    folding: {\n      markers: {\n        start: new RegExp(`[<\\\\[]#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/>\\\\]]*(?!/)[>\\\\]])[^<\\\\[]*$`),\n        end: new RegExp(`[<\\\\[]/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\n      }\n    },\n    onEnterRules: [\n      {\n        beforeText: new RegExp(\n          `[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`\n        ),\n        afterText: new RegExp(`^[<\\\\[]/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*[>\\\\]]$`),\n        action: {\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n        }\n      },\n      {\n        beforeText: new RegExp(\n          `[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`\n        ),\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\n      }\n    ]\n  };\n}\nfunction createMonarchLanguage(ts, is) {\n  const id = `_${ts.id}_${is.id}`;\n  const s = (name) => name.replace(/__id__/g, id);\n  const r = (regexp) => {\n    const source = regexp.source.replace(/__id__/g, id);\n    return new RegExp(source, regexp.flags);\n  };\n  return {\n    // Settings\n    unicode: true,\n    includeLF: false,\n    start: s(\"default__id__\"),\n    ignoreCase: false,\n    defaultToken: \"invalid\",\n    tokenPostfix: `.freemarker2`,\n    brackets: [\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n    ],\n    // Dynamic RegExp\n    [s(\"open__id__\")]: new RegExp(ts.open),\n    [s(\"close__id__\")]: new RegExp(ts.close),\n    [s(\"iOpen1__id__\")]: new RegExp(is.open1),\n    [s(\"iOpen2__id__\")]: new RegExp(is.open2),\n    [s(\"iClose__id__\")]: new RegExp(is.close),\n    // <#START_TAG : \"<\" | \"<#\" | \"[#\">\n    // <#END_TAG : \"</\" | \"</#\" | \"[/#\">\n    [s(\"startTag__id__\")]: r(/(@open__id__)(#)/),\n    [s(\"endTag__id__\")]: r(/(@open__id__)(\\/#)/),\n    [s(\"startOrEndTag__id__\")]: r(/(@open__id__)(\\/?#)/),\n    // <#CLOSE_TAG1 : (<BLANK>)* (\">\" | \"]\")>\n    [s(\"closeTag1__id__\")]: r(/((?:@blank)*)(@close__id__)/),\n    // <#CLOSE_TAG2 : (<BLANK>)* (\"/\")? (\">\" | \"]\")>\n    [s(\"closeTag2__id__\")]: r(/((?:@blank)*\\/?)(@close__id__)/),\n    // Static RegExp\n    // <#BLANK : \" \" | \"\\t\" | \"\\n\" | \"\\r\">\n    blank: /[ \\t\\n\\r]/,\n    // <FALSE : \"false\">\n    // <TRUE : \"true\">\n    // <IN : \"in\">\n    // <AS : \"as\">\n    // <USING : \"using\">\n    keywords: [\"false\", \"true\", \"in\", \"as\", \"using\"],\n    // Directive names that cannot have an expression parameters and cannot be self-closing\n    // E.g. <#if id==2> ... </#if>\n    directiveStartCloseTag1: /attempt|recover|sep|auto[eE]sc|no(?:autoe|AutoE)sc|compress|default|no[eE]scape|comment|no[pP]arse/,\n    // Directive names that cannot have an expression parameter and can be self-closing\n    // E.g. <#if> ... <#else>  ... </#if>\n    // E.g. <#if> ... <#else /></#if>\n    directiveStartCloseTag2: /else|break|continue|return|stop|flush|t|lt|rt|nt|nested|recurse|fallback|ftl/,\n    // Directive names that can have an expression parameter and cannot be self-closing\n    // E.g. <#if id==2> ... </#if>\n    directiveStartBlank: /if|else[iI]f|list|for[eE]ach|switch|case|assign|global|local|include|import|function|macro|transform|visit|stop|return|call|setting|output[fF]ormat|nested|recurse|escape|ftl|items/,\n    // Directive names that can have an end tag\n    // E.g. </#if>\n    directiveEndCloseTag1: /if|list|items|sep|recover|attempt|for[eE]ach|local|global|assign|function|macro|output[fF]ormat|auto[eE]sc|no(?:autoe|AutoE)sc|compress|transform|switch|escape|no[eE]scape/,\n    // <#ESCAPED_CHAR :\n    //     \"\\\\\"\n    //     (\n    //         (\"n\" | \"t\" | \"r\" | \"f\" | \"b\" | \"g\" | \"l\" | \"a\" | \"\\\\\" | \"'\" | \"\\\"\" | \"{\" | \"=\")\n    //         |\n    //         (\"x\" [\"0\"-\"9\", \"A\"-\"F\", \"a\"-\"f\"])\n    //     )\n    // >\n    // Note: While the JavaCC tokenizer rule only specifies one hex digit,\n    // FreeMarker actually interprets up to 4 hex digits.\n    escapedChar: /\\\\(?:[ntrfbgla\\\\'\"\\{=]|(?:x[0-9A-Fa-f]{1,4}))/,\n    // <#ASCII_DIGIT: [\"0\" - \"9\"]>\n    asciiDigit: /[0-9]/,\n    // <INTEGER : ([\"0\"-\"9\"])+>\n    integer: /[0-9]+/,\n    // <#NON_ESCAPED_ID_START_CHAR:\n    // [\n    // \t  // This was generated on JDK 1.8.0_20 Win64 with src/main/misc/identifierChars/IdentifierCharGenerator.java\n    //    ...\n    // ]\n    nonEscapedIdStartChar: /[\\$@-Z_a-z\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u1FFF\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183-\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3006\\u3031-\\u3035\\u303B-\\u303C\\u3040-\\u318F\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3300-\\u337F\\u3400-\\u4DB5\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n    // <#ESCAPED_ID_CHAR: \"\\\\\" (\"-\" | \".\" | \":\" | \"#\")>\n    escapedIdChar: /\\\\[\\-\\.:#]/,\n    // <#ID_START_CHAR: <NON_ESCAPED_ID_START_CHAR>|<ESCAPED_ID_CHAR>>\n    idStartChar: /(?:@nonEscapedIdStartChar)|(?:@escapedIdChar)/,\n    // <ID: <ID_START_CHAR> (<ID_START_CHAR>|<ASCII_DIGIT>)*>\n    id: /(?:@idStartChar)(?:(?:@idStartChar)|(?:@asciiDigit))*/,\n    // Certain keywords / operators are allowed to index hashes\n    //\n    // Expression DotVariable(Expression exp) :\n    // {\n    // \tToken t;\n    // }\n    // {\n    // \t\t<DOT>\n    // \t\t(\n    // \t\t\tt = <ID> | t = <TIMES> | t = <DOUBLE_STAR>\n    // \t\t\t|\n    // \t\t\t(\n    // \t\t\t\tt = <LESS_THAN>\n    // \t\t\t\t|\n    // \t\t\t\tt = <LESS_THAN_EQUALS>\n    // \t\t\t\t|\n    // \t\t\t\tt = <ESCAPED_GT>\n    // \t\t\t\t|\n    // \t\t\t\tt = <ESCAPED_GTE>\n    // \t\t\t\t|\n    // \t\t\t\tt = <FALSE>\n    // \t\t\t\t|\n    // \t\t\t\tt = <TRUE>\n    // \t\t\t\t|\n    // \t\t\t\tt = <IN>\n    // \t\t\t\t|\n    // \t\t\t\tt = <AS>\n    // \t\t\t\t|\n    // \t\t\t\tt = <USING>\n    // \t\t\t)\n    // \t\t\t{\n    // \t\t\t\tif (!Character.isLetter(t.image.charAt(0))) {\n    // \t\t\t\t\tthrow new ParseException(t.image + \" is not a valid identifier.\", template, t);\n    // \t\t\t\t}\n    // \t\t\t}\n    // \t\t)\n    // \t\t{\n    // \t\t\tnotListLiteral(exp, \"hash\");\n    // \t\t\tnotStringLiteral(exp, \"hash\");\n    // \t\t\tnotBooleanLiteral(exp, \"hash\");\n    // \t\t\tDot dot = new Dot(exp, t.image);\n    // \t\t\tdot.setLocation(template, exp, t);\n    // \t\t\treturn dot;\n    // \t\t}\n    // }\n    specialHashKeys: /\\*\\*|\\*|false|true|in|as|using/,\n    // <DOUBLE_EQUALS : \"==\">\n    // <EQUALS : \"=\">\n    // <NOT_EQUALS : \"!=\">\n    // <PLUS_EQUALS : \"+=\">\n    // <MINUS_EQUALS : \"-=\">\n    // <TIMES_EQUALS : \"*=\">\n    // <DIV_EQUALS : \"/=\">\n    // <MOD_EQUALS : \"%=\">\n    // <PLUS_PLUS : \"++\">\n    // <MINUS_MINUS : \"--\">\n    // <LESS_THAN_EQUALS : \"lte\" | \"\\\\lte\" | \"<=\" | \"&lt;=\">\n    // <LESS_THAN : \"lt\" | \"\\\\lt\" | \"<\" | \"&lt;\">\n    // <ESCAPED_GTE : \"gte\" | \"\\\\gte\" | \"&gt;=\">\n    // <ESCAPED_GT: \"gt\" | \"\\\\gt\" |  \"&gt;\">\n    // <DOUBLE_STAR : \"**\">\n    // <PLUS : \"+\">\n    // <MINUS : \"-\">\n    // <TIMES : \"*\">\n    // <PERCENT : \"%\">\n    // <AND : \"&\" | \"&&\" | \"&amp;&amp;\" | \"\\\\and\" >\n    // <OR : \"|\" | \"||\">\n    // <EXCLAM : \"!\">\n    // <COMMA : \",\">\n    // <SEMICOLON : \";\">\n    // <COLON : \":\">\n    // <ELLIPSIS : \"...\">\n    // <DOT_DOT_ASTERISK : \"..*\" >\n    // <DOT_DOT_LESS : \"..<\" | \"..!\" >\n    // <DOT_DOT : \"..\">\n    // <EXISTS : \"??\">\n    // <BUILT_IN : \"?\">\n    // <LAMBDA_ARROW : \"->\" | \"-&gt;\">\n    namedSymbols: /&lt;=|&gt;=|\\\\lte|\\\\lt|&lt;|\\\\gte|\\\\gt|&gt;|&amp;&amp;|\\\\and|-&gt;|->|==|!=|\\+=|-=|\\*=|\\/=|%=|\\+\\+|--|<=|&&|\\|\\||:|\\.\\.\\.|\\.\\.\\*|\\.\\.<|\\.\\.!|\\?\\?|=|<|\\+|-|\\*|\\/|%|\\||\\.\\.|\\?|!|&|\\.|,|;/,\n    arrows: [\"->\", \"-&gt;\"],\n    delimiters: [\";\", \":\", \",\", \".\"],\n    stringOperators: [\"lte\", \"lt\", \"gte\", \"gt\"],\n    noParseTags: [\"noparse\", \"noParse\", \"comment\"],\n    tokenizer: {\n      // Parser states\n      // Plain text\n      [s(\"default__id__\")]: [\n        { include: s(\"@directive_token__id__\") },\n        { include: s(\"@interpolation_and_text_token__id__\") }\n      ],\n      // A FreeMarker expression inside a directive, e.g. <#if 2<3>\n      [s(\"fmExpression__id__.directive\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      // A FreeMarker expression inside an interpolation, e.g. ${2+3}\n      [s(\"fmExpression__id__.interpolation\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@expression_token__id__\") },\n        { include: s(\"@greater_operators_token__id__\") }\n      ],\n      // In an expression and inside a not-yet closed parenthesis / bracket\n      [s(\"inParen__id__.plain\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      [s(\"inParen__id__.gt\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@expression_token__id__\") },\n        { include: s(\"@greater_operators_token__id__\") }\n      ],\n      // Expression for the unified call, e.g. <@createMacro() ... >\n      [s(\"noSpaceExpression__id__\")]: [\n        { include: s(\"@no_space_expression_end_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      // For the function of a unified call. Special case for when the\n      // expression is a simple identifier.\n      // <@join [1,2] \",\">\n      // <@null!join [1,2] \",\">\n      [s(\"unifiedCall__id__\")]: [{ include: s(\"@unified_call_token__id__\") }],\n      // For singly and doubly quoted string (that may contain interpolations)\n      [s(\"singleString__id__\")]: [{ include: s(\"@string_single_token__id__\") }],\n      [s(\"doubleString__id__\")]: [{ include: s(\"@string_double_token__id__\") }],\n      // For singly and doubly quoted string (that may not contain interpolations)\n      [s(\"rawSingleString__id__\")]: [{ include: s(\"@string_single_raw_token__id__\") }],\n      [s(\"rawDoubleString__id__\")]: [{ include: s(\"@string_double_raw_token__id__\") }],\n      // For a comment in an expression\n      // ${ 1 + <#-- comment --> 2}\n      [s(\"expressionComment__id__\")]: [{ include: s(\"@expression_comment_token__id__\") }],\n      // For <#noparse> ... </#noparse>\n      // For <#noParse> ... </#noParse>\n      // For <#comment> ... </#comment>\n      [s(\"noParse__id__\")]: [{ include: s(\"@no_parse_token__id__\") }],\n      // For <#-- ... -->\n      [s(\"terseComment__id__\")]: [{ include: s(\"@terse_comment_token__id__\") }],\n      // Common rules\n      [s(\"directive_token__id__\")]: [\n        // <ATTEMPT : <START_TAG> \"attempt\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <RECOVER : <START_TAG> \"recover\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <SEP : <START_TAG> \"sep\" <CLOSE_TAG1>>\n        // <AUTOESC : <START_TAG> \"auto\" (\"e\"|\"E\") \"sc\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 4), DEFAULT);\n        // }\n        // <NOAUTOESC : <START_TAG> \"no\" (\"autoe\"|\"AutoE\") \"sc\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\n        // }\n        // <COMPRESS : <START_TAG> \"compress\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <DEFAUL : <START_TAG> \"default\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <NOESCAPE : <START_TAG> \"no\" (\"e\" | \"E\") \"scape\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\n        // }\n        //\n        // <COMMENT : <START_TAG> \"comment\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, NO_PARSE); noparseTag = \"comment\";\n        // }\n        // <NOPARSE: <START_TAG> \"no\" (\"p\" | \"P\") \"arse\" <CLOSE_TAG1>> {\n        //     int tagNamingConvention = getTagNamingConvention(matchedToken, 2);\n        //     handleTagSyntaxAndSwitch(matchedToken, tagNamingConvention, NO_PARSE);\n        //     noparseTag = tagNamingConvention == Configuration.CAMEL_CASE_NAMING_CONVENTION ? \"noParse\" : \"noparse\";\n        // }\n        [\n          r(/(?:@startTag__id__)(@directiveStartCloseTag1)(?:@closeTag1__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            {\n              cases: {\n                \"@noParseTags\": { token: \"tag\", next: s(\"@noParse__id__.$3\") },\n                \"@default\": { token: \"tag\" }\n              }\n            },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        // <ELSE : <START_TAG> \"else\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <BREAK : <START_TAG> \"break\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <CONTINUE : <START_TAG> \"continue\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <SIMPLE_RETURN : <START_TAG> \"return\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <HALT : <START_TAG> \"stop\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <FLUSH : <START_TAG> \"flush\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <TRIM : <START_TAG> \"t\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <LTRIM : <START_TAG> \"lt\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <RTRIM : <START_TAG> \"rt\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <NOTRIM : <START_TAG> \"nt\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <SIMPLE_NESTED : <START_TAG> \"nested\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <SIMPLE_RECURSE : <START_TAG> \"recurse\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <FALLBACK : <START_TAG> \"fallback\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <TRIVIAL_FTL_HEADER : (\"<#ftl\" | \"[#ftl\") (\"/\")? (\">\" | \"]\")> { ftlHeader(matchedToken); }\n        [\n          r(/(?:@startTag__id__)(@directiveStartCloseTag2)(?:@closeTag2__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        // <IF : <START_TAG> \"if\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <ELSE_IF : <START_TAG> \"else\" (\"i\" | \"I\") \"f\" <BLANK>> {\n        // \thandleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 4), FM_EXPRESSION);\n        // }\n        // <LIST : <START_TAG> \"list\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <FOREACH : <START_TAG> \"for\" (\"e\" | \"E\") \"ach\" <BLANK>> {\n        //    handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 3), FM_EXPRESSION);\n        // }\n        // <SWITCH : <START_TAG> \"switch\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <CASE : <START_TAG> \"case\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <ASSIGN : <START_TAG> \"assign\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <GLOBALASSIGN : <START_TAG> \"global\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <LOCALASSIGN : <START_TAG> \"local\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <_INCLUDE : <START_TAG> \"include\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <IMPORT : <START_TAG> \"import\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <FUNCTION : <START_TAG> \"function\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <MACRO : <START_TAG> \"macro\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <TRANSFORM : <START_TAG> \"transform\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <VISIT : <START_TAG> \"visit\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <STOP : <START_TAG> \"stop\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <RETURN : <START_TAG> \"return\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <CALL : <START_TAG> \"call\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <SETTING : <START_TAG> \"setting\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <OUTPUTFORMAT : <START_TAG> \"output\" (\"f\"|\"F\") \"ormat\" <BLANK>> {\n        //    handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 6), FM_EXPRESSION);\n        // }\n        // <NESTED : <START_TAG> \"nested\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <RECURSE : <START_TAG> \"recurse\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <ESCAPE : <START_TAG> \"escape\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        //\n        // Note: FreeMarker grammar appears to treat the FTL header as a special case,\n        // in order to remove new lines after the header (?), but since we only need\n        // to tokenize for highlighting, we can include this directive here.\n        // <FTL_HEADER : (\"<#ftl\" | \"[#ftl\") <BLANK>> { ftlHeader(matchedToken); }\n        //\n        // Note: FreeMarker grammar appears to treat the items directive as a special case for\n        // the AST parsing process, but since we only need to tokenize, we can include this\n        // directive here.\n        // <ITEMS : <START_TAG> \"items\" (<BLANK>)+ <AS> <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        [\n          r(/(?:@startTag__id__)(@directiveStartBlank)(@blank)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"\", next: s(\"@fmExpression__id__.directive\") }\n          ]\n        ],\n        // <END_IF : <END_TAG> \"if\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_LIST : <END_TAG> \"list\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_SEP : <END_TAG> \"sep\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_RECOVER : <END_TAG> \"recover\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_ATTEMPT : <END_TAG> \"attempt\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_FOREACH : <END_TAG> \"for\" (\"e\" | \"E\") \"ach\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 3), DEFAULT);\n        // }\n        // <END_LOCAL : <END_TAG> \"local\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_GLOBAL : <END_TAG> \"global\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_ASSIGN : <END_TAG> \"assign\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_FUNCTION : <END_TAG> \"function\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_MACRO : <END_TAG> \"macro\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_OUTPUTFORMAT : <END_TAG> \"output\" (\"f\" | \"F\") \"ormat\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 6), DEFAULT);\n        // }\n        // <END_AUTOESC : <END_TAG> \"auto\" (\"e\" | \"E\") \"sc\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 4), DEFAULT);\n        // }\n        // <END_NOAUTOESC : <END_TAG> \"no\" (\"autoe\"|\"AutoE\") \"sc\" <CLOSE_TAG1>> {\n        //   handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\n        // }\n        // <END_COMPRESS : <END_TAG> \"compress\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_TRANSFORM : <END_TAG> \"transform\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_SWITCH : <END_TAG> \"switch\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_ESCAPE : <END_TAG> \"escape\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_NOESCAPE : <END_TAG> \"no\" (\"e\" | \"E\") \"scape\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\n        // }\n        [\n          r(/(?:@endTag__id__)(@directiveEndCloseTag1)(?:@closeTag1__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        // <UNIFIED_CALL : \"<@\" | \"[@\" > { unifiedCall(matchedToken); }\n        [\n          r(/(@open__id__)(@)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\", next: s(\"@unifiedCall__id__\") }\n          ]\n        ],\n        // <UNIFIED_CALL_END : (\"<\" | \"[\") \"/@\" ((<ID>) (\".\"<ID>)*)? <CLOSE_TAG1>> { unifiedCallEnd(matchedToken); }\n        [\n          r(/(@open__id__)(\\/@)((?:(?:@id)(?:\\.(?:@id))*)?)(?:@closeTag1__id__)/),\n          [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        // <TERSE_COMMENT : (\"<\" | \"[\") \"#--\" > { noparseTag = \"-->\"; handleTagSyntaxAndSwitch(matchedToken, NO_PARSE); }\n        [\n          r(/(@open__id__)#--/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : { token: \"comment\", next: s(\"@terseComment__id__\") }\n        ],\n        // <UNKNOWN_DIRECTIVE : (\"[#\" | \"[/#\" | \"<#\" | \"</#\") ([\"a\"-\"z\", \"A\"-\"Z\", \"_\"])+>\n        [\n          r(/(?:@startOrEndTag__id__)([a-zA-Z_]+)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag.invalid\", next: s(\"@fmExpression__id__.directive\") }\n          ]\n        ]\n      ],\n      // <DEFAULT, NO_DIRECTIVE> TOKEN :\n      [s(\"interpolation_and_text_token__id__\")]: [\n        // <DOLLAR_INTERPOLATION_OPENING : \"${\"> { startInterpolation(matchedToken); }\n        // <SQUARE_BRACKET_INTERPOLATION_OPENING : \"[=\"> { startInterpolation(matchedToken); }\n        [\n          r(/(@iOpen1__id__)(@iOpen2__id__)/),\n          [\n            { token: is.id === \"bracket\" ? \"@brackets.interpolation\" : \"delimiter.interpolation\" },\n            {\n              token: is.id === \"bracket\" ? \"delimiter.interpolation\" : \"@brackets.interpolation\",\n              next: s(\"@fmExpression__id__.interpolation\")\n            }\n          ]\n        ],\n        // <STATIC_TEXT_FALSE_ALARM : \"$\" | \"#\" | \"<\" | \"[\" | \"{\"> // to handle a lone dollar sign or \"<\" or \"# or <@ with whitespace after\"\n        // <STATIC_TEXT_WS : (\"\\n\" | \"\\r\" | \"\\t\" | \" \")+>\n        // <STATIC_TEXT_NON_WS : (~[\"$\", \"<\", \"#\", \"[\", \"{\", \"\\n\", \"\\r\", \"\\t\", \" \"])+>\n        [/[\\$#<\\[\\{]|(?:@blank)+|[^\\$<#\\[\\{\\n\\r\\t ]+/, { token: \"source\" }]\n      ],\n      // <STRING_LITERAL :\n      // \t(\n      // \t\t\"\\\"\"\n      // \t\t((~[\"\\\"\", \"\\\\\"]) | <ESCAPED_CHAR>)*\n      // \t\t\"\\\"\"\n      // \t)\n      // \t|\n      // \t(\n      // \t\t\"'\"\n      // \t\t((~[\"'\", \"\\\\\"]) | <ESCAPED_CHAR>)*\n      // \t\t\"'\"\n      // \t)\n      // >\n      [s(\"string_single_token__id__\")]: [\n        [/[^'\\\\]/, { token: \"string\" }],\n        [/@escapedChar/, { token: \"string.escape\" }],\n        [/'/, { token: \"string\", next: \"@pop\" }]\n      ],\n      [s(\"string_double_token__id__\")]: [\n        [/[^\"\\\\]/, { token: \"string\" }],\n        [/@escapedChar/, { token: \"string.escape\" }],\n        [/\"/, { token: \"string\", next: \"@pop\" }]\n      ],\n      // <RAW_STRING : \"r\" ((\"\\\"\" (~[\"\\\"\"])* \"\\\"\") | (\"'\" (~[\"'\"])* \"'\"))>\n      [s(\"string_single_raw_token__id__\")]: [\n        [/[^']+/, { token: \"string.raw\" }],\n        [/'/, { token: \"string.raw\", next: \"@pop\" }]\n      ],\n      [s(\"string_double_raw_token__id__\")]: [\n        [/[^\"]+/, { token: \"string.raw\" }],\n        [/\"/, { token: \"string.raw\", next: \"@pop\" }]\n      ],\n      // <FM_EXPRESSION, IN_PAREN, NO_SPACE_EXPRESSION, NAMED_PARAMETER_EXPRESSION> TOKEN :\n      [s(\"expression_token__id__\")]: [\n        // Strings\n        [\n          /(r?)(['\"])/,\n          {\n            cases: {\n              \"r'\": [\n                { token: \"keyword\" },\n                { token: \"string.raw\", next: s(\"@rawSingleString__id__\") }\n              ],\n              'r\"': [\n                { token: \"keyword\" },\n                { token: \"string.raw\", next: s(\"@rawDoubleString__id__\") }\n              ],\n              \"'\": [{ token: \"source\" }, { token: \"string\", next: s(\"@singleString__id__\") }],\n              '\"': [{ token: \"source\" }, { token: \"string\", next: s(\"@doubleString__id__\") }]\n            }\n          }\n        ],\n        // Numbers\n        // <INTEGER : ([\"0\"-\"9\"])+>\n        // <DECIMAL : <INTEGER> \".\" <INTEGER>>\n        [\n          /(?:@integer)(?:\\.(?:@integer))?/,\n          {\n            cases: {\n              \"(?:@integer)\": { token: \"number\" },\n              \"@default\": { token: \"number.float\" }\n            }\n          }\n        ],\n        // Special hash keys that must not be treated as identifiers\n        // after a period, e.g. a.** is accessing the key \"**\" of a\n        [\n          /(\\.)(@blank*)(@specialHashKeys)/,\n          [{ token: \"delimiter\" }, { token: \"\" }, { token: \"identifier\" }]\n        ],\n        // Symbols / operators\n        [\n          /(?:@namedSymbols)/,\n          {\n            cases: {\n              \"@arrows\": { token: \"meta.arrow\" },\n              \"@delimiters\": { token: \"delimiter\" },\n              \"@default\": { token: \"operators\" }\n            }\n          }\n        ],\n        // Identifiers\n        [\n          /@id/,\n          {\n            cases: {\n              \"@keywords\": { token: \"keyword.$0\" },\n              \"@stringOperators\": { token: \"operators\" },\n              \"@default\": { token: \"identifier\" }\n            }\n          }\n        ],\n        // <OPEN_BRACKET : \"[\">\n        // <CLOSE_BRACKET : \"]\">\n        // <OPEN_PAREN : \"(\">\n        // <CLOSE_PAREN : \")\">\n        // <OPENING_CURLY_BRACKET : \"{\">\n        // <CLOSING_CURLY_BRACKET : \"}\">\n        [\n          /[\\[\\]\\(\\)\\{\\}]/,\n          {\n            cases: {\n              \"\\\\[\": {\n                cases: {\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\n                }\n              },\n              \"\\\\]\": {\n                cases: {\n                  ...is.id === \"bracket\" ? {\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\n                  } : {},\n                  // This cannot happen while in auto mode, since this applies only to an\n                  // fmExpression inside a directive. But once we encounter the start of a\n                  // directive, we can establish the tag syntax mode.\n                  ...ts.id === \"bracket\" ? {\n                    \"$S2==directive\": { token: \"@brackets.directive\", next: \"@popall\" }\n                  } : {},\n                  // Ignore mismatched paren\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              },\n              \"\\\\(\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n              \"\\\\)\": {\n                cases: {\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              },\n              \"\\\\{\": {\n                cases: {\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\n                }\n              },\n              \"\\\\}\": {\n                cases: {\n                  ...is.id === \"bracket\" ? {} : {\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\n                  },\n                  // Ignore mismatched paren\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              }\n            }\n          }\n        ],\n        // <OPEN_MISPLACED_INTERPOLATION : \"${\" | \"#{\" | \"[=\">\n        [/\\$\\{/, { token: \"delimiter.invalid\" }]\n      ],\n      // <FM_EXPRESSION, IN_PAREN, NAMED_PARAMETER_EXPRESSION> SKIP :\n      [s(\"blank_and_expression_comment_token__id__\")]: [\n        // < ( \" \" | \"\\t\" | \"\\n\" | \"\\r\" )+ >\n        [/(?:@blank)+/, { token: \"\" }],\n        // < (\"<\" | \"[\") (\"#\" | \"!\") \"--\"> : EXPRESSION_COMMENT\n        [/[<\\[][#!]--/, { token: \"comment\", next: s(\"@expressionComment__id__\") }]\n      ],\n      // <FM_EXPRESSION, NO_SPACE_EXPRESSION, NAMED_PARAMETER_EXPRESSION> TOKEN :\n      [s(\"directive_end_token__id__\")]: [\n        // <DIRECTIVE_END : \">\">\n        // {\n        //     if (inFTLHeader) {\n        //         eatNewline();\n        //         inFTLHeader = false;\n        //     }\n        //     if (squBracTagSyntax || postInterpolationLexState != -1 /* We are in an interpolation */) {\n        //         matchedToken.kind = NATURAL_GT;\n        //     } else {\n        //         SwitchTo(DEFAULT);\n        //     }\n        // }\n        // This cannot happen while in auto mode, since this applies only to an\n        // fmExpression inside a directive. But once we encounter the start of a\n        // directive, we can establish the tag syntax mode.\n        [\n          />/,\n          ts.id === \"bracket\" ? { token: \"operators\" } : { token: \"@brackets.directive\", next: \"@popall\" }\n        ],\n        // <EMPTY_DIRECTIVE_END : \"/>\" | \"/]\">\n        // It is a syntax error to end a tag with the wrong close token\n        // Let's indicate that to the user by not closing the tag\n        [\n          r(/(\\/)(@close__id__)/),\n          [{ token: \"delimiter.directive\" }, { token: \"@brackets.directive\", next: \"@popall\" }]\n        ]\n      ],\n      // <IN_PAREN> TOKEN :\n      [s(\"greater_operators_token__id__\")]: [\n        // <NATURAL_GT : \">\">\n        [/>/, { token: \"operators\" }],\n        // <NATURAL_GTE : \">=\">\n        [/>=/, { token: \"operators\" }]\n      ],\n      // <NO_SPACE_EXPRESSION> TOKEN :\n      [s(\"no_space_expression_end_token__id__\")]: [\n        // <TERMINATING_WHITESPACE :  ([\"\\n\", \"\\r\", \"\\t\", \" \"])+> : FM_EXPRESSION\n        [/(?:@blank)+/, { token: \"\", switchTo: s(\"@fmExpression__id__.directive\") }]\n      ],\n      [s(\"unified_call_token__id__\")]: [\n        // Special case for a call where the expression is just an ID\n        // <UNIFIED_CALL> <ID> <BLANK>+\n        [\n          /(@id)((?:@blank)+)/,\n          [{ token: \"tag\" }, { token: \"\", next: s(\"@fmExpression__id__.directive\") }]\n        ],\n        [\n          r(/(@id)(\\/?)(@close__id__)/),\n          [\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\", next: \"@popall\" }\n          ]\n        ],\n        [/./, { token: \"@rematch\", next: s(\"@noSpaceExpression__id__\") }]\n      ],\n      // <NO_PARSE> TOKEN :\n      [s(\"no_parse_token__id__\")]: [\n        // <MAYBE_END :\n        // \t (\"<\" | \"[\")\n        // \t \"/\"\n        // \t (\"#\")?\n        // \t ([\"a\"-\"z\", \"A\"-\"Z\"])+\n        // \t ( \" \" | \"\\t\" | \"\\n\" | \"\\r\" )*\n        // \t (\">\" | \"]\")\n        // >\n        [\n          r(/(@open__id__)(\\/#?)([a-zA-Z]+)((?:@blank)*)(@close__id__)/),\n          {\n            cases: {\n              \"$S2==$3\": [\n                { token: \"@brackets.directive\" },\n                { token: \"delimiter.directive\" },\n                { token: \"tag\" },\n                { token: \"\" },\n                { token: \"@brackets.directive\", next: \"@popall\" }\n              ],\n              \"$S2==comment\": [\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" }\n              ],\n              \"@default\": [\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" }\n              ]\n            }\n          }\n        ],\n        // <KEEP_GOING : (~[\"<\", \"[\", \"-\"])+>\n        // <LONE_LESS_THAN_OR_DASH : [\"<\", \"[\", \"-\"]>\n        [\n          /[^<\\[\\-]+|[<\\[\\-]/,\n          {\n            cases: {\n              \"$S2==comment\": { token: \"comment\" },\n              \"@default\": { token: \"source\" }\n            }\n          }\n        ]\n      ],\n      // <EXPRESSION_COMMENT> SKIP:\n      [s(\"expression_comment_token__id__\")]: [\n        // < \"-->\" | \"--]\">\n        [\n          /--[>\\]]/,\n          {\n            token: \"comment\",\n            next: \"@pop\"\n          }\n        ],\n        // < (~[\"-\", \">\", \"]\"])+ >\n        // < \">\">\n        // < \"]\">\n        // < \"-\">\n        [/[^\\->\\]]+|[>\\]\\-]/, { token: \"comment\" }]\n      ],\n      [s(\"terse_comment_token__id__\")]: [\n        //  <TERSE_COMMENT_END : \"-->\" | \"--]\">\n        [r(/--(?:@close__id__)/), { token: \"comment\", next: \"@popall\" }],\n        // <KEEP_GOING : (~[\"<\", \"[\", \"-\"])+>\n        // <LONE_LESS_THAN_OR_DASH : [\"<\", \"[\", \"-\"]>\n        [/[^<\\[\\-]+|[<\\[\\-]/, { token: \"comment\" }]\n      ]\n    }\n  };\n}\nfunction createMonarchLanguageAuto(is) {\n  const angle = createMonarchLanguage(TagSyntaxAngle, is);\n  const bracket = createMonarchLanguage(TagSyntaxBracket, is);\n  const auto = createMonarchLanguage(TagSyntaxAuto, is);\n  return {\n    // Angle and bracket syntax mode\n    // We switch to one of these once we have determined the mode\n    ...angle,\n    ...bracket,\n    ...auto,\n    // Settings\n    unicode: true,\n    includeLF: false,\n    start: `default_auto_${is.id}`,\n    ignoreCase: false,\n    defaultToken: \"invalid\",\n    tokenPostfix: `.freemarker2`,\n    brackets: [\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n    ],\n    tokenizer: {\n      ...angle.tokenizer,\n      ...bracket.tokenizer,\n      ...auto.tokenizer\n    }\n  };\n}\nvar TagAngleInterpolationDollar = {\n  conf: createLangConfiguration(TagSyntaxAngle),\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxDollar)\n};\nvar TagBracketInterpolationDollar = {\n  conf: createLangConfiguration(TagSyntaxBracket),\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxDollar)\n};\nvar TagAngleInterpolationBracket = {\n  conf: createLangConfiguration(TagSyntaxAngle),\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxBracket)\n};\nvar TagBracketInterpolationBracket = {\n  conf: createLangConfiguration(TagSyntaxBracket),\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxBracket)\n};\nvar TagAutoInterpolationDollar = {\n  conf: createLangConfigurationAuto(),\n  language: createMonarchLanguageAuto(InterpolationSyntaxDollar)\n};\nvar TagAutoInterpolationBracket = {\n  conf: createLangConfigurationAuto(),\n  language: createMonarchLanguageAuto(InterpolationSyntaxBracket)\n};\nexport {\n  TagAngleInterpolationBracket,\n  TagAngleInterpolationDollar,\n  TagAutoInterpolationBracket,\n  TagAutoInterpolationDollar,\n  TagBracketInterpolationBracket,\n  TagBracketInterpolationDollar\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}