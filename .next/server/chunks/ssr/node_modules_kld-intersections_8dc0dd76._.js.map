{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/kld-intersections/lib/PathHandler.js"],"sourcesContent":["/**\n *  PathHandler.js\n *\n *  @copyright 2017 Kevin Lindsey\n */\n\nimport {Point2D, Vector2D} from \"kld-affine\";\n\nconst TWO_PI = 2.0 * Math.PI;\n\n/**\n * Based on the SVG 1.1 specification, Appendix F: Implementation Requirements,\n * Section F.6 \"Elliptical arc implementation notes\"\n * {@see https://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes}\n *\n * @param {module:kld-affine.Point2D} startPoint\n * @param {module:kld-affine.Point2D} endPoint\n * @param {number} rx\n * @param {number} ry\n * @param {number} angle\n * @param {boolean} arcFlag\n * @param {boolean} sweepFlag\n * @returns {Array}\n */\nfunction getArcParameters(startPoint, endPoint, rx, ry, angle, arcFlag, sweepFlag) {\n    angle = angle * Math.PI / 180;\n\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    const TOLERANCE = 1e-6;\n\n    // Section (F.6.5.1)\n    const halfDiff = startPoint.subtract(endPoint).multiply(0.5);\n    const x1p = halfDiff.x * c + halfDiff.y * s;\n    const y1p = halfDiff.x * -s + halfDiff.y * c;\n\n    // Section (F.6.6.1)\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    // Section (F.6.6.2)\n    const x1px1p = x1p * x1p;\n    const y1py1p = y1p * y1p;\n    const lambda = (x1px1p / (rx * rx)) + (y1py1p / (ry * ry));\n\n    // Section (F.6.6.3)\n    if (lambda > 1) {\n        const factor = Math.sqrt(lambda);\n\n        rx *= factor;\n        ry *= factor;\n    }\n\n    // Section (F.6.5.2)\n    const rxrx = rx * rx;\n    const ryry = ry * ry;\n    const rxy1 = rxrx * y1py1p;\n    const ryx1 = ryry * x1px1p;\n\n    let factor = (rxrx * ryry - rxy1 - ryx1) / (rxy1 + ryx1);\n\n    if (Math.abs(factor) < TOLERANCE) {\n        factor = 0;\n    }\n\n    let sq = Math.sqrt(factor);\n\n    if (arcFlag === sweepFlag) {\n        sq = -sq;\n    }\n\n    // Section (F.6.5.3)\n    const mid = startPoint.add(endPoint).multiply(0.5);\n    const cxp = sq * rx * y1p / ry;\n    const cyp = sq * -ry * x1p / rx;\n\n    // Section (F.6.5.5 - F.6.5.6)\n    const xcr1 = (x1p - cxp) / rx;\n    const xcr2 = (x1p + cxp) / rx;\n    const ycr1 = (y1p - cyp) / ry;\n    const ycr2 = (y1p + cyp) / ry;\n\n    const theta1 = new Vector2D(1, 0).angleBetween(new Vector2D(xcr1, ycr1));\n    // let deltaTheta = normalizeAngle(new Vector2D(xcr1, ycr1).angleBetween(new Vector2D(-xcr2, -ycr2)));\n    let deltaTheta = new Vector2D(xcr1, ycr1).angleBetween(new Vector2D(-xcr2, -ycr2));\n\n    if (sweepFlag === false) {\n        deltaTheta -= TWO_PI;\n    }\n\n    return [\n        cxp * c - cyp * s + mid.x,\n        cxp * s + cyp * c + mid.y,\n        rx,\n        ry,\n        theta1,\n        theta1 + deltaTheta\n    ];\n}\n\n/**\n *  PathHandler\n */\nclass PathHandler {\n    /**\n     * PathHandler\n     *\n     * @param {ShapeInfo} shapeCreator\n     */\n    constructor(shapeCreator) {\n        this.shapeCreator = shapeCreator;\n        this.shapes = [];\n        this.firstX = null;\n        this.firstY = null;\n        this.lastX = null;\n        this.lastY = null;\n        this.lastCommand = null;\n    }\n\n    /**\n     * beginParse\n     */\n    beginParse() {\n        // zero out the sub-path array\n        this.shapes = [];\n\n        // clear firstX, firstY, lastX, and lastY\n        this.firstX = null;\n        this.firstY = null;\n        this.lastX = null;\n        this.lastY = null;\n\n        // need to remember last command type to determine how to handle the\n        // relative Bezier commands\n        this.lastCommand = null;\n    }\n\n    /**\n     *  addShape\n     *\n     *  @param {ShapeInfo} shape\n     */\n    addShape(shape) {\n        this.shapes.push(shape);\n    }\n\n    /**\n     *  arcAbs - A\n     *\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {number} xAxisRotation\n     *  @param {boolean} arcFlag\n     *  @param {boolean} sweepFlag\n     *  @param {number} x\n     *  @param {number} y\n     */\n    arcAbs(rx, ry, xAxisRotation, arcFlag, sweepFlag, x, y) {\n        if (rx === 0 || ry === 0) {\n            this.addShape(this.shapeCreator.line(\n                this.lastX, this.lastY,\n                x, y\n            ));\n        }\n        else {\n            const arcParameters = getArcParameters(\n                new Point2D(this.lastX, this.lastY),\n                new Point2D(x, y),\n                rx, ry,\n                xAxisRotation,\n                arcFlag, sweepFlag\n            );\n\n            this.addShape(this.shapeCreator.arc(...arcParameters));\n        }\n\n        this.lastCommand = \"A\";\n        this.lastX = x;\n        this.lastY = y;\n    }\n\n    /**\n     *  arcRel - a\n     *\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {number} xAxisRotation\n     *  @param {boolean} arcFlag\n     *  @param {boolean} sweepFlag\n     *  @param {number} x\n     *  @param {number} y\n     */\n    arcRel(rx, ry, xAxisRotation, arcFlag, sweepFlag, x, y) {\n        if (rx === 0 || ry === 0) {\n            this.addShape(this.shapeCreator.line(\n                this.lastX, this.lastY,\n                this.lastX + x, this.lastY + y\n            ));\n        }\n        else {\n            const arcParameters = getArcParameters(\n                new Point2D(this.lastX, this.lastY),\n                new Point2D(this.lastX + x, this.lastY + y),\n                rx, ry,\n                xAxisRotation,\n                arcFlag, sweepFlag\n            );\n\n            this.addShape(this.shapeCreator.arc(...arcParameters));\n        }\n\n        this.lastCommand = \"a\";\n        this.lastX += x;\n        this.lastY += y;\n    }\n\n    /**\n     *  curvetoCubicAbs - C\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicAbs(x1, y1, x2, y2, x, y) {\n        this.addShape(this.shapeCreator.cubicBezier(\n            this.lastX, this.lastY,\n            x1, y1,\n            x2, y2,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"C\";\n    }\n\n    /**\n     *  curvetoCubicRel - c\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicRel(x1, y1, x2, y2, x, y) {\n        this.addShape(this.shapeCreator.cubicBezier(\n            this.lastX, this.lastY,\n            this.lastX + x1, this.lastY + y1,\n            this.lastX + x2, this.lastY + y2,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"c\";\n    }\n\n    /**\n     *  linetoHorizontalAbs - H\n     *\n     *  @param {number} x\n     */\n    linetoHorizontalAbs(x) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            x, this.lastY\n        ));\n\n        this.lastX = x;\n        this.lastCommand = \"H\";\n    }\n\n    /**\n     *  linetoHorizontalRel - h\n     *\n     *  @param {number} x\n     */\n    linetoHorizontalRel(x) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            this.lastX + x, this.lastY\n        ));\n\n        this.lastX += x;\n        this.lastCommand = \"h\";\n    }\n\n    /**\n     *  linetoAbs - L\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    linetoAbs(x, y) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"L\";\n    }\n\n    /**\n     *  linetoRel - l\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    linetoRel(x, y) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"l\";\n    }\n\n    /**\n     *  movetoAbs - M\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    movetoAbs(x, y) {\n        this.firstX = x;\n        this.firstY = y;\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"M\";\n    }\n\n    /**\n     *  movetoRel - m\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    movetoRel(x, y) {\n        this.firstX += x;\n        this.firstY += y;\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"m\";\n    }\n\n    /**\n     *  curvetoQuadraticAbs - Q\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticAbs(x1, y1, x, y) {\n        this.addShape(this.shapeCreator.quadraticBezier(\n            this.lastX, this.lastY,\n            x1, y1,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"Q\";\n    }\n\n    /**\n     *  curvetoQuadraticRel - q\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticRel(x1, y1, x, y) {\n        this.addShape(this.shapeCreator.quadraticBezier(\n            this.lastX, this.lastY,\n            this.lastX + x1, this.lastY + y1,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"q\";\n    }\n\n    /**\n     *  curvetoCubicSmoothAbs - S\n     *\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicSmoothAbs(x2, y2, x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[SsCc]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[2];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(this.shapeCreator.cubicBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            x2, y2,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"S\";\n    }\n\n    /**\n     *  curvetoCubicSmoothRel - s\n     *\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicSmoothRel(x2, y2, x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[SsCc]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[2];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(this.shapeCreator.cubicBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            this.lastX + x2, this.lastY + y2,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"s\";\n    }\n\n    /**\n     *  curvetoQuadraticSmoothAbs - T\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticSmoothAbs(x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[QqTt]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[1];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(this.shapeCreator.quadraticBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"T\";\n    }\n\n    /**\n     *  curvetoQuadraticSmoothRel - t\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticSmoothRel(x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[QqTt]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[1];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(this.shapeCreator.quadraticBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"t\";\n    }\n\n    /**\n     *  linetoVerticalAbs - V\n     *\n     *  @param {number} y\n     */\n    linetoVerticalAbs(y) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            this.lastX, y\n        ));\n\n        this.lastY = y;\n\n        this.lastCommand = \"V\";\n    }\n\n    /**\n     *  linetoVerticalRel - v\n     *\n     *  @param {number} y\n     */\n    linetoVerticalRel(y) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            this.lastX, this.lastY + y\n        ));\n\n        this.lastY += y;\n\n        this.lastCommand = \"v\";\n    }\n\n    /**\n     *  closePath - z or Z\n     */\n    closePath() {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            this.firstX, this.firstY\n        ));\n\n        this.lastX = this.firstX;\n        this.lastY = this.firstY;\n        this.lastCommand = \"z\";\n    }\n}\n\nexport default PathHandler;\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;AAED;AAAA;AAAA;;AAEA,MAAM,SAAS,MAAM,KAAK,EAAE;AAE5B;;;;;;;;;;;;;CAaC,GACD,SAAS,iBAAiB,UAAU,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS;IAC7E,QAAQ,QAAQ,KAAK,EAAE,GAAG;IAE1B,MAAM,IAAI,KAAK,GAAG,CAAC;IACnB,MAAM,IAAI,KAAK,GAAG,CAAC;IACnB,MAAM,YAAY;IAElB,oBAAoB;IACpB,MAAM,WAAW,WAAW,QAAQ,CAAC,UAAU,QAAQ,CAAC;IACxD,MAAM,MAAM,SAAS,CAAC,GAAG,IAAI,SAAS,CAAC,GAAG;IAC1C,MAAM,MAAM,SAAS,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG;IAE3C,oBAAoB;IACpB,KAAK,KAAK,GAAG,CAAC;IACd,KAAK,KAAK,GAAG,CAAC;IAEd,oBAAoB;IACpB,MAAM,SAAS,MAAM;IACrB,MAAM,SAAS,MAAM;IACrB,MAAM,SAAS,AAAC,SAAS,CAAC,KAAK,EAAE,IAAM,SAAS,CAAC,KAAK,EAAE;IAExD,oBAAoB;IACpB,IAAI,SAAS,GAAG;QACZ,MAAM,SAAS,KAAK,IAAI,CAAC;QAEzB,MAAM;QACN,MAAM;IACV;IAEA,oBAAoB;IACpB,MAAM,OAAO,KAAK;IAClB,MAAM,OAAO,KAAK;IAClB,MAAM,OAAO,OAAO;IACpB,MAAM,OAAO,OAAO;IAEpB,IAAI,SAAS,CAAC,OAAO,OAAO,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI;IAEvD,IAAI,KAAK,GAAG,CAAC,UAAU,WAAW;QAC9B,SAAS;IACb;IAEA,IAAI,KAAK,KAAK,IAAI,CAAC;IAEnB,IAAI,YAAY,WAAW;QACvB,KAAK,CAAC;IACV;IAEA,oBAAoB;IACpB,MAAM,MAAM,WAAW,GAAG,CAAC,UAAU,QAAQ,CAAC;IAC9C,MAAM,MAAM,KAAK,KAAK,MAAM;IAC5B,MAAM,MAAM,KAAK,CAAC,KAAK,MAAM;IAE7B,8BAA8B;IAC9B,MAAM,OAAO,CAAC,MAAM,GAAG,IAAI;IAC3B,MAAM,OAAO,CAAC,MAAM,GAAG,IAAI;IAC3B,MAAM,OAAO,CAAC,MAAM,GAAG,IAAI;IAC3B,MAAM,OAAO,CAAC,MAAM,GAAG,IAAI;IAE3B,MAAM,SAAS,IAAI,uLAAA,CAAA,WAAQ,CAAC,GAAG,GAAG,YAAY,CAAC,IAAI,uLAAA,CAAA,WAAQ,CAAC,MAAM;IAClE,sGAAsG;IACtG,IAAI,aAAa,IAAI,uLAAA,CAAA,WAAQ,CAAC,MAAM,MAAM,YAAY,CAAC,IAAI,uLAAA,CAAA,WAAQ,CAAC,CAAC,MAAM,CAAC;IAE5E,IAAI,cAAc,OAAO;QACrB,cAAc;IAClB;IAEA,OAAO;QACH,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC;QACzB,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC;QACzB;QACA;QACA;QACA,SAAS;KACZ;AACL;AAEA;;CAEC,GACD,MAAM;IACF;;;;KAIC,GACD,YAAY,YAAY,CAAE;QACtB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,MAAM,GAAG,EAAE;QAChB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;KAEC,GACD,aAAa;QACT,8BAA8B;QAC9B,IAAI,CAAC,MAAM,GAAG,EAAE;QAEhB,yCAAyC;QACzC,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;QAEb,oEAAoE;QACpE,2BAA2B;QAC3B,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;KAIC,GACD,SAAS,KAAK,EAAE;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IACrB;IAEA;;;;;;;;;;KAUC,GACD,OAAO,EAAE,EAAE,EAAE,EAAE,aAAa,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;QACpD,IAAI,OAAO,KAAK,OAAO,GAAG;YACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAChC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,GAAG;QAEX,OACK;YACD,MAAM,gBAAgB,iBAClB,IAAI,qLAAA,CAAA,UAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAClC,IAAI,qLAAA,CAAA,UAAO,CAAC,GAAG,IACf,IAAI,IACJ,eACA,SAAS;YAGb,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI;QAC3C;QAEA,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;IACjB;IAEA;;;;;;;;;;KAUC,GACD,OAAO,EAAE,EAAE,EAAE,EAAE,aAAa,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;QACpD,IAAI,OAAO,KAAK,OAAO,GAAG;YACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAChC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,IAAI,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG;QAErC,OACK;YACD,MAAM,gBAAgB,iBAClB,IAAI,qLAAA,CAAA,UAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAClC,IAAI,qLAAA,CAAA,UAAO,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,IACzC,IAAI,IACJ,eACA,SAAS;YAGb,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI;QAC3C;QAEA,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,KAAK,IAAI;IAClB;IAEA;;;;;;;;;KASC,GACD,gBAAgB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;QAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CACvC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,IAAI,IACJ,IAAI,IACJ,GAAG;QAGP,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;;;;;KASC,GACD,gBAAgB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;QAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CACvC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,IAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,IAC9B,IAAI,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG;QAGjC,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;KAIC,GACD,oBAAoB,CAAC,EAAE;QACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAChC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,GAAG,IAAI,CAAC,KAAK;QAGjB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;KAIC,GACD,oBAAoB,CAAC,EAAE;QACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAChC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,IAAI,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK;QAG9B,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;KAKC,GACD,UAAU,CAAC,EAAE,CAAC,EAAE;QACZ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAChC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,GAAG;QAGP,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;KAKC,GACD,UAAU,CAAC,EAAE,CAAC,EAAE;QACZ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAChC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,IAAI,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG;QAGjC,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;KAKC,GACD,UAAU,CAAC,EAAE,CAAC,EAAE;QACZ,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;KAKC,GACD,UAAU,CAAC,EAAE,CAAC,EAAE;QACZ,IAAI,CAAC,MAAM,IAAI;QACf,IAAI,CAAC,MAAM,IAAI;QACf,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;;;KAOC,GACD,oBAAoB,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAC3C,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,IAAI,IACJ,GAAG;QAGP,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;;;KAOC,GACD,oBAAoB,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAC3C,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,IAC9B,IAAI,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG;QAGjC,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;;;KAOC,GACD,sBAAsB,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;QAChC,IAAI,UAAU;QAEd,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa;YACpC,MAAM,eAAe,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;YAEhE,WAAW,IAAI,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;YAC1C,WAAW,IAAI,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;QAC9C,OACK;YACD,WAAW,IAAI,CAAC,KAAK;YACrB,WAAW,IAAI,CAAC,KAAK;QACzB;QAEA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CACvC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,UAAU,UACV,IAAI,IACJ,GAAG;QAGP,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;;;KAOC,GACD,sBAAsB,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;QAChC,IAAI,UAAU;QAEd,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa;YACpC,MAAM,eAAe,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;YAEhE,WAAW,IAAI,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;YAC1C,WAAW,IAAI,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;QAC9C,OACK;YACD,WAAW,IAAI,CAAC,KAAK;YACrB,WAAW,IAAI,CAAC,KAAK;QACzB;QAEA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CACvC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,UAAU,UACV,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,IAC9B,IAAI,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG;QAGjC,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;KAKC,GACD,0BAA0B,CAAC,EAAE,CAAC,EAAE;QAC5B,IAAI,UAAU;QAEd,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa;YACpC,MAAM,eAAe,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;YAEhE,WAAW,IAAI,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;YAC1C,WAAW,IAAI,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;QAC9C,OACK;YACD,WAAW,IAAI,CAAC,KAAK;YACrB,WAAW,IAAI,CAAC,KAAK;QACzB;QAEA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAC3C,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,UAAU,UACV,GAAG;QAGP,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;KAKC,GACD,0BAA0B,CAAC,EAAE,CAAC,EAAE;QAC5B,IAAI,UAAU;QAEd,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa;YACpC,MAAM,eAAe,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;YAEhE,WAAW,IAAI,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;YAC1C,WAAW,IAAI,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;QAC9C,OACK;YACD,WAAW,IAAI,CAAC,KAAK;YACrB,WAAW,IAAI,CAAC,KAAK;QACzB;QAEA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAC3C,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,UAAU,UACV,IAAI,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG;QAGjC,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,KAAK,IAAI;QACd,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;KAIC,GACD,kBAAkB,CAAC,EAAE;QACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAChC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,IAAI,CAAC,KAAK,EAAE;QAGhB,IAAI,CAAC,KAAK,GAAG;QAEb,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;KAIC,GACD,kBAAkB,CAAC,EAAE;QACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAChC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG;QAG7B,IAAI,CAAC,KAAK,IAAI;QAEd,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;KAEC,GACD,YAAY;QACR,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAChC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EACtB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM;QAG5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM;QACxB,IAAI,CAAC,WAAW,GAAG;IACvB;AACJ;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/kld-intersections/lib/ShapeInfo.js"],"sourcesContent":["/**\n *  ShapeInfo.js\n *  @copyright 2002, 2017 Kevin Lindsey\n */\n\nimport {Point2D} from \"kld-affine\";\nimport {PathParser} from \"kld-path-parser\";\nimport PathHandler from \"./PathHandler.js\";\n\nconst degree90 = Math.PI * 0.5;\nconst parser = new PathParser();\n\n\n/**\n * getValues\n *\n * @param {Array} types\n * @param {Array} args\n * @returns {Array}\n */\nexport function getValues(types, args) {\n    const result = [];\n\n    for (const [names, type] of types) {\n        let value = null;\n\n        if (type === \"Point2D\") {\n            value = parsePoint(names, args);\n        }\n        else if (type === \"Number\") {\n            value = parseNumber(names, args);\n        }\n        else if (type === \"Array<Point2D>\" || type === \"Point2D[]\") {\n            const values = [];\n\n            while (args.length > 0) {\n                values.push(parsePoint(names, args));\n            }\n\n            if (values.length > 0) {\n                value = values;\n            }\n        }\n        else if (type === \"Optional<Number>\" || type === \"Number?\") {\n            value = parseNumber(names, args);\n\n            if (value === null) {\n                value = undefined;\n            }\n        }\n        else {\n            throw new TypeError(`Unrecognized value type: ${type}`);\n        }\n\n        if (value !== null) {\n            result.push(value);\n        }\n        else {\n            throw new TypeError(`Unable to extract value for ${names}`);\n        }\n    }\n\n    return result;\n}\n\n/**\n * parseNumber\n *\n * @param {Array} names\n * @param {Array} args\n * @returns {number}\n */\nexport function parseNumber(names, args) {\n    let result = null;\n\n    if (args.length > 0) {\n        const item = args[0];\n        const itemType = typeof item;\n\n        if (itemType === \"number\") {\n            return args.shift();\n        }\n        else if (itemType === \"object\") {\n            for (const prop of names) {\n                if (prop in item && typeof item[prop] === \"number\") {\n                    result = item[prop];\n                    break;\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * parsePoint\n *\n * @param {Array} names\n * @param {Array} args\n * @returns {Array}\n */\nexport function parsePoint(names, args) {\n    let result = null;\n\n    if (args.length > 0) {\n        const item = args[0];\n        const itemType = typeof item;\n\n        if (itemType === \"number\") {\n            if (args.length > 1) {\n                const x = args.shift();\n                const y = args.shift();\n\n                result = new Point2D(x, y);\n            }\n        }\n        else if (Array.isArray(item) && item.length > 1) {\n            if (item.length === 2) {\n                const [x, y] = args.shift();\n\n                result = new Point2D(x, y);\n            }\n            else {\n                throw new TypeError(`Unhandled array of length ${item.length}`);\n            }\n        }\n        else if (itemType === \"object\") {\n            if (\"x\" in item && \"y\" in item) {\n                result = new Point2D(item.x, item.y);\n                args.shift();\n            }\n            else {\n                for (const props of names) {\n                    if (Array.isArray(props)) {\n                        if (props.every(p => p in item)) {\n                            result = new Point2D(item[props[0]], item[props[1]]);\n                            break;\n                        }\n                    }\n                    else if (props in item) {\n                        result = parsePoint([], [item[props]]);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n *  ShapeInfo\n *  @memberof module:kld-intersections\n */\nexport default class ShapeInfo {\n    /**\n     *  @param {string} name\n     *  @param {Array} args\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    constructor(name, args) {\n        this.name = name;\n        this.args = args;\n    }\n\n    static arc(...args) {\n        const types = [\n            [[\"center\", [\"centerX\", \"centerY\"], [\"cx\", \"cy\"]], \"Point2D\"],\n            [[\"radiusX\", \"rx\"], \"Number\"],\n            [[\"radiusY\", \"ry\"], \"Number\"],\n            [[\"startRadians\"], \"Number\"],\n            [[\"endRadians\"], \"Number\"]\n        ];\n        const values = getValues(types, args);\n\n        return new ShapeInfo(ShapeInfo.ARC, values);\n    }\n\n    static quadraticBezier(...args) {\n        const types = [\n            [[\"p1\", [\"p1x\", \"p1y\"]], \"Point2D\"],\n            [[\"p2\", [\"p2x\", \"p2y\"]], \"Point2D\"],\n            [[\"p3\", [\"p3x\", \"p3y\"]], \"Point2D\"]\n        ];\n        const values = getValues(types, args);\n\n        return new ShapeInfo(ShapeInfo.QUADRATIC_BEZIER, values);\n    }\n\n    static cubicBezier(...args) {\n        const types = [\n            [[\"p1\", [\"p1x\", \"p1y\"]], \"Point2D\"],\n            [[\"p2\", [\"p2x\", \"p2y\"]], \"Point2D\"],\n            [[\"p3\", [\"p3x\", \"p3y\"]], \"Point2D\"],\n            [[\"p4\", [\"p4x\", \"p4y\"]], \"Point2D\"]\n        ];\n        const values = getValues(types, args);\n\n        return new ShapeInfo(ShapeInfo.CUBIC_BEZIER, values);\n    }\n\n    static circle(...args) {\n        const types = [\n            [[\"center\", [\"centerX\", \"centerY\"], [\"cx\", \"cy\"]], \"Point2D\"],\n            [[\"radius\", \"r\"], \"Number\"]\n        ];\n        const values = getValues(types, args);\n\n        return new ShapeInfo(ShapeInfo.CIRCLE, values);\n    }\n\n    static ellipse(...args) {\n        const types = [\n            [[\"center\", [\"centerX\", \"centerY\"], [\"cx\", \"cy\"]], \"Point2D\"],\n            [[\"radiusX\", \"rx\"], \"Number\"],\n            [[\"radiusY\", \"ry\"], \"Number\"]\n        ];\n        const values = getValues(types, args);\n\n        return new ShapeInfo(ShapeInfo.ELLIPSE, values);\n    }\n\n    static line(...args) {\n        const types = [\n            [[\"p1\", [\"p1x\", \"p1y\"], [\"x1\", \"y1\"]], \"Point2D\"],\n            [[\"p2\", [\"p2x\", \"p2y\"], [\"x2\", \"y2\"]], \"Point2D\"]\n        ];\n        const values = getValues(types, args);\n\n        return new ShapeInfo(ShapeInfo.LINE, values);\n    }\n\n    static path(...args) {\n        parser.parseData(args[0]);\n\n        return new ShapeInfo(ShapeInfo.PATH, handler.shapes);\n    }\n\n    static polygon(...args) {\n        const types = [\n            [[], \"Array<Point2D>\"]\n        ];\n        const values = getValues(\n            types,\n            args.length === 1 && Array.isArray(args[0]) ? args[0] : args\n        );\n\n        return new ShapeInfo(ShapeInfo.POLYGON, values);\n    }\n\n    static polyline(...args) {\n        const types = [\n            [[], \"Array<Point2D>\"]\n        ];\n        const values = getValues(\n            types,\n            args.length === 1 && Array.isArray(args[0]) ? args[0] : args\n        );\n\n        return new ShapeInfo(ShapeInfo.POLYLINE, values);\n    }\n\n    static rectangle(...args) {\n        const types = [\n            [[\"topLeft\", [\"x\", \"y\"], [\"left\", \"top\"]], \"Point2D\"],\n            [[\"size\", [\"width\", \"height\"], [\"w\", \"h\"]], \"Point2D\"],\n            [[\"radiusX\", \"rx\"], \"Optional<Number>\"],\n            [[\"radiusY\", \"ry\"], \"Optional<Number>\"]\n        ];\n        const values = getValues(types, args);\n\n        // fix up bottom-right point\n        const p1 = values[0];\n        const p2 = values[1];\n        values[1] = new Point2D(p1.x + p2.x, p1.y + p2.y);\n\n        // create shape info\n        const result = new ShapeInfo(ShapeInfo.RECTANGLE, values);\n\n        // handle possible rounded rectangle values\n        let ry = result.args.pop();\n        let rx = result.args.pop();\n\n        rx = rx === undefined ? 0 : rx;\n        ry = ry === undefined ? 0 : ry;\n\n        if (rx === 0 && ry === 0) {\n            return result;\n        }\n\n        const {x: p1x, y: p1y} = result.args[0];\n        const {x: p2x, y: p2y} = result.args[1];\n        const width = p2x - p1x;\n        const height = p2y - p1y;\n\n        if (rx === 0) {\n            rx = ry;\n        }\n        if (ry === 0) {\n            ry = rx;\n        }\n        if (rx > width * 0.5) {\n            rx = width * 0.5;\n        }\n        if (ry > height * 0.5) {\n            ry = height * 0.5;\n        }\n\n        const x0 = p1x;\n        const y0 = p1y;\n        const x1 = p1x + rx;\n        const y1 = p1y + ry;\n        const x2 = p2x - rx;\n        const y2 = p2y - ry;\n        const x3 = p2x;\n        const y3 = p2y;\n\n        const segments = [\n            ShapeInfo.arc(x1, y1, rx, ry, 2 * degree90, 3 * degree90),\n            ShapeInfo.line(x1, y0, x2, y0),\n            ShapeInfo.arc(x2, y1, rx, ry, 3 * degree90, 4 * degree90),\n            ShapeInfo.line(x3, y1, x3, y2),\n            ShapeInfo.arc(x2, y2, rx, ry, 0, degree90),\n            ShapeInfo.line(x2, y3, x1, y3),\n            ShapeInfo.arc(x1, y2, rx, ry, degree90, 2 * degree90),\n            ShapeInfo.line(x0, y2, x0, y1)\n        ];\n\n        return new ShapeInfo(ShapeInfo.PATH, segments);\n    }\n}\n\n// define shape name constants\nShapeInfo.ARC = \"Arc\";\nShapeInfo.QUADRATIC_BEZIER = \"Bezier2\";\nShapeInfo.CUBIC_BEZIER = \"Bezier3\";\nShapeInfo.CIRCLE = \"Circle\";\nShapeInfo.ELLIPSE = \"Ellipse\";\nShapeInfo.LINE = \"Line\";\nShapeInfo.PATH = \"Path\";\nShapeInfo.POLYGON = \"Polygon\";\nShapeInfo.POLYLINE = \"Polyline\";\nShapeInfo.RECTANGLE = \"Rectangle\";\n\n// setup path parser handler after ShapeInfo has been defined\nconst handler = new PathHandler(ShapeInfo);\n\nparser.setHandler(handler);\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 891, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/kld-intersections/lib/Intersection.js"],"sourcesContent":["/* eslint-disable camelcase, no-labels */\n/**\n *\n *  Intersection.js\n *\n *  copyright 2002, 2013 Kevin Lindsey\n */\n\nimport {Point2D, Vector2D} from \"kld-affine\";\nimport {Polynomial} from \"kld-polynomial\";\nimport ShapeInfo from \"./ShapeInfo.js\";\n\nconst TWO_PI = 2.0 * Math.PI;\nconst UNIT_X = new Vector2D(1, 0);\n\n/**\n * @memberof module:kld-intersections.Intersection\n * @param {*} o\n * @returns {boolean}\n */\nfunction isNullish(o) {\n    return o === null || o === undefined;\n}\n\n/**\n *  bezout\n *\n *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n *  code along with many other excellent examples are avaiable at his site:\n *  http://www.magic-software.com\n *\n *  @param {Array<module:kld-intersections.Point2D>} e1\n *  @param {Array<module:kld-intersections.Point2D>} e2\n *  @returns {external:Polynomial}\n */\nfunction bezout(e1, e2) {\n    const AB = e1[0] * e2[1] - e2[0] * e1[1];\n    const AC = e1[0] * e2[2] - e2[0] * e1[2];\n    const AD = e1[0] * e2[3] - e2[0] * e1[3];\n    const AE = e1[0] * e2[4] - e2[0] * e1[4];\n    const AF = e1[0] * e2[5] - e2[0] * e1[5];\n    const BC = e1[1] * e2[2] - e2[1] * e1[2];\n    const BE = e1[1] * e2[4] - e2[1] * e1[4];\n    const BF = e1[1] * e2[5] - e2[1] * e1[5];\n    const CD = e1[2] * e2[3] - e2[2] * e1[3];\n    const DE = e1[3] * e2[4] - e2[3] * e1[4];\n    const DF = e1[3] * e2[5] - e2[3] * e1[5];\n    const BFpDE = BF + DE;\n    const BEmCD = BE - CD;\n\n    return new Polynomial(\n        AB * BC - AC * AC,\n        AB * BEmCD + AD * BC - 2 * AC * AE,\n        AB * BFpDE + AD * BEmCD - AE * AE - 2 * AC * AF,\n        AB * DF + AD * BFpDE - 2 * AE * AF,\n        AD * DF - AF * AF\n    );\n}\n\n/**\n * normalizeAngle\n *\n * @param {number} radians\n * @returns {number}\n */\nfunction normalizeAngle(radians) {\n    const normal = radians % TWO_PI;\n\n    return normal < 0.0 ? normal + TWO_PI : normal;\n}\n\n/**\n * restrictPointsToArc\n *\n * @param {module:kld-intersections.Intersection} intersections\n * @param {module:kld-intersections.Point2D} center\n * @param {number} radiusX\n * @param {number} radiusY\n * @param {number} startRadians\n * @param {number} endRadians\n * @returns {module:kld-intersections.Intersection}\n */\nfunction restrictPointsToArc(intersections, center, radiusX, radiusY, startRadians, endRadians) {\n    if (intersections.points.length === 0) {\n        return intersections;\n    }\n\n    const result = new Intersection(\"No Intersection\");\n\n    // swap if end is lower, so start is always the lower one\n    if (endRadians < startRadians) {\n        [startRadians, endRadians] = [endRadians, startRadians];\n    }\n\n    // move everything to the positive domain, simultaneously\n    if (startRadians < 0 || endRadians < 0) {\n        startRadians += TWO_PI;\n        endRadians += TWO_PI;\n    }\n\n    for (const p of intersections.points) {\n        let a = normalizeAngle(UNIT_X.angleBetween(Vector2D.fromPoints(center, p)));\n\n        // a angle smaller than start, it may still be between\n        // this happens if end > TWO_PI\n        if (a < startRadians) {\n            a += TWO_PI;\n        }\n\n        if (startRadians <= a && a <= endRadians) {\n            result.appendPoint(p);\n        }\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n}\n\n/**\n *  closePolygon\n *  @memberof module:kld-intersections.Intersection\n *  @param {Array<module:kld-intersections.Point2D>} points\n *  @returns {Array<module:kld-intersections.Point2D>}\n */\nfunction closePolygon(points) {\n    const copy = points.slice();\n\n    copy.push(points[0]);\n\n    return copy;\n}\n\n/**\n * Intersection\n * @memberof module:kld-intersections\n */\nclass Intersection {\n    /**\n     *  @param {string} status\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    constructor(status) {\n        this.init(status);\n    }\n\n\n    /**\n     *  init\n     *\n     *  @param {string} status\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    init(status) {\n        this.status = status;\n        this.points = [];\n    }\n\n    /**\n     *  intersect\n     *\n     *  @param {module:kld-intersections.ShapeInfo} shape1\n     *  @param {module:kld-intersections.ShapeInfo} shape2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersect(shape1, shape2) {\n        let result;\n\n        if (!isNullish(shape1) && !isNullish(shape2)) {\n            if (shape1.name === \"Path\") {\n                result = Intersection.intersectPathShape(shape1, shape2);\n            }\n            else if (shape2.name === \"Path\") {\n                result = Intersection.intersectPathShape(shape2, shape1);\n            }\n            else if (shape1.name === \"Arc\") {\n                result = Intersection.intersectArcShape(shape1, shape2);\n            }\n            else if (shape2.name === \"Arc\") {\n                result = Intersection.intersectArcShape(shape2, shape1);\n            }\n            else {\n                let method;\n                let args;\n\n                if (shape1.name < shape2.name) {\n                    method = \"intersect\" + shape1.name + shape2.name;\n                    args = shape1.args.concat(shape2.args);\n                }\n                else {\n                    method = \"intersect\" + shape2.name + shape1.name;\n                    args = shape2.args.concat(shape1.args);\n                }\n\n                if (!(method in Intersection)) {\n                    throw new TypeError(\"Intersection not available: \" + method);\n                }\n\n                result = Intersection[method].apply(null, args);\n            }\n        }\n        else {\n            result = new Intersection(\"No Intersection\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPathShape\n     *\n     *  @param {module:kld-intersections.ShapeInfo} path\n     *  @param {module:kld-intersections.ShapeInfo} shape\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPathShape(path, shape) {\n        const result = new Intersection(\"No Intersection\");\n\n        for (const segment of path.args) {\n            const inter = Intersection.intersect(segment, shape);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     * intersectArcShape\n     *\n     * @param {module:kld-intersections.ShapeInfo} arc\n     * @param {module:kld-intersections.ShapeInfo} shape\n     * @returns {module:kld-intersections.Intersection}\n     */\n    static intersectArcShape(arc, shape) {\n        const [center, radiusX, radiusY, startRadians, endRadians] = arc.args;\n        const ellipse = new ShapeInfo(ShapeInfo.ELLIPSE, [center, radiusX, radiusY]);\n        const ellipse_result = Intersection.intersect(ellipse, shape);\n\n        // return ellipse_result;\n        return restrictPointsToArc(ellipse_result, center, radiusX, radiusY, startRadians, endRadians);\n    }\n\n    /**\n     *  intersectBezier2Bezier2\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Bezier2(a1, a2, a3, b1, b2, b3) {\n        let a, b;\n        const result = new Intersection(\"No Intersection\");\n\n        a = a2.multiply(-2);\n        const c12 = a1.add(a.add(a3));\n\n        a = a1.multiply(-2);\n        b = a2.multiply(2);\n        const c11 = a.add(b);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b2.multiply(-2);\n        const c22 = b1.add(a.add(b3));\n\n        a = b1.multiply(-2);\n        b = b2.multiply(2);\n        const c21 = a.add(b);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        // bezout\n        a = c12.x * c11.y - c11.x * c12.y;\n        b = c22.x * c11.y - c11.x * c22.y;\n        const c = c21.x * c11.y - c11.x * c21.y;\n        const d = c11.x * (c10.y - c20.y) + c11.y * (-c10.x + c20.x);\n        const e = c22.x * c12.y - c12.x * c22.y;\n        const f = c21.x * c12.y - c12.x * c21.y;\n        const g = c12.x * (c10.y - c20.y) + c12.y * (-c10.x + c20.x);\n\n        // determinant\n        const poly = new Polynomial(\n            -e * e,\n            -2 * e * f,\n            a * b - f * f - 2 * e * g,\n            a * c - 2 * f * g,\n            a * d - g * g\n        );\n\n        const roots = poly.getRoots();\n\n        for (const s of roots) {\n            if (0 <= s && s <= 1) {\n                const xp = new Polynomial(\n                    c12.x,\n                    c11.x,\n                    c10.x - c20.x - s * c21.x - s * s * c22.x\n                );\n                xp.simplifyEquals();\n                const xRoots = xp.getRoots();\n                const yp = new Polynomial(\n                    c12.y,\n                    c11.y,\n                    c10.y - c20.y - s * c21.y - s * s * c22.y\n                );\n                yp.simplifyEquals();\n                const yRoots = yp.getRoots();\n\n                if (xRoots.length > 0 && yRoots.length > 0) {\n                    const TOLERANCE = 1e-4;\n\n                    checkRoots:\n                    for (const xRoot of xRoots) {\n                        if (0 <= xRoot && xRoot <= 1) {\n                            for (let k = 0; k < yRoots.length; k++) {\n                                if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                                    result.points.push(c22.multiply(s * s).add(c21.multiply(s).add(c20)));\n                                    break checkRoots;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Bezier3\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @param {module:kld-intersections.Point2D} b4\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Bezier3(a1, a2, a3, b1, b2, b3, b4) {\n        let a, b, c, d;\n        const result = new Intersection(\"No Intersection\");\n\n        a = a2.multiply(-2);\n        const c12 = a1.add(a.add(a3));\n\n        a = a1.multiply(-2);\n        b = a2.multiply(2);\n        const c11 = a.add(b);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b1.multiply(-1);\n        b = b2.multiply(3);\n        c = b3.multiply(-3);\n        d = a.add(b.add(c.add(b4)));\n        const c23 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(3);\n        b = b2.multiply(-6);\n        c = b3.multiply(3);\n        d = a.add(b.add(c));\n        const c22 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(-3);\n        b = b2.multiply(3);\n        c = a.add(b);\n        const c21 = new Point2D(c.x, c.y);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        const c10x2 = c10.x * c10.x;\n        const c10y2 = c10.y * c10.y;\n        const c11x2 = c11.x * c11.x;\n        const c11y2 = c11.y * c11.y;\n        const c12x2 = c12.x * c12.x;\n        const c12y2 = c12.y * c12.y;\n        const c20x2 = c20.x * c20.x;\n        const c20y2 = c20.y * c20.y;\n        const c21x2 = c21.x * c21.x;\n        const c21y2 = c21.y * c21.y;\n        const c22x2 = c22.x * c22.x;\n        const c22y2 = c22.y * c22.y;\n        const c23x2 = c23.x * c23.x;\n        const c23y2 = c23.y * c23.y;\n\n        const poly = new Polynomial(\n            -2 * c12.x * c12.y * c23.x * c23.y + c12x2 * c23y2 + c12y2 * c23x2,\n            -2 * c12.x * c12.y * c22.x * c23.y - 2 * c12.x * c12.y * c22.y * c23.x + 2 * c12y2 * c22.x * c23.x +\n                2 * c12x2 * c22.y * c23.y,\n            -2 * c12.x * c21.x * c12.y * c23.y - 2 * c12.x * c12.y * c21.y * c23.x - 2 * c12.x * c12.y * c22.x * c22.y +\n                2 * c21.x * c12y2 * c23.x + c12y2 * c22x2 + c12x2 * (2 * c21.y * c23.y + c22y2),\n            2 * c10.x * c12.x * c12.y * c23.y + 2 * c10.y * c12.x * c12.y * c23.x + c11.x * c11.y * c12.x * c23.y +\n                c11.x * c11.y * c12.y * c23.x - 2 * c20.x * c12.x * c12.y * c23.y - 2 * c12.x * c20.y * c12.y * c23.x -\n                2 * c12.x * c21.x * c12.y * c22.y - 2 * c12.x * c12.y * c21.y * c22.x - 2 * c10.x * c12y2 * c23.x -\n                2 * c10.y * c12x2 * c23.y + 2 * c20.x * c12y2 * c23.x + 2 * c21.x * c12y2 * c22.x -\n                c11y2 * c12.x * c23.x - c11x2 * c12.y * c23.y + c12x2 * (2 * c20.y * c23.y + 2 * c21.y * c22.y),\n            2 * c10.x * c12.x * c12.y * c22.y + 2 * c10.y * c12.x * c12.y * c22.x + c11.x * c11.y * c12.x * c22.y +\n                c11.x * c11.y * c12.y * c22.x - 2 * c20.x * c12.x * c12.y * c22.y - 2 * c12.x * c20.y * c12.y * c22.x -\n                2 * c12.x * c21.x * c12.y * c21.y - 2 * c10.x * c12y2 * c22.x - 2 * c10.y * c12x2 * c22.y +\n                2 * c20.x * c12y2 * c22.x - c11y2 * c12.x * c22.x - c11x2 * c12.y * c22.y + c21x2 * c12y2 +\n                c12x2 * (2 * c20.y * c22.y + c21y2),\n            2 * c10.x * c12.x * c12.y * c21.y + 2 * c10.y * c12.x * c21.x * c12.y + c11.x * c11.y * c12.x * c21.y +\n                c11.x * c11.y * c21.x * c12.y - 2 * c20.x * c12.x * c12.y * c21.y - 2 * c12.x * c20.y * c21.x * c12.y -\n                2 * c10.x * c21.x * c12y2 - 2 * c10.y * c12x2 * c21.y + 2 * c20.x * c21.x * c12y2 -\n                c11y2 * c12.x * c21.x - c11x2 * c12.y * c21.y + 2 * c12x2 * c20.y * c21.y,\n            -2 * c10.x * c10.y * c12.x * c12.y - c10.x * c11.x * c11.y * c12.y - c10.y * c11.x * c11.y * c12.x +\n                2 * c10.x * c12.x * c20.y * c12.y + 2 * c10.y * c20.x * c12.x * c12.y + c11.x * c20.x * c11.y * c12.y +\n                c11.x * c11.y * c12.x * c20.y - 2 * c20.x * c12.x * c20.y * c12.y - 2 * c10.x * c20.x * c12y2 +\n                c10.x * c11y2 * c12.x + c10.y * c11x2 * c12.y - 2 * c10.y * c12x2 * c20.y -\n                c20.x * c11y2 * c12.x - c11x2 * c20.y * c12.y + c10x2 * c12y2 + c10y2 * c12x2 +\n                c20x2 * c12y2 + c12x2 * c20y2\n        );\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const s of roots) {\n            const xRoots = new Polynomial(\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s * c21.x - s * s * c22.x - s * s * s * c23.x\n            ).getRoots();\n            const yRoots = new Polynomial(\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s * c21.y - s * s * c22.y - s * s * s * c23.y\n            ).getRoots();\n\n            if (xRoots.length > 0 && yRoots.length > 0) {\n                const TOLERANCE = 1e-4;\n\n                checkRoots:\n                for (const xRoot of xRoots) {\n                    if (0 <= xRoot && xRoot <= 1) {\n                        for (let k = 0; k < yRoots.length; k++) {\n                            if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                                result.points.push(\n                                    c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)))\n                                );\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Circle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Circle(p1, p2, p3, c, r) {\n        return Intersection.intersectBezier2Ellipse(p1, p2, p3, c, r, r);\n    }\n\n    /**\n     *  intersectBezier2Ellipse\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Ellipse(p1, p2, p3, ec, rx, ry) {\n        let a; // temporary variables\n        // c2, c1, c0; // coefficients of quadratic\n        const result = new Intersection(\"No Intersection\");\n\n        a = p2.multiply(-2);\n        const c2 = p1.add(a.add(p3));\n\n        a = p1.multiply(-2);\n        const b = p2.multiply(2);\n        const c1 = a.add(b);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        const rxrx = rx * rx;\n        const ryry = ry * ry;\n        const roots = new Polynomial(\n            ryry * c2.x * c2.x + rxrx * c2.y * c2.y,\n            2 * (ryry * c2.x * c1.x + rxrx * c2.y * c1.y),\n            ryry * (2 * c2.x * c0.x + c1.x * c1.x) + rxrx * (2 * c2.y * c0.y + c1.y * c1.y) -\n                2 * (ryry * ec.x * c2.x + rxrx * ec.y * c2.y),\n            2 * (ryry * c1.x * (c0.x - ec.x) + rxrx * c1.y * (c0.y - ec.y)),\n            ryry * (c0.x * c0.x + ec.x * ec.x) + rxrx * (c0.y * c0.y + ec.y * ec.y) -\n                2 * (ryry * ec.x * c0.x + rxrx * ec.y * c0.y) - rxrx * ryry\n        ).getRoots();\n\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                result.points.push(c2.multiply(t * t).add(c1.multiply(t).add(c0)));\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Line\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Line(p1, p2, p3, a1, a2) {\n        let a; // temporary variables\n        // let c2, c1, c0; // coefficients of quadratic\n        // cl; // c coefficient for normal form of line\n        // n; // normal for normal form of line\n        const min = a1.min(a2); // used to determine if point is on line segment\n        const max = a1.max(a2); // used to determine if point is on line segment\n        const result = new Intersection(\"No Intersection\");\n\n        a = p2.multiply(-2);\n        const c2 = p1.add(a.add(p3));\n\n        a = p1.multiply(-2);\n        const b = p2.multiply(2);\n        const c1 = a.add(b);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        // Convert line to normal form: ax + by + c = 0\n        // Find normal to line: negative inverse of original line's slope\n        const n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n        // Determine new c coefficient\n        const cl = a1.x * a2.y - a2.x * a1.y;\n\n        // Transform cubic coefficients to line's coordinate system and find roots\n        // of cubic\n        const roots = new Polynomial(\n            n.dot(c2),\n            n.dot(c1),\n            n.dot(c0) + cl\n        ).getRoots();\n\n        // Any roots in closed interval [0,1] are intersections on Bezier, but\n        // might not be on the line segment.\n        // Find intersections and calculate point coordinates\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                // We're within the Bezier curve\n                // Find point on Bezier\n                const p4 = p1.lerp(p2, t);\n                const p5 = p2.lerp(p3, t);\n\n                const p6 = p4.lerp(p5, t);\n\n                // See if point is on line segment\n                // Had to make special cases for vertical and horizontal lines due\n                // to slight errors in calculation of p6\n                if (a1.x === a2.x) {\n                    if (min.y <= p6.y && p6.y <= max.y) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p6);\n                    }\n                }\n                else if (a1.y === a2.y) {\n                    if (min.x <= p6.x && p6.x <= max.x) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p6);\n                    }\n                }\n                else if (min.x <= p6.x && p6.x <= max.x && min.y <= p6.y && p6.y <= max.y) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p6);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Polygon\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Polygon(p1, p2, p3, points) {\n        return Intersection.intersectBezier2Polyline(p1, p2, p3, closePolygon(points));\n    }\n\n    /**\n     *  intersectBezier2Polyline\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Polyline(p1, p2, p3, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n            const inter = Intersection.intersectBezier2Line(p1, p2, p3, a1, a2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Rectangle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Rectangle(p1, p2, p3, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectBezier2Line(p1, p2, p3, min, topRight);\n        const inter2 = Intersection.intersectBezier2Line(p1, p2, p3, topRight, max);\n        const inter3 = Intersection.intersectBezier2Line(p1, p2, p3, max, bottomLeft);\n        const inter4 = Intersection.intersectBezier2Line(p1, p2, p3, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Bezier3\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} a4\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @param {module:kld-intersections.Point2D} b4\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Bezier3(a1, a2, a3, a4, b1, b2, b3, b4) {\n        let a, b, c, d; // temporary variables\n        // c13, c12, c11, c10; // coefficients of cubic\n        // c23, c22, c21, c20; // coefficients of cubic\n        const result = new Intersection(\"No Intersection\");\n\n        // Calculate the coefficients of cubic polynomial\n        a = a1.multiply(-1);\n        b = a2.multiply(3);\n        c = a3.multiply(-3);\n        d = a.add(b.add(c.add(a4)));\n        const c13 = new Point2D(d.x, d.y);\n\n        a = a1.multiply(3);\n        b = a2.multiply(-6);\n        c = a3.multiply(3);\n        d = a.add(b.add(c));\n        const c12 = new Point2D(d.x, d.y);\n\n        a = a1.multiply(-3);\n        b = a2.multiply(3);\n        c = a.add(b);\n        const c11 = new Point2D(c.x, c.y);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b1.multiply(-1);\n        b = b2.multiply(3);\n        c = b3.multiply(-3);\n        d = a.add(b.add(c.add(b4)));\n        const c23 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(3);\n        b = b2.multiply(-6);\n        c = b3.multiply(3);\n        d = a.add(b.add(c));\n        const c22 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(-3);\n        b = b2.multiply(3);\n        c = a.add(b);\n        const c21 = new Point2D(c.x, c.y);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        // bezout\n        a = c13.x * c12.y - c12.x * c13.y;\n        b = c13.x * c11.y - c11.x * c13.y;\n        const c0 = c13.x * c10.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const c1 = c21.x * c13.y - c13.x * c21.y;\n        const c2 = c22.x * c13.y - c13.x * c22.y;\n        const c3 = c23.x * c13.y - c13.x * c23.y;\n        d = c13.x * c11.y - c11.x * c13.y;\n        const e0 = c13.x * c10.y + c12.x * c11.y - c11.x * c12.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const e1 = c21.x * c13.y - c13.x * c21.y;\n        const e2 = c22.x * c13.y - c13.x * c22.y;\n        const e3 = c23.x * c13.y - c13.x * c23.y;\n        const f0 = c12.x * c10.y - c10.x * c12.y + c20.x * c12.y - c12.x * c20.y;\n        const f1 = c21.x * c12.y - c12.x * c21.y;\n        const f2 = c22.x * c12.y - c12.x * c22.y;\n        const f3 = c23.x * c12.y - c12.x * c23.y;\n        const g0 = c13.x * c10.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const g1 = c21.x * c13.y - c13.x * c21.y;\n        const g2 = c22.x * c13.y - c13.x * c22.y;\n        const g3 = c23.x * c13.y - c13.x * c23.y;\n        const h0 = c12.x * c10.y - c10.x * c12.y + c20.x * c12.y - c12.x * c20.y;\n        const h1 = c21.x * c12.y - c12.x * c21.y;\n        const h2 = c22.x * c12.y - c12.x * c22.y;\n        const h3 = c23.x * c12.y - c12.x * c23.y;\n        const i0 = c11.x * c10.y - c10.x * c11.y + c20.x * c11.y - c11.x * c20.y;\n        const i1 = c21.x * c11.y - c11.x * c21.y;\n        const i2 = c22.x * c11.y - c11.x * c22.y;\n        const i3 = c23.x * c11.y - c11.x * c23.y;\n\n        // determinant\n        const poly = new Polynomial(\n            -c3 * e3 * g3,\n            -c3 * e3 * g2 - c3 * e2 * g3 - c2 * e3 * g3,\n            -c3 * e3 * g1 - c3 * e2 * g2 - c2 * e3 * g2 - c3 * e1 * g3 - c2 * e2 * g3 - c1 * e3 * g3,\n            -c3 * e3 * g0 - c3 * e2 * g1 - c2 * e3 * g1 - c3 * e1 * g2 - c2 * e2 * g2 - c1 * e3 * g2 - c3 * e0 * g3 - c2 * e1 * g3 - c1 * e2 * g3 - c0 * e3 * g3 + b * f3 * g3 + c3 * d * h3 - a * f3 * h3 + a * e3 * i3,\n            -c3 * e2 * g0 - c2 * e3 * g0 - c3 * e1 * g1 - c2 * e2 * g1 - c1 * e3 * g1 - c3 * e0 * g2 - c2 * e1 * g2 - c1 * e2 * g2 - c0 * e3 * g2 + b * f3 * g2 - c2 * e0 * g3 - c1 * e1 * g3 - c0 * e2 * g3 + b * f2 * g3 + c3 * d * h2 - a * f3 * h2 + c2 * d * h3 - a * f2 * h3 + a * e3 * i2 + a * e2 * i3,\n            -c3 * e1 * g0 - c2 * e2 * g0 - c1 * e3 * g0 - c3 * e0 * g1 - c2 * e1 * g1 - c1 * e2 * g1 - c0 * e3 * g1 + b * f3 * g1 - c2 * e0 * g2 - c1 * e1 * g2 - c0 * e2 * g2 + b * f2 * g2 - c1 * e0 * g3 - c0 * e1 * g3 + b * f1 * g3 + c3 * d * h1 - a * f3 * h1 + c2 * d * h2 - a * f2 * h2 + c1 * d * h3 - a * f1 * h3 + a * e3 * i1 + a * e2 * i2 + a * e1 * i3,\n            -c3 * e0 * g0 - c2 * e1 * g0 - c1 * e2 * g0 - c0 * e3 * g0 + b * f3 * g0 - c2 * e0 * g1 - c1 * e1 * g1 - c0 * e2 * g1 + b * f2 * g1 - c1 * e0 * g2 - c0 * e1 * g2 + b * f1 * g2 - c0 * e0 * g3 + b * f0 * g3 + c3 * d * h0 - a * f3 * h0 + c2 * d * h1 - a * f2 * h1 + c1 * d * h2 - a * f1 * h2 + c0 * d * h3 - a * f0 * h3 + a * e3 * i0 + a * e2 * i1 + a * e1 * i2 - b * d * i3 + a * e0 * i3,\n            -c2 * e0 * g0 - c1 * e1 * g0 - c0 * e2 * g0 + b * f2 * g0 - c1 * e0 * g1 - c0 * e1 * g1 + b * f1 * g1 - c0 * e0 * g2 + b * f0 * g2 + c2 * d * h0 - a * f2 * h0 + c1 * d * h1 - a * f1 * h1 + c0 * d * h2 - a * f0 * h2 + a * e2 * i0 + a * e1 * i1 - b * d * i2 + a * e0 * i2,\n            -c1 * e0 * g0 - c0 * e1 * g0 + b * f1 * g0 - c0 * e0 * g1 + b * f0 * g1 + c1 * d * h0 - a * f1 * h0 + c0 * d * h1 - a * f0 * h1 + a * e1 * i0 - b * d * i1 + a * e0 * i1,\n            -c0 * e0 * g0 + b * f0 * g0 + c0 * d * h0 - a * f0 * h0 - b * d * i0 + a * e0 * i0\n        );\n        poly.simplifyEquals();\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const s of roots) {\n            const xp = new Polynomial(\n                c13.x,\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s * c21.x - s * s * c22.x - s * s * s * c23.x\n            );\n            xp.simplifyEquals();\n            const xRoots = xp.getRoots();\n            const yp = new Polynomial(\n                c13.y,\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s * c21.y - s * s * c22.y - s * s * s * c23.y\n            );\n            yp.simplifyEquals();\n            const yRoots = yp.getRoots();\n\n            if (xRoots.length > 0 && yRoots.length > 0) {\n                const TOLERANCE = 1e-4;\n\n                checkRoots:\n                for (const xRoot of xRoots) {\n                    if (0 <= xRoot && xRoot <= 1) {\n                        for (let k = 0; k < yRoots.length; k++) {\n                            if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                                result.points.push(\n                                    c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)))\n                                );\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Circle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Circle(p1, p2, p3, p4, c, r) {\n        return Intersection.intersectBezier3Ellipse(p1, p2, p3, p4, c, r, r);\n    }\n\n    /**\n     *  intersectBezier3Ellipse\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Ellipse(p1, p2, p3, p4, ec, rx, ry) {\n        let a, b, c, d; // temporary variables\n        // c3, c2, c1, c0; // coefficients of cubic\n        const result = new Intersection(\"No Intersection\");\n\n        // Calculate the coefficients of cubic polynomial\n        a = p1.multiply(-1);\n        b = p2.multiply(3);\n        c = p3.multiply(-3);\n        d = a.add(b.add(c.add(p4)));\n        const c3 = new Point2D(d.x, d.y);\n\n        a = p1.multiply(3);\n        b = p2.multiply(-6);\n        c = p3.multiply(3);\n        d = a.add(b.add(c));\n        const c2 = new Point2D(d.x, d.y);\n\n        a = p1.multiply(-3);\n        b = p2.multiply(3);\n        c = a.add(b);\n        const c1 = new Point2D(c.x, c.y);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        const rxrx = rx * rx;\n        const ryry = ry * ry;\n        const poly = new Polynomial(\n            c3.x * c3.x * ryry + c3.y * c3.y * rxrx,\n            2 * (c3.x * c2.x * ryry + c3.y * c2.y * rxrx),\n            2 * (c3.x * c1.x * ryry + c3.y * c1.y * rxrx) + c2.x * c2.x * ryry + c2.y * c2.y * rxrx,\n            2 * c3.x * ryry * (c0.x - ec.x) + 2 * c3.y * rxrx * (c0.y - ec.y) +\n                2 * (c2.x * c1.x * ryry + c2.y * c1.y * rxrx),\n            2 * c2.x * ryry * (c0.x - ec.x) + 2 * c2.y * rxrx * (c0.y - ec.y) +\n                c1.x * c1.x * ryry + c1.y * c1.y * rxrx,\n            2 * c1.x * ryry * (c0.x - ec.x) + 2 * c1.y * rxrx * (c0.y - ec.y),\n            c0.x * c0.x * ryry - 2 * c0.y * ec.y * rxrx - 2 * c0.x * ec.x * ryry +\n                c0.y * c0.y * rxrx + ec.x * ec.x * ryry + ec.y * ec.y * rxrx - rxrx * ryry\n        );\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const t of roots) {\n            result.points.push(\n                c3.multiply(t * t * t).add(c2.multiply(t * t).add(c1.multiply(t).add(c0)))\n            );\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Line\n     *\n     *  Many thanks to Dan Sunday at SoftSurfer.com.  He gave me a very thorough\n     *  sketch of the algorithm used here.  Without his help, I'm not sure when I\n     *  would have figured out this intersection problem.\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Line(p1, p2, p3, p4, a1, a2) {\n        let a, b, c, d; // temporary variables\n        // c3, c2, c1, c0; // coefficients of cubic\n        // cl; // c coefficient for normal form of line\n        // n; // normal for normal form of line\n        const min = a1.min(a2); // used to determine if point is on line segment\n        const max = a1.max(a2); // used to determine if point is on line segment\n        const result = new Intersection(\"No Intersection\");\n\n        // Start with Bezier using Bernstein polynomials for weighting functions:\n        //     (1-t^3)P1 + 3t(1-t)^2P2 + 3t^2(1-t)P3 + t^3P4\n        //\n        // Expand and collect terms to form linear combinations of original Bezier\n        // controls.  This ends up with a vector cubic in t:\n        //     (-P1+3P2-3P3+P4)t^3 + (3P1-6P2+3P3)t^2 + (-3P1+3P2)t + P1\n        //             /\\                  /\\                /\\       /\\\n        //             ||                  ||                ||       ||\n        //             c3                  c2                c1       c0\n\n        // Calculate the coefficients\n        a = p1.multiply(-1);\n        b = p2.multiply(3);\n        c = p3.multiply(-3);\n        d = a.add(b.add(c.add(p4)));\n        const c3 = new Vector2D(d.x, d.y);\n\n        a = p1.multiply(3);\n        b = p2.multiply(-6);\n        c = p3.multiply(3);\n        d = a.add(b.add(c));\n        const c2 = new Vector2D(d.x, d.y);\n\n        a = p1.multiply(-3);\n        b = p2.multiply(3);\n        c = a.add(b);\n        const c1 = new Vector2D(c.x, c.y);\n\n        const c0 = new Vector2D(p1.x, p1.y);\n\n        // Convert line to normal form: ax + by + c = 0\n        // Find normal to line: negative inverse of original line's slope\n        const n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n        // Determine new c coefficient\n        const cl = a1.x * a2.y - a2.x * a1.y;\n\n        // ?Rotate each cubic coefficient using line for new coordinate system?\n        // Find roots of rotated cubic\n        const roots = new Polynomial(\n            n.dot(c3),\n            n.dot(c2),\n            n.dot(c1),\n            n.dot(c0) + cl\n        ).getRoots();\n\n        // Any roots in closed interval [0,1] are intersections on Bezier, but\n        // might not be on the line segment.\n        // Find intersections and calculate point coordinates\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                // We're within the Bezier curve\n                // Find point on Bezier\n                const p5 = p1.lerp(p2, t);\n                const p6 = p2.lerp(p3, t);\n                const p7 = p3.lerp(p4, t);\n\n                const p8 = p5.lerp(p6, t);\n                const p9 = p6.lerp(p7, t);\n\n                const p10 = p8.lerp(p9, t);\n\n                // See if point is on line segment\n                // Had to make special cases for vertical and horizontal lines due\n                // to slight errors in calculation of p10\n                if (a1.x === a2.x) {\n                    if (min.y <= p10.y && p10.y <= max.y) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p10);\n                    }\n                }\n                else if (a1.y === a2.y) {\n                    if (min.x <= p10.x && p10.x <= max.x) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p10);\n                    }\n                }\n                else if (min.x <= p10.x && p10.x <= max.x && min.y <= p10.y && p10.y <= max.y) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p10);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Polygon\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Polygon(p1, p2, p3, p4, points) {\n        return Intersection.intersectBezier3Polyline(p1, p2, p3, p4, closePolygon(points));\n    }\n\n    /**\n     *  intersectBezier3Polyline\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Polyline(p1, p2, p3, p4, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n            const inter = Intersection.intersectBezier3Line(p1, p2, p3, p4, a1, a2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Rectangle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Rectangle(p1, p2, p3, p4, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectBezier3Line(p1, p2, p3, p4, min, topRight);\n        const inter2 = Intersection.intersectBezier3Line(p1, p2, p3, p4, topRight, max);\n        const inter3 = Intersection.intersectBezier3Line(p1, p2, p3, p4, max, bottomLeft);\n        const inter4 = Intersection.intersectBezier3Line(p1, p2, p3, p4, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleCircle\n     *\n     *  @param {module:kld-intersections.Point2D} c1\n     *  @param {number} r1\n     *  @param {module:kld-intersections.Point2D} c2\n     *  @param {number} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleCircle(c1, r1, c2, r2) {\n        let result;\n\n        // Determine minimum and maximum radii where circles can intersect\n        const r_max = r1 + r2;\n        const r_min = Math.abs(r1 - r2);\n\n        // Determine actual distance between circle circles\n        const c_dist = c1.distanceFrom(c2);\n\n        if (c_dist > r_max) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (c_dist < r_min) {\n            result = new Intersection(\"Inside\");\n        }\n        else {\n            result = new Intersection(\"Intersection\");\n\n            const a = (r1 * r1 - r2 * r2 + c_dist * c_dist) / (2 * c_dist);\n            const h = Math.sqrt(r1 * r1 - a * a);\n            const p = c1.lerp(c2, a / c_dist);\n            const b = h / c_dist;\n\n            result.points.push(\n                new Point2D(\n                    p.x - b * (c2.y - c1.y),\n                    p.y + b * (c2.x - c1.x)\n                )\n            );\n            result.points.push(\n                new Point2D(\n                    p.x + b * (c2.y - c1.y),\n                    p.y - b * (c2.x - c1.x)\n                )\n            );\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleEllipse\n     *\n     *  @param {module:kld-intersections.Point2D} cc\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleEllipse(cc, r, ec, rx, ry) {\n        return Intersection.intersectEllipseEllipse(cc, r, r, ec, rx, ry);\n    }\n\n    /**\n     *  intersectCircleLine\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleLine(c, r, a1, a2) {\n        let result;\n        const a = (a2.x - a1.x) * (a2.x - a1.x) +\n                 (a2.y - a1.y) * (a2.y - a1.y);\n        const b = 2 * ((a2.x - a1.x) * (a1.x - c.x) +\n                       (a2.y - a1.y) * (a1.y - c.y));\n        const cc = c.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y -\n                 2 * (c.x * a1.x + c.y * a1.y) - r * r;\n        const deter = b * b - 4 * a * cc;\n\n        if (deter < 0) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (deter === 0) {\n            result = new Intersection(\"Tangent\");\n            // NOTE: should calculate this point\n        }\n        else {\n            const e = Math.sqrt(deter);\n            const u1 = (-b + e) / (2 * a);\n            const u2 = (-b - e) / (2 * a);\n\n            if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {\n                if ((u1 < 0 && u2 < 0) || (u1 > 1 && u2 > 1)) {\n                    result = new Intersection(\"Outside\");\n                }\n                else {\n                    result = new Intersection(\"Inside\");\n                }\n            }\n            else {\n                result = new Intersection(\"Intersection\");\n\n                if (0 <= u1 && u1 <= 1) {\n                    result.points.push(a1.lerp(a2, u1));\n                }\n\n                if (0 <= u2 && u2 <= 1) {\n                    result.points.push(a1.lerp(a2, u2));\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCirclePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCirclePolygon(c, r, points) {\n        return Intersection.intersectCirclePolyline(c, r, closePolygon(points));\n    }\n\n    /**\n     *  intersectCirclePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCirclePolyline(c, r, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n        let inter;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n\n            inter = Intersection.intersectCircleLine(c, r, a1, a2);\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        else {\n            result.status = inter.status;\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleRectangle(c, r, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectCircleLine(c, r, min, topRight);\n        const inter2 = Intersection.intersectCircleLine(c, r, topRight, max);\n        const inter3 = Intersection.intersectCircleLine(c, r, max, bottomLeft);\n        const inter4 = Intersection.intersectCircleLine(c, r, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        else {\n            result.status = inter1.status;\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseEllipse\n     *\n     *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n     *  code along with many other excellent examples are avaiable at his site:\n     *  http://www.magic-software.com\n     *\n     *  NOTE: Rotation will need to be added to this function\n     *\n     *  @param {module:kld-intersections.Point2D} c1\n     *  @param {number} rx1\n     *  @param {number} ry1\n     *  @param {module:kld-intersections.Point2D} c2\n     *  @param {number} rx2\n     *  @param {number} ry2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseEllipse(c1, rx1, ry1, c2, rx2, ry2) {\n        const a = [\n            ry1 * ry1, 0, rx1 * rx1, -2 * ry1 * ry1 * c1.x, -2 * rx1 * rx1 * c1.y,\n            ry1 * ry1 * c1.x * c1.x + rx1 * rx1 * c1.y * c1.y - rx1 * rx1 * ry1 * ry1\n        ];\n        const b = [\n            ry2 * ry2, 0, rx2 * rx2, -2 * ry2 * ry2 * c2.x, -2 * rx2 * rx2 * c2.y,\n            ry2 * ry2 * c2.x * c2.x + rx2 * rx2 * c2.y * c2.y - rx2 * rx2 * ry2 * ry2\n        ];\n\n        const yPoly = bezout(a, b);\n        const yRoots = yPoly.getRoots();\n        const epsilon = 1e-3;\n        const norm0 = (a[0] * a[0] + 2 * a[1] * a[1] + a[2] * a[2]) * epsilon;\n        const norm1 = (b[0] * b[0] + 2 * b[1] * b[1] + b[2] * b[2]) * epsilon;\n        const result = new Intersection(\"No Intersection\");\n\n        for (let y = 0; y < yRoots.length; y++) {\n            const xPoly = new Polynomial(\n                a[0],\n                a[3] + yRoots[y] * a[1],\n                a[5] + yRoots[y] * (a[4] + yRoots[y] * a[2])\n            );\n            const xRoots = xPoly.getRoots();\n\n            for (let x = 0; x < xRoots.length; x++) {\n                let tst =\n                    (a[0] * xRoots[x] + a[1] * yRoots[y] + a[3]) * xRoots[x] +\n                    (a[2] * yRoots[y] + a[4]) * yRoots[y] + a[5];\n                if (Math.abs(tst) < norm0) {\n                    tst =\n                        (b[0] * xRoots[x] + b[1] * yRoots[y] + b[3]) * xRoots[x] +\n                        (b[2] * yRoots[y] + b[4]) * yRoots[y] + b[5];\n                    if (Math.abs(tst) < norm1) {\n                        result.appendPoint(new Point2D(xRoots[x], yRoots[y]));\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseLine\n     *\n     *  NOTE: Rotation will need to be added to this function\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseLine(c, rx, ry, a1, a2) {\n        let result;\n        const orign = new Vector2D(a1.x, a1.y);\n        const dir = Vector2D.fromPoints(a1, a2);\n        const center = new Vector2D(c.x, c.y);\n        const diff = orign.subtract(center);\n        const mDir = new Vector2D(dir.x / (rx * rx), dir.y / (ry * ry));\n        const mDiff = new Vector2D(diff.x / (rx * rx), diff.y / (ry * ry));\n\n        const a = dir.dot(mDir);\n        const b = dir.dot(mDiff);\n        c = diff.dot(mDiff) - 1.0;\n        const d = b * b - a * c;\n\n        if (d < 0) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (d > 0) {\n            const root = Math.sqrt(d); // eslint-disable-line no-shadow\n            const t_a = (-b - root) / a;\n            const t_b = (-b + root) / a;\n\n            if ((t_a < 0 || 1 < t_a) && (t_b < 0 || 1 < t_b)) {\n                if ((t_a < 0 && t_b < 0) || (t_a > 1 && t_b > 1)) {\n                    result = new Intersection(\"Outside\");\n                }\n                else {\n                    result = new Intersection(\"Inside\");\n                }\n            }\n            else {\n                result = new Intersection(\"Intersection\");\n                if (0 <= t_a && t_a <= 1) {\n                    result.appendPoint(a1.lerp(a2, t_a));\n                }\n                if (0 <= t_b && t_b <= 1) {\n                    result.appendPoint(a1.lerp(a2, t_b));\n                }\n            }\n        }\n        else {\n            const t = -b / a;\n\n            if (0 <= t && t <= 1) {\n                result = new Intersection(\"Intersection\");\n                result.appendPoint(a1.lerp(a2, t));\n            }\n            else {\n                result = new Intersection(\"Outside\");\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipsePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipsePolygon(c, rx, ry, points) {\n        return Intersection.intersectEllipsePolyline(c, rx, ry, closePolygon(points));\n    }\n\n    /**\n     *  intersectEllipsePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipsePolyline(c, rx, ry, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const b1 = points[i];\n            const b2 = points[i + 1];\n            const inter = Intersection.intersectEllipseLine(c, rx, ry, b1, b2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseRectangle(c, rx, ry, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectEllipseLine(c, rx, ry, min, topRight);\n        const inter2 = Intersection.intersectEllipseLine(c, rx, ry, topRight, max);\n        const inter3 = Intersection.intersectEllipseLine(c, rx, ry, max, bottomLeft);\n        const inter4 = Intersection.intersectEllipseLine(c, rx, ry, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLineLine\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLineLine(a1, a2, b1, b2) {\n        let result;\n\n        const ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n        const ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n        const u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if (u_b !== 0) {\n            const ua = ua_t / u_b;\n            const ub = ub_t / u_b;\n\n            if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n                result = new Intersection(\"Intersection\");\n                result.points.push(\n                    new Point2D(\n                        a1.x + ua * (a2.x - a1.x),\n                        a1.y + ua * (a2.y - a1.y)\n                    )\n                );\n            }\n            else {\n                result = new Intersection(\"No Intersection\");\n            }\n        }\n        else if (ua_t === 0 || ub_t === 0) {\n            result = new Intersection(\"Coincident\");\n        }\n        else {\n            result = new Intersection(\"Parallel\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLinePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLinePolygon(a1, a2, points) {\n        return Intersection.intersectLinePolyline(a1, a2, closePolygon(points));\n    }\n\n    /**\n     *  intersectLinePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLinePolyline(a1, a2, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const b1 = points[i];\n            const b2 = points[i + 1];\n            const inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLineRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLineRectangle(a1, a2, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLineLine(min, topRight, a1, a2);\n        const inter2 = Intersection.intersectLineLine(topRight, max, a1, a2);\n        const inter3 = Intersection.intersectLineLine(max, bottomLeft, a1, a2);\n        const inter4 = Intersection.intersectLineLine(bottomLeft, min, a1, a2);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPolygonPolygon\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonPolygon(points1, points2) {\n        return Intersection.intersectPolylinePolyline(closePolygon(points1), closePolygon(points2));\n    }\n\n    /**\n     *  intersectPolygonPolyline\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonPolyline(points1, points2) {\n        return Intersection.intersectPolylinePolyline(closePolygon(points1), points2);\n    }\n\n    /**\n     *  intersectPolygonRectangle\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonRectangle(points, r1, r2) {\n        return Intersection.intersectPolylineRectangle(closePolygon(points), r1, r2);\n    }\n\n    /**\n     *  intersectPolylinePolyline\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolylinePolyline(points1, points2) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points1;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points1[i];\n            const a2 = points1[i + 1];\n            const inter = Intersection.intersectLinePolyline(a1, a2, points2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPolylineRectangle\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolylineRectangle(points, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLinePolyline(min, topRight, points);\n        const inter2 = Intersection.intersectLinePolyline(topRight, max, points);\n        const inter3 = Intersection.intersectLinePolyline(max, bottomLeft, points);\n        const inter4 = Intersection.intersectLinePolyline(bottomLeft, min, points);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectRectangleRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectRectangleRectangle(a1, a2, b1, b2) {\n        const min = a1.min(a2);\n        const max = a1.max(a2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLineRectangle(min, topRight, b1, b2);\n        const inter2 = Intersection.intersectLineRectangle(topRight, max, b1, b2);\n        const inter3 = Intersection.intersectLineRectangle(max, bottomLeft, b1, b2);\n        const inter4 = Intersection.intersectLineRectangle(bottomLeft, min, b1, b2);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectRayRay\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectRayRay(a1, a2, b1, b2) {\n        let result;\n\n        const ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n        const ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n        const u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if (u_b !== 0) {\n            const ua = ua_t / u_b;\n\n            result = new Intersection(\"Intersection\");\n            result.points.push(\n                new Point2D(\n                    a1.x + ua * (a2.x - a1.x),\n                    a1.y + ua * (a2.y - a1.y)\n                )\n            );\n        }\n        else if (ua_t === 0 || ub_t === 0) {\n            result = new Intersection(\"Coincident\");\n        }\n        else {\n            result = new Intersection(\"Parallel\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  appendPoint\n     *\n     *  @param {module:kld-intersections.Point2D} point\n     */\n    appendPoint(point) {\n        this.points.push(point);\n    }\n\n\n    /**\n     *  appendPoints\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     */\n    appendPoints(points) {\n        this.points = this.points.concat(points);\n    }\n}\n\nexport default Intersection;\n"],"names":[],"mappings":"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AAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxE,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxE,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxE,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAA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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2268, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/kld-intersections/lib/Shapes.js"],"sourcesContent":["/* eslint-disable prefer-rest-params */\n/**\n *  Shapes\n *\n *   @copyright 2017, Kevin Lindsey\n *   @module Shapes\n *   @deprecated use ShapeInfo\n */\n\nimport ShapeInfo from \"./ShapeInfo.js\";\n\n/**\n * Build shapes for intersection\n */\nclass Shapes {\n    /**\n     *  arc\n     *\n     *  @deprecated use ShapeInfo.arc\n     *  @param {number} centerX\n     *  @param {number} centerY\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @param {number} startRadians\n     *  @param {number} endRadians\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static arc(centerX, centerY, radiusX, radiusY, startRadians, endRadians) {\n        return ShapeInfo.arc(...arguments);\n    }\n\n    /**\n     *  quadraticBezier\n     *\n     *  @deprecated use ShapeInfo.quadraticBezier\n     *  @param {number} p1x\n     *  @param {number} p1y\n     *  @param {number} p2x\n     *  @param {number} p2y\n     *  @param {number} p3x\n     *  @param {number} p3y\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static quadraticBezier(p1x, p1y, p2x, p2y, p3x, p3y) {\n        return ShapeInfo.quadraticBezier(...arguments);\n    }\n\n    /**\n     *  cubicBezier\n     *\n     *  @deprecated use ShapeInfo.cubicBezier\n     *  @param {number} p1x\n     *  @param {number} p1y\n     *  @param {number} p2x\n     *  @param {number} p2y\n     *  @param {number} p3x\n     *  @param {number} p3y\n     *  @param {number} p4x\n     *  @param {number} p4y\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static cubicBezier(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n        return ShapeInfo.cubicBezier(...arguments);\n    }\n\n    /**\n     *  circle\n     *\n     *  @deprecated use ShapeInfo.circle\n     *  @param {number} centerX\n     *  @param {number} centerY\n     *  @param {number} radius\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static circle(centerX, centerY, radius) {\n        return ShapeInfo.circle(...arguments);\n    }\n\n    /**\n     *  ellipse\n     *\n     *  @deprecated use ShapeInfo.ellipse\n     *  @param {number} centerX\n     *  @param {number} centerY\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static ellipse(centerX, centerY, radiusX, radiusY) {\n        return ShapeInfo.ellipse(...arguments);\n    }\n\n    /**\n     *  line\n     *\n     *  @deprecated use ShapeInfo.line\n     *  @param {number} p1x\n     *  @param {number} p1y\n     *  @param {number} p2x\n     *  @param {number} p2y\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static line(p1x, p1y, p2x, p2y) {\n        return ShapeInfo.line(...arguments);\n    }\n\n    /**\n     *  path\n     *\n     *  @deprecated use ShapeInfo.path\n     *  @param {string} pathData\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static path(pathData) {\n        return ShapeInfo.path(...arguments);\n    }\n\n    /**\n     *  polygon\n     *\n     *  @deprecated use ShapeInfo.polygon\n     *  @param {Array<number>} coords\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polygon(coords) {\n        return ShapeInfo.polygon(...arguments);\n    }\n\n    /**\n     *  polyline\n     *\n     *  @deprecated use ShapeInfo.polyline\n     *  @param {Array<number>} coords\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polyline(coords) {\n        return ShapeInfo.polyline(...arguments);\n    }\n\n    /**\n     *  rectangle\n     *\n     *  @deprecated use ShapeInfo.rectangle\n     *  @param {number} x\n     *  @param {number} y\n     *  @param {number} width\n     *  @param {number} height\n     *  @param {number} [rx]\n     *  @param {number} [ry]\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static rectangle(x, y, width, height, rx = 0, ry = 0) {\n        return ShapeInfo.rectangle(...arguments);\n    }\n}\n\nexport default Shapes;\n"],"names":[],"mappings":"AAAA,qCAAqC,GACrC;;;;;;CAMC;;;AAED;;AAEA;;CAEC,GACD,MAAM;IACF;;;;;;;;;;;KAWC,GACD,OAAO,IAAI,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE;QACrE,OAAO,wJAAA,CAAA,UAAS,CAAC,GAAG,IAAI;IAC5B;IAEA;;;;;;;;;;;KAWC,GACD,OAAO,gBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;QACjD,OAAO,wJAAA,CAAA,UAAS,CAAC,eAAe,IAAI;IACxC;IAEA;;;;;;;;;;;;;KAaC,GACD,OAAO,YAAY,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;QACvD,OAAO,wJAAA,CAAA,UAAS,CAAC,WAAW,IAAI;IACpC;IAEA;;;;;;;;KAQC,GACD,OAAO,OAAO,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE;QACpC,OAAO,wJAAA,CAAA,UAAS,CAAC,MAAM,IAAI;IAC/B;IAEA;;;;;;;;;KASC,GACD,OAAO,QAAQ,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE;QAC/C,OAAO,wJAAA,CAAA,UAAS,CAAC,OAAO,IAAI;IAChC;IAEA;;;;;;;;;KASC,GACD,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;QAC5B,OAAO,wJAAA,CAAA,UAAS,CAAC,IAAI,IAAI;IAC7B;IAEA;;;;;;KAMC,GACD,OAAO,KAAK,QAAQ,EAAE;QAClB,OAAO,wJAAA,CAAA,UAAS,CAAC,IAAI,IAAI;IAC7B;IAEA;;;;;;KAMC,GACD,OAAO,QAAQ,MAAM,EAAE;QACnB,OAAO,wJAAA,CAAA,UAAS,CAAC,OAAO,IAAI;IAChC;IAEA;;;;;;KAMC,GACD,OAAO,SAAS,MAAM,EAAE;QACpB,OAAO,wJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI;IACjC;IAEA;;;;;;;;;;;KAWC,GACD,OAAO,UAAU,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE;QAClD,OAAO,wJAAA,CAAA,UAAS,CAAC,SAAS,IAAI;IAClC;AACJ;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2410, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/kld-intersections/lib/AffineShapes.js"],"sourcesContent":["/* eslint-disable prefer-rest-params */\n/**\n *   AffineShapes\n *\n *   @copyright 2017-2019, Kevin Lindsey\n *   @module AffineShapes\n *   @deprecated use ShapeInfo\n */\n\nimport ShapeInfo from \"./ShapeInfo.js\";\n\n/**\n * Build shapes for intersection\n */\nclass AffineShapes {\n    /**\n     *  arc\n     *\n     *  @deprecated use ShapeInfo.arc\n     *  @param {module:kld-intersections.Point2D} center\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @param {number} startRadians\n     *  @param {number} endRadians\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static arc(center, radiusX, radiusY, startRadians, endRadians) {\n        return ShapeInfo.arc(...arguments);\n    }\n\n    /**\n     *  quadraticBezier\n     *\n     *   @deprecated use ShapeInfo.quadraticBezier\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static quadraticBezier(p1, p2, p3) {\n        return ShapeInfo.quadraticBezier(...arguments);\n    }\n\n    /**\n     *  cubicBezier\n     *\n     *  @deprecated use ShapeInfo.cubicBezier\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static cubicBezier(p1, p2, p3, p4) {\n        return ShapeInfo.cubicBezier(...arguments);\n    }\n\n    /**\n     *  circle\n     *\n     *  @deprecated use ShapeInfo.circle\n     *  @param {module:kld-intersections.Point2D} center\n     *  @param {number} radius\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static circle(center, radius) {\n        return ShapeInfo.circle(...arguments);\n    }\n\n    /**\n     *  ellipse\n     *\n     *  @deprecated use ShapeInfo.ellipse\n     *  @param {module:kld-intersections.Point2D} center\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static ellipse(center, radiusX, radiusY) {\n        return ShapeInfo.ellipse(...arguments);\n    }\n\n    /**\n     *  line\n     *\n     *  @deprecated use ShapeInfo.line\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static line(p1, p2) {\n        return ShapeInfo.line(...arguments);\n    }\n\n    /**\n     *  path\n     *\n     *  @deprecated use ShapeInfo.path\n     *  @param {string} pathData\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static path(pathData) {\n        return ShapeInfo.path(...arguments);\n    }\n\n    /**\n     *  polygon\n     *\n     *  @deprecated use ShapeInfo.polygon\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polygon(points) {\n        return ShapeInfo.polygon(...arguments);\n    }\n\n    /**\n     *  polyline\n     *\n     *  @deprecated use ShapeInfo.polyline\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polyline(points) {\n        return ShapeInfo.polyline(...arguments);\n    }\n\n    /**\n     *  rectangle\n     *\n     *  @deprecated use ShapeInfo.rectangle\n     *  @param {module:kld-intersections.Point2D} topLeft\n     *  @param {module:kld-intersections.Vector2D} size\n     *  @param {number} [rx]\n     *  @param {number} [ry]\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static rectangle(topLeft, size, rx = 0, ry = 0) {\n        return ShapeInfo.rectangle(...arguments);\n    }\n}\n\nexport default AffineShapes;\n"],"names":[],"mappings":"AAAA,qCAAqC,GACrC;;;;;;CAMC;;;AAED;;AAEA;;CAEC,GACD,MAAM;IACF;;;;;;;;;;KAUC,GACD,OAAO,IAAI,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE;QAC3D,OAAO,wJAAA,CAAA,UAAS,CAAC,GAAG,IAAI;IAC5B;IAEA;;;;;;;;KAQC,GACD,OAAO,gBAAgB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;QAC/B,OAAO,wJAAA,CAAA,UAAS,CAAC,eAAe,IAAI;IACxC;IAEA;;;;;;;;;KASC,GACD,OAAO,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;QAC/B,OAAO,wJAAA,CAAA,UAAS,CAAC,WAAW,IAAI;IACpC;IAEA;;;;;;;KAOC,GACD,OAAO,OAAO,MAAM,EAAE,MAAM,EAAE;QAC1B,OAAO,wJAAA,CAAA,UAAS,CAAC,MAAM,IAAI;IAC/B;IAEA;;;;;;;;KAQC,GACD,OAAO,QAAQ,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE;QACrC,OAAO,wJAAA,CAAA,UAAS,CAAC,OAAO,IAAI;IAChC;IAEA;;;;;;;KAOC,GACD,OAAO,KAAK,EAAE,EAAE,EAAE,EAAE;QAChB,OAAO,wJAAA,CAAA,UAAS,CAAC,IAAI,IAAI;IAC7B;IAEA;;;;;;KAMC,GACD,OAAO,KAAK,QAAQ,EAAE;QAClB,OAAO,wJAAA,CAAA,UAAS,CAAC,IAAI,IAAI;IAC7B;IAEA;;;;;;KAMC,GACD,OAAO,QAAQ,MAAM,EAAE;QACnB,OAAO,wJAAA,CAAA,UAAS,CAAC,OAAO,IAAI;IAChC;IAEA;;;;;;KAMC,GACD,OAAO,SAAS,MAAM,EAAE;QACpB,OAAO,wJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI;IACjC;IAEA;;;;;;;;;KASC,GACD,OAAO,UAAU,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE;QAC5C,OAAO,wJAAA,CAAA,UAAS,CAAC,SAAS,IAAI;IAClC;AACJ;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2538, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/kld-intersections/lib/SvgShapes.js"],"sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport {Point2D} from \"kld-affine\";\nimport ShapeInfo from \"./ShapeInfo.js\";\n\nclass SvgShapes {\n    /**\n     * circle\n     *\n     * @param {SVGCircleElement} circle\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static circle(circle) {\n        if (circle instanceof SVGCircleElement === false) {\n            throw new TypeError(`Expected SVGCircleElement, but found ${circle}`);\n        }\n\n        const center = new Point2D(\n            circle.cx.baseVal.value,\n            circle.cy.baseVal.value\n        );\n        const radius = circle.r.baseVal.value;\n\n        return ShapeInfo.circle(center, radius);\n    }\n\n    /**\n     * ellipse\n     *\n     * @param {SVGEllipseElement} ellipse\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static ellipse(ellipse) {\n        if (ellipse instanceof SVGEllipseElement === false) {\n            throw new TypeError(`Expected SVGEllipseElement, but found ${ellipse}`);\n        }\n\n        const center = new Point2D(\n            ellipse.cx.baseVal.value,\n            ellipse.cy.baseVal.value\n        );\n        const radiusX = ellipse.rx.baseVal.value;\n        const radiusY = ellipse.ry.baseVal.value;\n\n        return ShapeInfo.ellipse(center, radiusX, radiusY);\n    }\n\n    /**\n     * line\n     *\n     * @param {SVGLineElement} line\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static line(line) {\n        if (line instanceof SVGLineElement === false) {\n            throw new TypeError(`Expected SVGLineElement, but found ${line}`);\n        }\n\n        const p1 = new Point2D(\n            line.x1.baseVal.value,\n            line.y1.baseVal.value\n        );\n        const p2 = new Point2D(\n            line.x2.baseVal.value,\n            line.y2.baseVal.value\n        );\n\n        return ShapeInfo.line(p1, p2);\n    }\n\n    /**\n     * path\n     *\n     * @param {SVGPathElement} path\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static path(path) {\n        if (path instanceof SVGPathElement === false) {\n            throw new TypeError(`Expected SVGPathElement, but found ${path}`);\n        }\n\n        const pathData = path.getAttributeNS(null, \"d\");\n\n        return ShapeInfo.path(pathData);\n    }\n\n    /**\n     * polygon\n     *\n     * @param {SVGPolygonElement} polygon\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polygon(polygon) {\n        if (polygon instanceof SVGPolygonElement === false) {\n            throw new TypeError(`Expected SVGPolygonElement, but found ${polygon}`);\n        }\n\n        const points = [];\n\n        for (let i = 0; i < polygon.points.numberOfItems; i++) {\n            const point = polygon.points.getItem(i);\n\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        return ShapeInfo.polygon(points);\n    }\n\n    /**\n     * polyline\n     *\n     * @param {SVGPolylineElement} polyline\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polyline(polyline) {\n        if (polyline instanceof SVGPolylineElement === false) {\n            throw new TypeError(`Expected SVGPolylineElement, but found ${polyline}`);\n        }\n\n        const points = [];\n\n        for (let i = 0; i < polyline.points.numberOfItems; i++) {\n            const point = polyline.points.getItem(i);\n\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        return ShapeInfo.polyline(points);\n    }\n\n    /**\n     * rect\n     *\n     * @param {SVGRectElement} rect\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static rect(rect) {\n        if (rect instanceof SVGRectElement === false) {\n            throw new TypeError(`Expected SVGRectElement, but found ${rect}`);\n        }\n\n        return ShapeInfo.rectangle(\n            rect.x.baseVal.value,\n            rect.y.baseVal.value,\n            rect.width.baseVal.value,\n            rect.height.baseVal.value,\n            rect.rx.baseVal.value,\n            rect.ry.baseVal.value\n        );\n    }\n\n    /**\n     * element\n     *\n     * @param {SVGElement} element\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static element(element) {\n        if (element instanceof SVGElement === false) {\n            throw new TypeError(`Expected SVGElement, but found ${element}`);\n        }\n\n        /* eslint-disable-next-line prefer-destructuring */\n        const tagName = element.tagName;\n\n        switch (tagName) {\n            case \"circle\":\n                return SvgShapes.circle(element);\n            case \"ellipse\":\n                return SvgShapes.ellipse(element);\n            case \"line\":\n                return SvgShapes.line(element);\n            case \"path\":\n                return SvgShapes.path(element);\n            case \"polygon\":\n                return SvgShapes.polygon(element);\n            case \"polyline\":\n                return SvgShapes.polyline(element);\n            case \"rect\":\n                return SvgShapes.rect(element);\n            default:\n                throw new TypeError(`Unrecognized element type: '${tagName}'`);\n        }\n    }\n}\n\nexport default SvgShapes;\n"],"names":[],"mappings":"AAAA,uCAAuC;;;AACvC;AAAA;AACA;;;AAEA,MAAM;IACF;;;;;KAKC,GACD,OAAO,OAAO,MAAM,EAAE;QAClB,IAAI,kBAAkB,qBAAqB,OAAO;YAC9C,MAAM,IAAI,UAAU,CAAC,qCAAqC,EAAE,QAAQ;QACxE;QAEA,MAAM,SAAS,IAAI,qLAAA,CAAA,UAAO,CACtB,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,EACvB,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK;QAE3B,MAAM,SAAS,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK;QAErC,OAAO,wJAAA,CAAA,UAAS,CAAC,MAAM,CAAC,QAAQ;IACpC;IAEA;;;;;KAKC,GACD,OAAO,QAAQ,OAAO,EAAE;QACpB,IAAI,mBAAmB,sBAAsB,OAAO;YAChD,MAAM,IAAI,UAAU,CAAC,sCAAsC,EAAE,SAAS;QAC1E;QAEA,MAAM,SAAS,IAAI,qLAAA,CAAA,UAAO,CACtB,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,EACxB,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK;QAE5B,MAAM,UAAU,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK;QACxC,MAAM,UAAU,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK;QAExC,OAAO,wJAAA,CAAA,UAAS,CAAC,OAAO,CAAC,QAAQ,SAAS;IAC9C;IAEA;;;;;KAKC,GACD,OAAO,KAAK,IAAI,EAAE;QACd,IAAI,gBAAgB,mBAAmB,OAAO;YAC1C,MAAM,IAAI,UAAU,CAAC,mCAAmC,EAAE,MAAM;QACpE;QAEA,MAAM,KAAK,IAAI,qLAAA,CAAA,UAAO,CAClB,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,EACrB,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK;QAEzB,MAAM,KAAK,IAAI,qLAAA,CAAA,UAAO,CAClB,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,EACrB,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK;QAGzB,OAAO,wJAAA,CAAA,UAAS,CAAC,IAAI,CAAC,IAAI;IAC9B;IAEA;;;;;KAKC,GACD,OAAO,KAAK,IAAI,EAAE;QACd,IAAI,gBAAgB,mBAAmB,OAAO;YAC1C,MAAM,IAAI,UAAU,CAAC,mCAAmC,EAAE,MAAM;QACpE;QAEA,MAAM,WAAW,KAAK,cAAc,CAAC,MAAM;QAE3C,OAAO,wJAAA,CAAA,UAAS,CAAC,IAAI,CAAC;IAC1B;IAEA;;;;;KAKC,GACD,OAAO,QAAQ,OAAO,EAAE;QACpB,IAAI,mBAAmB,sBAAsB,OAAO;YAChD,MAAM,IAAI,UAAU,CAAC,sCAAsC,EAAE,SAAS;QAC1E;QAEA,MAAM,SAAS,EAAE;QAEjB,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,CAAC,aAAa,EAAE,IAAK;YACnD,MAAM,QAAQ,QAAQ,MAAM,CAAC,OAAO,CAAC;YAErC,OAAO,IAAI,CAAC,IAAI,qLAAA,CAAA,UAAO,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC;QAC5C;QAEA,OAAO,wJAAA,CAAA,UAAS,CAAC,OAAO,CAAC;IAC7B;IAEA;;;;;KAKC,GACD,OAAO,SAAS,QAAQ,EAAE;QACtB,IAAI,oBAAoB,uBAAuB,OAAO;YAClD,MAAM,IAAI,UAAU,CAAC,uCAAuC,EAAE,UAAU;QAC5E;QAEA,MAAM,SAAS,EAAE;QAEjB,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,CAAC,aAAa,EAAE,IAAK;YACpD,MAAM,QAAQ,SAAS,MAAM,CAAC,OAAO,CAAC;YAEtC,OAAO,IAAI,CAAC,IAAI,qLAAA,CAAA,UAAO,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC;QAC5C;QAEA,OAAO,wJAAA,CAAA,UAAS,CAAC,QAAQ,CAAC;IAC9B;IAEA;;;;;KAKC,GACD,OAAO,KAAK,IAAI,EAAE;QACd,IAAI,gBAAgB,mBAAmB,OAAO;YAC1C,MAAM,IAAI,UAAU,CAAC,mCAAmC,EAAE,MAAM;QACpE;QAEA,OAAO,wJAAA,CAAA,UAAS,CAAC,SAAS,CACtB,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EACpB,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EACpB,KAAK,KAAK,CAAC,OAAO,CAAC,KAAK,EACxB,KAAK,MAAM,CAAC,OAAO,CAAC,KAAK,EACzB,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,EACrB,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK;IAE7B;IAEA;;;;;KAKC,GACD,OAAO,QAAQ,OAAO,EAAE;QACpB,IAAI,mBAAmB,eAAe,OAAO;YACzC,MAAM,IAAI,UAAU,CAAC,+BAA+B,EAAE,SAAS;QACnE;QAEA,iDAAiD,GACjD,MAAM,UAAU,QAAQ,OAAO;QAE/B,OAAQ;YACJ,KAAK;gBACD,OAAO,UAAU,MAAM,CAAC;YAC5B,KAAK;gBACD,OAAO,UAAU,OAAO,CAAC;YAC7B,KAAK;gBACD,OAAO,UAAU,IAAI,CAAC;YAC1B,KAAK;gBACD,OAAO,UAAU,IAAI,CAAC;YAC1B,KAAK;gBACD,OAAO,UAAU,OAAO,CAAC;YAC7B,KAAK;gBACD,OAAO,UAAU,QAAQ,CAAC;YAC9B,KAAK;gBACD,OAAO,UAAU,IAAI,CAAC;YAC1B;gBACI,MAAM,IAAI,UAAU,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;QACrE;IACJ;AACJ;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2679, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/kld-intersections/lib/IntersectionQuery.js"],"sourcesContent":["/**\n *\n *  IntersectionQuery.js\n *\n *  @copyright 2017 Kevin Lindsey\n * @module IntersectionQuery\n */\n\nimport {Vector2D} from \"kld-affine\";\n\n/**\n * @namespace\n */\nconst IntersectionQuery = {};\n\n\n/**\n *  pointInCircle\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} center\n *  @param {number} radius\n *  @returns {boolean}\n */\nIntersectionQuery.pointInCircle = function(point, center, radius) {\n    const v = Vector2D.fromPoints(center, point);\n\n    return v.length() <= radius;\n};\n\n\n/**\n *  pointInEllipse\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} center\n *  @param {number} radiusX\n *  @param {number} radiusY\n *  @returns {boolean}\n */\nIntersectionQuery.pointInEllipse = function(point, center, radiusX, radiusY) {\n    const len = point.subtract(center);\n\n    return (len.x * len.x) / (radiusX * radiusX) + (len.y * len.y) / (radiusY * radiusY) <= 1;\n};\n\n\n/**\n *  pointInPolyline\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {Array<module:kld-intersections.Point2D>} points\n */\nIntersectionQuery.pointInPolyline = function(point, points) {\n    const {length: len} = points;\n    let counter = 0;\n    let xInter;\n\n    let p1 = points[0];\n\n    for (let i = 1; i <= len; i++) {\n        const p2 = points[i % len];\n        const minY = Math.min(p1.y, p2.y);\n        const maxY = Math.max(p1.y, p2.y);\n        const maxX = Math.max(p1.x, p2.x);\n\n        if (p1.y !== p2.y && minY < point.y && point.y <= maxY && point.x <= maxX) {\n            xInter = (point.y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y) + p1.x;\n\n            if (p1.x === p2.x || point.x <= xInter) {\n                counter++;\n            }\n        }\n\n        p1 = p2;\n    }\n\n    return (counter % 2 === 1);\n};\n\n\n/**\n *  pointInPolyline\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {Array<module:kld-intersections.Point2D>} points\n */\nIntersectionQuery.pointInPolygon = IntersectionQuery.pointInPolyline;\n\n\n/**\n *  pointInRectangle\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} topLeft\n *  @param {module:kld-intersections.Point2D} bottomRight\n *  @returns {boolean}\n */\nIntersectionQuery.pointInRectangle = function(point, topLeft, bottomRight) {\n    return (\n        topLeft.x <= point.x && point.x < bottomRight.x &&\n        topLeft.y <= point.y && point.y < bottomRight.y\n    );\n};\n\n\nexport default IntersectionQuery;\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;AAED;AAAA;;AAEA;;CAEC,GACD,MAAM,oBAAoB,CAAC;AAG3B;;;;;;;CAOC,GACD,kBAAkB,aAAa,GAAG,SAAS,KAAK,EAAE,MAAM,EAAE,MAAM;IAC5D,MAAM,IAAI,uLAAA,CAAA,WAAQ,CAAC,UAAU,CAAC,QAAQ;IAEtC,OAAO,EAAE,MAAM,MAAM;AACzB;AAGA;;;;;;;;CAQC,GACD,kBAAkB,cAAc,GAAG,SAAS,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO;IACvE,MAAM,MAAM,MAAM,QAAQ,CAAC;IAE3B,OAAO,AAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAI,CAAC,UAAU,OAAO,IAAI,AAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAI,CAAC,UAAU,OAAO,KAAK;AAC5F;AAGA;;;;;CAKC,GACD,kBAAkB,eAAe,GAAG,SAAS,KAAK,EAAE,MAAM;IACtD,MAAM,EAAC,QAAQ,GAAG,EAAC,GAAG;IACtB,IAAI,UAAU;IACd,IAAI;IAEJ,IAAI,KAAK,MAAM,CAAC,EAAE;IAElB,IAAK,IAAI,IAAI,GAAG,KAAK,KAAK,IAAK;QAC3B,MAAM,KAAK,MAAM,CAAC,IAAI,IAAI;QAC1B,MAAM,OAAO,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;QAChC,MAAM,OAAO,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;QAChC,MAAM,OAAO,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;QAEhC,IAAI,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,OAAO,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,QAAQ,MAAM,CAAC,IAAI,MAAM;YACvE,SAAS,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC;YAEhE,IAAI,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,QAAQ;gBACpC;YACJ;QACJ;QAEA,KAAK;IACT;IAEA,OAAQ,UAAU,MAAM;AAC5B;AAGA;;;;;CAKC,GACD,kBAAkB,cAAc,GAAG,kBAAkB,eAAe;AAGpE;;;;;;;CAOC,GACD,kBAAkB,gBAAgB,GAAG,SAAS,KAAK,EAAE,OAAO,EAAE,WAAW;IACrE,OACI,QAAQ,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,GAAG,YAAY,CAAC,IAC/C,QAAQ,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,GAAG,YAAY,CAAC;AAEvD;uCAGe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2765, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/kld-intersections/index.js"],"sourcesContent":["/**\n * @module kld-intersections\n */\n\nexport {default as Intersection} from \"./lib/Intersection.js\";\n\n/**\n * @deprecated Use ShapeInfo instead\n */\nexport {default as IntersectionArgs} from \"./lib/ShapeInfo.js\";\n\n/**\n * @namespace ShapeInfo\n * @implements {module:Shapes~ShapeInfo}\n */\nexport {default as ShapeInfo} from \"./lib/ShapeInfo.js\";\n\n/**\n * @namespace Shapes\n * @implements {module:Shapes~Shapes}\n */\nexport {default as Shapes} from \"./lib/Shapes.js\";\n\n/**\n * @namespace AffineShapes\n * @implements {module:AffineShapes~AffineShapes}\n */\nexport {default as AffineShapes} from \"./lib/AffineShapes.js\";\n\n/**\n * @namespace SvgShapes\n * @implements {module:SvgShapes~SvgShapes}\n */\nexport {default as SvgShapes} from \"./lib/SvgShapes.js\";\n\n/**\n * @namespace IntersectionQuery\n * @implements {module:IntersectionQuery~IntersectionQuery}\n */\nexport {default as IntersectionQuery} from \"./lib/IntersectionQuery.js\";\n\n// Expose affine module classes\n\n/**\n* @external Point2D\n*/\n\n/**\n* @external Vector2D\n*/\n\n/**\n* @external Matrix2D\n*/\n\n/**\n * @class Point2D\n * @memberof module:kld-intersections\n * @implements {external:Point2D}\n */\nexport {Point2D} from \"kld-affine\";\n\n/**\n * @class Vector2D\n * @memberof module:kld-intersections\n * @implements {external:Vector2D}\n */\nexport {Vector2D} from \"kld-affine\";\n\n/**\n * @class Matrix2D\n * @memberof module:kld-intersections\n * @implements {external:Matrix2D}\n */\nexport {Matrix2D} from \"kld-affine\";\n\n\n/**\n* @external Polynomial\n*/\n"],"names":[],"mappings":"AAAA;;CAEC;AAED;AAEA;;CAEC,GACD;AAQA;;;CAGC,GACD;AAEA;;;CAGC,GACD;AAEA;;;CAGC,GACD;AAEA;;;CAGC,GACD;AAEA,+BAA+B;AAE/B;;AAEA,GAEA;;AAEA,GAEA;;AAEA,GAEA;;;;CAIC,GACD;;;;;;;;;;;CAiBA;;AAEA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2812, "column": 3}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}