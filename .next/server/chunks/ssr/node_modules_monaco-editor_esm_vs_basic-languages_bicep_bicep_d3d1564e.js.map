{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/bicep/bicep.ts\nvar bounded = (text) => `\\\\b${text}\\\\b`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar keywords = [\n  \"targetScope\",\n  \"resource\",\n  \"module\",\n  \"param\",\n  \"var\",\n  \"output\",\n  \"for\",\n  \"in\",\n  \"if\",\n  \"existing\"\n];\nvar namedLiterals = [\"true\", \"false\", \"null\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\" },\n    { open: \"'''\", close: \"'''\" }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: \"'''\", close: \"'''\", notIn: [\"string\", \"comment\"] }\n  ],\n  autoCloseBefore: \":.,=}])' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".bicep\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  tokenizer: {\n    root: [{ include: \"@expression\" }, { include: \"@whitespace\" }],\n    stringVerbatim: [\n      { regex: `(|'|'')[^']`, action: { token: \"string\" } },\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@pop\" } }\n    ],\n    stringLiteral: [\n      { regex: `\\\\\\${`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `[^\\\\\\\\'$]+`, action: { token: \"string\" } },\n      { regex: \"@escapes\", action: { token: \"string.escape\" } },\n      { regex: `\\\\\\\\.`, action: { token: \"string.escape.invalid\" } },\n      { regex: `'`, action: { token: \"string\", next: \"@pop\" } }\n    ],\n    bracketCounting: [\n      { regex: `{`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `}`, action: { token: \"delimiter.bracket\", next: \"@pop\" } },\n      { include: \"expression\" }\n    ],\n    comment: [\n      { regex: `[^\\\\*]+`, action: { token: \"comment\" } },\n      { regex: `\\\\*\\\\/`, action: { token: \"comment\", next: \"@pop\" } },\n      { regex: `[\\\\/*]`, action: { token: \"comment\" } }\n    ],\n    whitespace: [\n      { regex: nonCommentWs },\n      { regex: `\\\\/\\\\*`, action: { token: \"comment\", next: \"@comment\" } },\n      { regex: `\\\\/\\\\/.*$`, action: { token: \"comment\" } }\n    ],\n    expression: [\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@stringVerbatim\" } },\n      { regex: `'`, action: { token: \"string.quote\", next: \"@stringLiteral\" } },\n      { regex: numericLiteral, action: { token: \"number\" } },\n      {\n        regex: identifier,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@namedLiterals\": { token: \"keyword\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}