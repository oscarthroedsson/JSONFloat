{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/basic-languages/m3/m3.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/m3/m3.ts\nvar conf = {\n  comments: {\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"[\", close: \"]\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"(\", close: \")\" },\n    { open: \"(*\", close: \"*)\" },\n    { open: \"<*\", close: \"*>\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".m3\",\n  brackets: [\n    { token: \"delimiter.curly\", open: \"{\", close: \"}\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\n    { token: \"delimiter.square\", open: \"[\", close: \"]\" }\n  ],\n  keywords: [\n    \"AND\",\n    \"ANY\",\n    \"ARRAY\",\n    \"AS\",\n    \"BEGIN\",\n    \"BITS\",\n    \"BRANDED\",\n    \"BY\",\n    \"CASE\",\n    \"CONST\",\n    \"DIV\",\n    \"DO\",\n    \"ELSE\",\n    \"ELSIF\",\n    \"END\",\n    \"EVAL\",\n    \"EXCEPT\",\n    \"EXCEPTION\",\n    \"EXIT\",\n    \"EXPORTS\",\n    \"FINALLY\",\n    \"FOR\",\n    \"FROM\",\n    \"GENERIC\",\n    \"IF\",\n    \"IMPORT\",\n    \"IN\",\n    \"INTERFACE\",\n    \"LOCK\",\n    \"LOOP\",\n    \"METHODS\",\n    \"MOD\",\n    \"MODULE\",\n    \"NOT\",\n    \"OBJECT\",\n    \"OF\",\n    \"OR\",\n    \"OVERRIDES\",\n    \"PROCEDURE\",\n    \"RAISE\",\n    \"RAISES\",\n    \"READONLY\",\n    \"RECORD\",\n    \"REF\",\n    \"REPEAT\",\n    \"RETURN\",\n    \"REVEAL\",\n    \"SET\",\n    \"THEN\",\n    \"TO\",\n    \"TRY\",\n    \"TYPE\",\n    \"TYPECASE\",\n    \"UNSAFE\",\n    \"UNTIL\",\n    \"UNTRACED\",\n    \"VALUE\",\n    \"VAR\",\n    \"WHILE\",\n    \"WITH\"\n  ],\n  reservedConstNames: [\n    \"ABS\",\n    \"ADR\",\n    \"ADRSIZE\",\n    \"BITSIZE\",\n    \"BYTESIZE\",\n    \"CEILING\",\n    \"DEC\",\n    \"DISPOSE\",\n    \"FALSE\",\n    \"FIRST\",\n    \"FLOAT\",\n    \"FLOOR\",\n    \"INC\",\n    \"ISTYPE\",\n    \"LAST\",\n    \"LOOPHOLE\",\n    \"MAX\",\n    \"MIN\",\n    \"NARROW\",\n    \"NEW\",\n    \"NIL\",\n    \"NUMBER\",\n    \"ORD\",\n    \"ROUND\",\n    \"SUBARRAY\",\n    \"TRUE\",\n    \"TRUNC\",\n    \"TYPECODE\",\n    \"VAL\"\n  ],\n  reservedTypeNames: [\n    \"ADDRESS\",\n    \"ANY\",\n    \"BOOLEAN\",\n    \"CARDINAL\",\n    \"CHAR\",\n    \"EXTENDED\",\n    \"INTEGER\",\n    \"LONGCARD\",\n    \"LONGINT\",\n    \"LONGREAL\",\n    \"MUTEX\",\n    \"NULL\",\n    \"REAL\",\n    \"REFANY\",\n    \"ROOT\",\n    \"TEXT\"\n  ],\n  operators: [\"+\", \"-\", \"*\", \"/\", \"&\", \"^\", \".\"],\n  relations: [\"=\", \"#\", \"<\", \"<=\", \">\", \">=\", \"<:\", \":\"],\n  delimiters: [\"|\", \"..\", \"=>\", \",\", \";\", \":=\"],\n  symbols: /[>=<#.,:;+\\-*/&^]+/,\n  escapes: /\\\\(?:[\\\\fnrt\"']|[0-7]{3})/,\n  tokenizer: {\n    root: [\n      // Identifiers and keywords\n      [/_\\w*/, \"invalid\"],\n      [\n        /[a-zA-Z][a-zA-Z0-9_]*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@reservedConstNames\": { token: \"constant.reserved.$0\" },\n            \"@reservedTypeNames\": { token: \"type.reserved.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // Whitespace\n      { include: \"@whitespace\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      // Integer- and real literals\n      [/[0-9]+\\.[0-9]+(?:[DdEeXx][\\+\\-]?[0-9]+)?/, \"number.float\"],\n      [/[0-9]+(?:\\_[0-9a-fA-F]+)?L?/, \"number\"],\n      // Operators, relations, and delimiters\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"operators\",\n            \"@relations\": \"operators\",\n            \"@delimiters\": \"delimiter\",\n            \"@default\": \"invalid\"\n          }\n        }\n      ],\n      // Character literals\n      [/'[^\\\\']'/, \"string.char\"],\n      [/(')(@escapes)(')/, [\"string.char\", \"string.escape\", \"string.char\"]],\n      [/'/, \"invalid\"],\n      // Text literals\n      [/\"([^\"\\\\]|\\\\.)*$/, \"invalid\"],\n      [/\"/, \"string.text\", \"@text\"]\n    ],\n    text: [\n      [/[^\\\\\"]+/, \"string.text\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"invalid\"],\n      [/\"/, \"string.text\", \"@pop\"]\n    ],\n    comment: [\n      [/\\(\\*/, \"comment\", \"@push\"],\n      [/\\*\\)/, \"comment\", \"@pop\"],\n      [/./, \"comment\"]\n    ],\n    pragma: [\n      [/<\\*/, \"keyword.pragma\", \"@push\"],\n      [/\\*>/, \"keyword.pragma\", \"@pop\"],\n      [/./, \"keyword.pragma\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\(\\*/, \"comment\", \"@comment\"],\n      [/<\\*/, \"keyword.pragma\", \"@pragma\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":[],"mappings":"AAAA;;;;;+EAK+E,GAG/E,+BAA+B;;;;;AAC/B,IAAI,OAAO;IACT,UAAU;QACR,cAAc;YAAC;YAAM;SAAK;IAC5B;IACA,UAAU;QACR;YAAC;YAAK;SAAI;QACV;YAAC;YAAK;SAAI;QACV;YAAC;YAAK;SAAI;KACX;IACD,kBAAkB;QAChB;YAAE,MAAM;YAAK,OAAO;QAAI;QACxB;YAAE,MAAM;YAAK,OAAO;QAAI;QACxB;YAAE,MAAM;YAAK,OAAO;QAAI;QACxB;YAAE,MAAM;YAAM,OAAO;QAAK;QAC1B;YAAE,MAAM;YAAM,OAAO;QAAK;QAC1B;YAAE,MAAM;YAAK,OAAO;YAAK,OAAO;gBAAC;gBAAU;aAAU;QAAC;QACtD;YAAE,MAAM;YAAK,OAAO;YAAK,OAAO;gBAAC;gBAAU;aAAU;QAAC;KACvD;AACH;AACA,IAAI,WAAW;IACb,cAAc;IACd,cAAc;IACd,UAAU;QACR;YAAE,OAAO;YAAmB,MAAM;YAAK,OAAO;QAAI;QAClD;YAAE,OAAO;YAAyB,MAAM;YAAK,OAAO;QAAI;QACxD;YAAE,OAAO;YAAoB,MAAM;YAAK,OAAO;QAAI;KACpD;IACD,UAAU;QACR;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACD,oBAAoB;QAClB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACD,mBAAmB;QACjB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACD,WAAW;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAC9C,WAAW;QAAC;QAAK;QAAK;QAAK;QAAM;QAAK;QAAM;QAAM;KAAI;IACtD,YAAY;QAAC;QAAK;QAAM;QAAM;QAAK;QAAK;KAAK;IAC7C,SAAS;IACT,SAAS;IACT,WAAW;QACT,MAAM;YACJ,2BAA2B;YAC3B;gBAAC;gBAAQ;aAAU;YACnB;gBACE;gBACA;oBACE,OAAO;wBACL,aAAa;4BAAE,OAAO;wBAAa;wBACnC,uBAAuB;4BAAE,OAAO;wBAAuB;wBACvD,sBAAsB;4BAAE,OAAO;wBAAmB;wBAClD,YAAY;oBACd;gBACF;aACD;YACD,aAAa;YACb;gBAAE,SAAS;YAAc;YACzB;gBAAC;gBAAc;aAAY;YAC3B,6BAA6B;YAC7B;gBAAC;gBAA4C;aAAe;YAC5D;gBAAC;gBAA+B;aAAS;YACzC,uCAAuC;YACvC;gBACE;gBACA;oBACE,OAAO;wBACL,cAAc;wBACd,cAAc;wBACd,eAAe;wBACf,YAAY;oBACd;gBACF;aACD;YACD,qBAAqB;YACrB;gBAAC;gBAAY;aAAc;YAC3B;gBAAC;gBAAoB;oBAAC;oBAAe;oBAAiB;iBAAc;aAAC;YACrE;gBAAC;gBAAK;aAAU;YAChB,gBAAgB;YAChB;gBAAC;gBAAmB;aAAU;YAC9B;gBAAC;gBAAK;gBAAe;aAAQ;SAC9B;QACD,MAAM;YACJ;gBAAC;gBAAW;aAAc;YAC1B;gBAAC;gBAAY;aAAgB;YAC7B;gBAAC;gBAAO;aAAU;YAClB;gBAAC;gBAAK;gBAAe;aAAO;SAC7B;QACD,SAAS;YACP;gBAAC;gBAAQ;gBAAW;aAAQ;YAC5B;gBAAC;gBAAQ;gBAAW;aAAO;YAC3B;gBAAC;gBAAK;aAAU;SACjB;QACD,QAAQ;YACN;gBAAC;gBAAO;gBAAkB;aAAQ;YAClC;gBAAC;gBAAO;gBAAkB;aAAO;YACjC;gBAAC;gBAAK;aAAiB;SACxB;QACD,YAAY;YACV;gBAAC;gBAAc;aAAQ;YACvB;gBAAC;gBAAQ;gBAAW;aAAW;YAC/B;gBAAC;gBAAO;gBAAkB;aAAU;SACrC;IACH;AACF","ignoreList":[0],"debugId":null}}]
}