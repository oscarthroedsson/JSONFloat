{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/defaultProviders.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { UriList } from '../../../../base/common/dataTransfer.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { relativePath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DocumentPasteTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { localize } from '../../../../nls.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nclass SimplePasteAndDropProvider {\n    async provideDocumentPasteEdits(_model, _ranges, dataTransfer, context, token) {\n        const edit = await this.getEdit(dataTransfer, token);\n        if (!edit) {\n            return undefined;\n        }\n        return {\n            edits: [{ insertText: edit.insertText, title: edit.title, kind: edit.kind, handledMimeType: edit.handledMimeType, yieldTo: edit.yieldTo }],\n            dispose() { },\n        };\n    }\n    async provideDocumentDropEdits(_model, _position, dataTransfer, token) {\n        const edit = await this.getEdit(dataTransfer, token);\n        if (!edit) {\n            return;\n        }\n        return {\n            edits: [{ insertText: edit.insertText, title: edit.title, kind: edit.kind, handledMimeType: edit.handledMimeType, yieldTo: edit.yieldTo }],\n            dispose() { },\n        };\n    }\n}\nexport class DefaultTextPasteOrDropEditProvider extends SimplePasteAndDropProvider {\n    constructor() {\n        super(...arguments);\n        this.kind = DefaultTextPasteOrDropEditProvider.kind;\n        this.dropMimeTypes = [Mimes.text];\n        this.pasteMimeTypes = [Mimes.text];\n    }\n    static { this.id = 'text'; }\n    static { this.kind = new HierarchicalKind('text.plain'); }\n    async getEdit(dataTransfer, _token) {\n        const textEntry = dataTransfer.get(Mimes.text);\n        if (!textEntry) {\n            return;\n        }\n        // Suppress if there's also a uriList entry.\n        // Typically the uri-list contains the same text as the text entry so showing both is confusing.\n        if (dataTransfer.has(Mimes.uriList)) {\n            return;\n        }\n        const insertText = await textEntry.asString();\n        return {\n            handledMimeType: Mimes.text,\n            title: localize('text.label', \"Insert Plain Text\"),\n            insertText,\n            kind: this.kind,\n        };\n    }\n}\nclass PathProvider extends SimplePasteAndDropProvider {\n    constructor() {\n        super(...arguments);\n        this.kind = new HierarchicalKind('uri.absolute');\n        this.dropMimeTypes = [Mimes.uriList];\n        this.pasteMimeTypes = [Mimes.uriList];\n    }\n    async getEdit(dataTransfer, token) {\n        const entries = await extractUriList(dataTransfer);\n        if (!entries.length || token.isCancellationRequested) {\n            return;\n        }\n        let uriCount = 0;\n        const insertText = entries\n            .map(({ uri, originalText }) => {\n            if (uri.scheme === Schemas.file) {\n                return uri.fsPath;\n            }\n            else {\n                uriCount++;\n                return originalText;\n            }\n        })\n            .join(' ');\n        let label;\n        if (uriCount > 0) {\n            // Dropping at least one generic uri (such as https) so use most generic label\n            label = entries.length > 1\n                ? localize('defaultDropProvider.uriList.uris', \"Insert Uris\")\n                : localize('defaultDropProvider.uriList.uri', \"Insert Uri\");\n        }\n        else {\n            // All the paths are file paths\n            label = entries.length > 1\n                ? localize('defaultDropProvider.uriList.paths', \"Insert Paths\")\n                : localize('defaultDropProvider.uriList.path', \"Insert Path\");\n        }\n        return {\n            handledMimeType: Mimes.uriList,\n            insertText,\n            title: label,\n            kind: this.kind,\n        };\n    }\n}\nlet RelativePathProvider = class RelativePathProvider extends SimplePasteAndDropProvider {\n    constructor(_workspaceContextService) {\n        super();\n        this._workspaceContextService = _workspaceContextService;\n        this.kind = new HierarchicalKind('uri.relative');\n        this.dropMimeTypes = [Mimes.uriList];\n        this.pasteMimeTypes = [Mimes.uriList];\n    }\n    async getEdit(dataTransfer, token) {\n        const entries = await extractUriList(dataTransfer);\n        if (!entries.length || token.isCancellationRequested) {\n            return;\n        }\n        const relativeUris = coalesce(entries.map(({ uri }) => {\n            const root = this._workspaceContextService.getWorkspaceFolder(uri);\n            return root ? relativePath(root.uri, uri) : undefined;\n        }));\n        if (!relativeUris.length) {\n            return;\n        }\n        return {\n            handledMimeType: Mimes.uriList,\n            insertText: relativeUris.join(' '),\n            title: entries.length > 1\n                ? localize('defaultDropProvider.uriList.relativePaths', \"Insert Relative Paths\")\n                : localize('defaultDropProvider.uriList.relativePath', \"Insert Relative Path\"),\n            kind: this.kind,\n        };\n    }\n};\nRelativePathProvider = __decorate([\n    __param(0, IWorkspaceContextService)\n], RelativePathProvider);\nclass PasteHtmlProvider {\n    constructor() {\n        this.kind = new HierarchicalKind('html');\n        this.pasteMimeTypes = ['text/html'];\n        this._yieldTo = [{ mimeType: Mimes.text }];\n    }\n    async provideDocumentPasteEdits(_model, _ranges, dataTransfer, context, token) {\n        if (context.triggerKind !== DocumentPasteTriggerKind.PasteAs && !context.only?.contains(this.kind)) {\n            return;\n        }\n        const entry = dataTransfer.get('text/html');\n        const htmlText = await entry?.asString();\n        if (!htmlText || token.isCancellationRequested) {\n            return;\n        }\n        return {\n            dispose() { },\n            edits: [{\n                    insertText: htmlText,\n                    yieldTo: this._yieldTo,\n                    title: localize('pasteHtmlLabel', 'Insert HTML'),\n                    kind: this.kind,\n                }],\n        };\n    }\n}\nasync function extractUriList(dataTransfer) {\n    const urlListEntry = dataTransfer.get(Mimes.uriList);\n    if (!urlListEntry) {\n        return [];\n    }\n    const strUriList = await urlListEntry.asString();\n    const entries = [];\n    for (const entry of UriList.parse(strUriList)) {\n        try {\n            entries.push({ uri: URI.parse(entry), originalText: entry });\n        }\n        catch {\n            // noop\n        }\n    }\n    return entries;\n}\nlet DefaultDropProvidersFeature = class DefaultDropProvidersFeature extends Disposable {\n    constructor(languageFeaturesService, workspaceContextService) {\n        super();\n        this._register(languageFeaturesService.documentDropEditProvider.register('*', new DefaultTextPasteOrDropEditProvider()));\n        this._register(languageFeaturesService.documentDropEditProvider.register('*', new PathProvider()));\n        this._register(languageFeaturesService.documentDropEditProvider.register('*', new RelativePathProvider(workspaceContextService)));\n    }\n};\nDefaultDropProvidersFeature = __decorate([\n    __param(0, ILanguageFeaturesService),\n    __param(1, IWorkspaceContextService)\n], DefaultDropProvidersFeature);\nexport { DefaultDropProvidersFeature };\nlet DefaultPasteProvidersFeature = class DefaultPasteProvidersFeature extends Disposable {\n    constructor(languageFeaturesService, workspaceContextService) {\n        super();\n        this._register(languageFeaturesService.documentPasteEditProvider.register('*', new DefaultTextPasteOrDropEditProvider()));\n        this._register(languageFeaturesService.documentPasteEditProvider.register('*', new PathProvider()));\n        this._register(languageFeaturesService.documentPasteEditProvider.register('*', new RelativePathProvider(workspaceContextService)));\n        this._register(languageFeaturesService.documentPasteEditProvider.register('*', new PasteHtmlProvider()));\n    }\n};\nDefaultPasteProvidersFeature = __decorate([\n    __param(0, ILanguageFeaturesService),\n    __param(1, IWorkspaceContextService)\n], DefaultPasteProvidersFeature);\nexport { DefaultPasteProvidersFeature };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/edit.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ResourceTextEdit } from '../../../browser/services/bulkEditService.js';\nimport { SnippetParser } from '../../snippet/browser/snippetParser.js';\n/**\n * Given a {@link DropOrPasteEdit} and set of ranges, creates a {@link WorkspaceEdit} that applies the insert text from\n * the {@link DropOrPasteEdit} at each range plus any additional edits.\n */\nexport function createCombinedWorkspaceEdit(uri, ranges, edit) {\n    // If the edit insert text is empty, skip applying at each range\n    if (typeof edit.insertText === 'string' ? edit.insertText === '' : edit.insertText.snippet === '') {\n        return {\n            edits: edit.additionalEdit?.edits ?? []\n        };\n    }\n    return {\n        edits: [\n            ...ranges.map(range => new ResourceTextEdit(uri, { range, text: typeof edit.insertText === 'string' ? SnippetParser.escape(edit.insertText) + '$0' : edit.insertText.snippet, insertAsSnippet: true })),\n            ...(edit.additionalEdit?.edits ?? [])\n        ]\n    };\n}\nexport function sortEditsByYieldTo(edits) {\n    function yieldsTo(yTo, other) {\n        if ('mimeType' in yTo) {\n            return yTo.mimeType === other.handledMimeType;\n        }\n        return !!other.kind && yTo.kind.contains(other.kind);\n    }\n    // Build list of nodes each node yields to\n    const yieldsToMap = new Map();\n    for (const edit of edits) {\n        for (const yTo of edit.yieldTo ?? []) {\n            for (const other of edits) {\n                if (other === edit) {\n                    continue;\n                }\n                if (yieldsTo(yTo, other)) {\n                    let arr = yieldsToMap.get(edit);\n                    if (!arr) {\n                        arr = [];\n                        yieldsToMap.set(edit, arr);\n                    }\n                    arr.push(other);\n                }\n            }\n        }\n    }\n    if (!yieldsToMap.size) {\n        return Array.from(edits);\n    }\n    // Topological sort\n    const visited = new Set();\n    const tempStack = [];\n    function visit(nodes) {\n        if (!nodes.length) {\n            return [];\n        }\n        const node = nodes[0];\n        if (tempStack.includes(node)) {\n            console.warn('Yield to cycle detected', node);\n            return nodes;\n        }\n        if (visited.has(node)) {\n            return visit(nodes.slice(1));\n        }\n        let pre = [];\n        const yTo = yieldsToMap.get(node);\n        if (yTo) {\n            tempStack.push(node);\n            pre = visit(yTo);\n            tempStack.pop();\n        }\n        visited.add(node);\n        return [...pre, node, ...visit(nodes.slice(1))];\n    }\n    return visit(Array.from(edits));\n}\n"],"names":[],"mappings":"AAAA;;;8FAG8F;;;;AAC9F;AACA;;;AAKO,SAAS,4BAA4B,GAAG,EAAE,MAAM,EAAE,IAAI;IACzD,gEAAgE;IAChE,IAAI,OAAO,KAAK,UAAU,KAAK,WAAW,KAAK,UAAU,KAAK,KAAK,KAAK,UAAU,CAAC,OAAO,KAAK,IAAI;QAC/F,OAAO;YACH,OAAO,KAAK,cAAc,EAAE,SAAS,EAAE;QAC3C;IACJ;IACA,OAAO;QACH,OAAO;eACA,OAAO,GAAG,CAAC,CAAA,QAAS,IAAI,iMAAA,CAAA,mBAAgB,CAAC,KAAK;oBAAE;oBAAO,MAAM,OAAO,KAAK,UAAU,KAAK,WAAW,yMAAA,CAAA,gBAAa,CAAC,MAAM,CAAC,KAAK,UAAU,IAAI,OAAO,KAAK,UAAU,CAAC,OAAO;oBAAE,iBAAiB;gBAAK;eAChM,KAAK,cAAc,EAAE,SAAS,EAAE;SACvC;IACL;AACJ;AACO,SAAS,mBAAmB,KAAK;IACpC,SAAS,SAAS,GAAG,EAAE,KAAK;QACxB,IAAI,cAAc,KAAK;YACnB,OAAO,IAAI,QAAQ,KAAK,MAAM,eAAe;QACjD;QACA,OAAO,CAAC,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI;IACvD;IACA,0CAA0C;IAC1C,MAAM,cAAc,IAAI;IACxB,KAAK,MAAM,QAAQ,MAAO;QACtB,KAAK,MAAM,OAAO,KAAK,OAAO,IAAI,EAAE,CAAE;YAClC,KAAK,MAAM,SAAS,MAAO;gBACvB,IAAI,UAAU,MAAM;oBAChB;gBACJ;gBACA,IAAI,SAAS,KAAK,QAAQ;oBACtB,IAAI,MAAM,YAAY,GAAG,CAAC;oBAC1B,IAAI,CAAC,KAAK;wBACN,MAAM,EAAE;wBACR,YAAY,GAAG,CAAC,MAAM;oBAC1B;oBACA,IAAI,IAAI,CAAC;gBACb;YACJ;QACJ;IACJ;IACA,IAAI,CAAC,YAAY,IAAI,EAAE;QACnB,OAAO,MAAM,IAAI,CAAC;IACtB;IACA,mBAAmB;IACnB,MAAM,UAAU,IAAI;IACpB,MAAM,YAAY,EAAE;IACpB,SAAS,MAAM,KAAK;QAChB,IAAI,CAAC,MAAM,MAAM,EAAE;YACf,OAAO,EAAE;QACb;QACA,MAAM,OAAO,KAAK,CAAC,EAAE;QACrB,IAAI,UAAU,QAAQ,CAAC,OAAO;YAC1B,QAAQ,IAAI,CAAC,2BAA2B;YACxC,OAAO;QACX;QACA,IAAI,QAAQ,GAAG,CAAC,OAAO;YACnB,OAAO,MAAM,MAAM,KAAK,CAAC;QAC7B;QACA,IAAI,MAAM,EAAE;QACZ,MAAM,MAAM,YAAY,GAAG,CAAC;QAC5B,IAAI,KAAK;YACL,UAAU,IAAI,CAAC;YACf,MAAM,MAAM;YACZ,UAAU,GAAG;QACjB;QACA,QAAQ,GAAG,CAAC;QACZ,OAAO;eAAI;YAAK;eAAS,MAAM,MAAM,KAAK,CAAC;SAAI;IACnD;IACA,OAAO,MAAM,MAAM,IAAI,CAAC;AAC5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/postEditWidget.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar PostEditWidget_1;\nimport * as dom from '../../../../base/browser/dom.js';\nimport { Button } from '../../../../base/browser/ui/button/button.js';\nimport { toAction } from '../../../../base/common/actions.js';\nimport { toErrorMessage } from '../../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport './postEditWidget.css';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { createCombinedWorkspaceEdit } from './edit.js';\nimport { localize } from '../../../../nls.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nlet PostEditWidget = class PostEditWidget extends Disposable {\n    static { PostEditWidget_1 = this; }\n    static { this.baseId = 'editor.widget.postEditWidget'; }\n    constructor(typeId, editor, visibleContext, showCommand, range, edits, onSelectNewEdit, _contextMenuService, contextKeyService, _keybindingService) {\n        super();\n        this.typeId = typeId;\n        this.editor = editor;\n        this.showCommand = showCommand;\n        this.range = range;\n        this.edits = edits;\n        this.onSelectNewEdit = onSelectNewEdit;\n        this._contextMenuService = _contextMenuService;\n        this._keybindingService = _keybindingService;\n        this.allowEditorOverflow = true;\n        this.suppressMouseDown = true;\n        this.create();\n        this.visibleContext = visibleContext.bindTo(contextKeyService);\n        this.visibleContext.set(true);\n        this._register(toDisposable(() => this.visibleContext.reset()));\n        this.editor.addContentWidget(this);\n        this.editor.layoutContentWidget(this);\n        this._register(toDisposable((() => this.editor.removeContentWidget(this))));\n        this._register(this.editor.onDidChangeCursorPosition(e => {\n            if (!range.containsPosition(e.position)) {\n                this.dispose();\n            }\n        }));\n        this._register(Event.runAndSubscribe(_keybindingService.onDidUpdateKeybindings, () => {\n            this._updateButtonTitle();\n        }));\n    }\n    _updateButtonTitle() {\n        const binding = this._keybindingService.lookupKeybinding(this.showCommand.id)?.getLabel();\n        this.button.element.title = this.showCommand.label + (binding ? ` (${binding})` : '');\n    }\n    create() {\n        this.domNode = dom.$('.post-edit-widget');\n        this.button = this._register(new Button(this.domNode, {\n            supportIcons: true,\n        }));\n        this.button.label = '$(insert)';\n        this._register(dom.addDisposableListener(this.domNode, dom.EventType.CLICK, () => this.showSelector()));\n    }\n    getId() {\n        return PostEditWidget_1.baseId + '.' + this.typeId;\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    getPosition() {\n        return {\n            position: this.range.getEndPosition(),\n            preference: [2 /* ContentWidgetPositionPreference.BELOW */]\n        };\n    }\n    showSelector() {\n        this._contextMenuService.showContextMenu({\n            getAnchor: () => {\n                const pos = dom.getDomNodePagePosition(this.button.element);\n                return { x: pos.left + pos.width, y: pos.top + pos.height };\n            },\n            getActions: () => {\n                return this.edits.allEdits.map((edit, i) => toAction({\n                    id: '',\n                    label: edit.title,\n                    checked: i === this.edits.activeEditIndex,\n                    run: () => {\n                        if (i !== this.edits.activeEditIndex) {\n                            return this.onSelectNewEdit(i);\n                        }\n                    },\n                }));\n            }\n        });\n    }\n};\nPostEditWidget = PostEditWidget_1 = __decorate([\n    __param(7, IContextMenuService),\n    __param(8, IContextKeyService),\n    __param(9, IKeybindingService)\n], PostEditWidget);\nlet PostEditWidgetManager = class PostEditWidgetManager extends Disposable {\n    constructor(_id, _editor, _visibleContext, _showCommand, _instantiationService, _bulkEditService, _notificationService) {\n        super();\n        this._id = _id;\n        this._editor = _editor;\n        this._visibleContext = _visibleContext;\n        this._showCommand = _showCommand;\n        this._instantiationService = _instantiationService;\n        this._bulkEditService = _bulkEditService;\n        this._notificationService = _notificationService;\n        this._currentWidget = this._register(new MutableDisposable());\n        this._register(Event.any(_editor.onDidChangeModel, _editor.onDidChangeModelContent)(() => this.clear()));\n    }\n    async applyEditAndShowIfNeeded(ranges, edits, canShowWidget, resolve, token) {\n        const model = this._editor.getModel();\n        if (!model || !ranges.length) {\n            return;\n        }\n        const edit = edits.allEdits.at(edits.activeEditIndex);\n        if (!edit) {\n            return;\n        }\n        const onDidSelectEdit = async (newEditIndex) => {\n            const model = this._editor.getModel();\n            if (!model) {\n                return;\n            }\n            await model.undo();\n            this.applyEditAndShowIfNeeded(ranges, { activeEditIndex: newEditIndex, allEdits: edits.allEdits }, canShowWidget, resolve, token);\n        };\n        const handleError = (e, message) => {\n            if (isCancellationError(e)) {\n                return;\n            }\n            this._notificationService.error(message);\n            if (canShowWidget) {\n                this.show(ranges[0], edits, onDidSelectEdit);\n            }\n        };\n        let resolvedEdit;\n        try {\n            resolvedEdit = await resolve(edit, token);\n        }\n        catch (e) {\n            return handleError(e, localize('resolveError', \"Error resolving edit '{0}':\\n{1}\", edit.title, toErrorMessage(e)));\n        }\n        if (token.isCancellationRequested) {\n            return;\n        }\n        const combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, ranges, resolvedEdit);\n        // Use a decoration to track edits around the trigger range\n        const primaryRange = ranges[0];\n        const editTrackingDecoration = model.deltaDecorations([], [{\n                range: primaryRange,\n                options: { description: 'paste-line-suffix', stickiness: 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */ }\n            }]);\n        this._editor.focus();\n        let editResult;\n        let editRange;\n        try {\n            editResult = await this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor, token });\n            editRange = model.getDecorationRange(editTrackingDecoration[0]);\n        }\n        catch (e) {\n            return handleError(e, localize('applyError', \"Error applying edit '{0}':\\n{1}\", edit.title, toErrorMessage(e)));\n        }\n        finally {\n            model.deltaDecorations(editTrackingDecoration, []);\n        }\n        if (token.isCancellationRequested) {\n            return;\n        }\n        if (canShowWidget && editResult.isApplied && edits.allEdits.length > 1) {\n            this.show(editRange ?? primaryRange, edits, onDidSelectEdit);\n        }\n    }\n    show(range, edits, onDidSelectEdit) {\n        this.clear();\n        if (this._editor.hasModel()) {\n            this._currentWidget.value = this._instantiationService.createInstance((PostEditWidget), this._id, this._editor, this._visibleContext, this._showCommand, range, edits, onDidSelectEdit);\n        }\n    }\n    clear() {\n        this._currentWidget.clear();\n    }\n    tryShowSelector() {\n        this._currentWidget.value?.showSelector();\n    }\n};\nPostEditWidgetManager = __decorate([\n    __param(4, IInstantiationService),\n    __param(5, IBulkEditService),\n    __param(6, INotificationService)\n], PostEditWidgetManager);\nexport { PostEditWidgetManager };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 631, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar CopyPasteController_1;\nimport { addDisposableListener, getActiveDocument } from '../../../../base/browser/dom.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { createCancelablePromise, DeferredPromise, raceCancellation } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { UriList, createStringDataTransferItem, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ClipboardEventUtils } from '../../../browser/controller/textAreaInput.js';\nimport { toExternalVSDataTransfer, toVSDataTransfer } from '../../../browser/dnd.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { DocumentPasteTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport { createCombinedWorkspaceEdit, sortEditsByYieldTo } from './edit.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nimport { localize } from '../../../../nls.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgressService } from '../../../../platform/progress/common/progress.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nimport { CancellationError, isCancellationError } from '../../../../base/common/errors.js';\nexport const changePasteTypeCommandId = 'editor.changePasteType';\nexport const pasteWidgetVisibleCtx = new RawContextKey('pasteWidgetVisible', false, localize('pasteWidgetVisible', \"Whether the paste widget is showing\"));\nconst vscodeClipboardMime = 'application/vnd.code.copyMetadata';\nlet CopyPasteController = class CopyPasteController extends Disposable {\n    static { CopyPasteController_1 = this; }\n    static { this.ID = 'editor.contrib.copyPasteActionController'; }\n    static get(editor) {\n        return editor.getContribution(CopyPasteController_1.ID);\n    }\n    constructor(editor, instantiationService, _bulkEditService, _clipboardService, _languageFeaturesService, _quickInputService, _progressService) {\n        super();\n        this._bulkEditService = _bulkEditService;\n        this._clipboardService = _clipboardService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._quickInputService = _quickInputService;\n        this._progressService = _progressService;\n        this._editor = editor;\n        const container = editor.getContainerDomNode();\n        this._register(addDisposableListener(container, 'copy', e => this.handleCopy(e)));\n        this._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));\n        this._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));\n        this._pasteProgressManager = this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));\n        this._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, { id: changePasteTypeCommandId, label: localize('postPasteWidgetTitle', \"Show paste options...\") }));\n    }\n    changePasteType() {\n        this._postPasteWidgetManager.tryShowSelector();\n    }\n    pasteAs(preferred) {\n        this._editor.focus();\n        try {\n            this._pasteAsActionContext = { preferred };\n            getActiveDocument().execCommand('paste');\n        }\n        finally {\n            this._pasteAsActionContext = undefined;\n        }\n    }\n    clearWidgets() {\n        this._postPasteWidgetManager.clear();\n    }\n    isPasteAsEnabled() {\n        return this._editor.getOption(85 /* EditorOption.pasteAs */).enabled;\n    }\n    async finishedPaste() {\n        await this._currentPasteOperation;\n    }\n    handleCopy(e) {\n        if (!this._editor.hasTextFocus()) {\n            return;\n        }\n        // Explicitly clear the clipboard internal state.\n        // This is needed because on web, the browser clipboard is faked out using an in-memory store.\n        // This means the resources clipboard is not properly updated when copying from the editor.\n        this._clipboardService.clearInternalState?.();\n        if (!e.clipboardData || !this.isPasteAsEnabled()) {\n            return;\n        }\n        const model = this._editor.getModel();\n        const selections = this._editor.getSelections();\n        if (!model || !selections?.length) {\n            return;\n        }\n        const enableEmptySelectionClipboard = this._editor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n        let ranges = selections;\n        const wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();\n        if (wasFromEmptySelection) {\n            if (!enableEmptySelectionClipboard) {\n                return;\n            }\n            ranges = [new Range(ranges[0].startLineNumber, 1, ranges[0].startLineNumber, 1 + model.getLineLength(ranges[0].startLineNumber))];\n        }\n        const toCopy = this._editor._getViewModel()?.getPlainTextToCopy(selections, enableEmptySelectionClipboard, platform.isWindows);\n        const multicursorText = Array.isArray(toCopy) ? toCopy : null;\n        const defaultPastePayload = {\n            multicursorText,\n            pasteOnNewLine: wasFromEmptySelection,\n            mode: null\n        };\n        const providers = this._languageFeaturesService.documentPasteEditProvider\n            .ordered(model)\n            .filter(x => !!x.prepareDocumentPaste);\n        if (!providers.length) {\n            this.setCopyMetadata(e.clipboardData, { defaultPastePayload });\n            return;\n        }\n        const dataTransfer = toVSDataTransfer(e.clipboardData);\n        const providerCopyMimeTypes = providers.flatMap(x => x.copyMimeTypes ?? []);\n        // Save off a handle pointing to data that VS Code maintains.\n        const handle = generateUuid();\n        this.setCopyMetadata(e.clipboardData, {\n            id: handle,\n            providerCopyMimeTypes,\n            defaultPastePayload\n        });\n        const promise = createCancelablePromise(async (token) => {\n            const results = coalesce(await Promise.all(providers.map(async (provider) => {\n                try {\n                    return await provider.prepareDocumentPaste(model, ranges, dataTransfer, token);\n                }\n                catch (err) {\n                    console.error(err);\n                    return undefined;\n                }\n            })));\n            // Values from higher priority providers should overwrite values from lower priority ones.\n            // Reverse the array to so that the calls to `replace` below will do this\n            results.reverse();\n            for (const result of results) {\n                for (const [mime, value] of result) {\n                    dataTransfer.replace(mime, value);\n                }\n            }\n            return dataTransfer;\n        });\n        CopyPasteController_1._currentCopyOperation?.dataTransferPromise.cancel();\n        CopyPasteController_1._currentCopyOperation = { handle: handle, dataTransferPromise: promise };\n    }\n    async handlePaste(e) {\n        if (!e.clipboardData || !this._editor.hasTextFocus()) {\n            return;\n        }\n        MessageController.get(this._editor)?.closeMessage();\n        this._currentPasteOperation?.cancel();\n        this._currentPasteOperation = undefined;\n        const model = this._editor.getModel();\n        const selections = this._editor.getSelections();\n        if (!selections?.length || !model) {\n            return;\n        }\n        if (this._editor.getOption(92 /* EditorOption.readOnly */) // Never enabled if editor is readonly.\n            || (!this.isPasteAsEnabled() && !this._pasteAsActionContext) // Or feature disabled (but still enable if paste was explicitly requested)\n        ) {\n            return;\n        }\n        const metadata = this.fetchCopyMetadata(e);\n        const dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n        dataTransfer.delete(vscodeClipboardMime);\n        const allPotentialMimeTypes = [\n            ...e.clipboardData.types,\n            ...metadata?.providerCopyMimeTypes ?? [],\n            // TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n            // However we can only check the system clipboard async. For this early check, just add it in.\n            // We filter providers again once we have the final dataTransfer we will use.\n            Mimes.uriList,\n        ];\n        const allProviders = this._languageFeaturesService.documentPasteEditProvider\n            .ordered(model)\n            .filter(provider => {\n            // Filter out providers that don't match the requested paste types\n            const preference = this._pasteAsActionContext?.preferred;\n            if (preference) {\n                if (provider.providedPasteEditKinds && !this.providerMatchesPreference(provider, preference)) {\n                    return false;\n                }\n            }\n            // And providers that don't handle any of mime types in the clipboard\n            return provider.pasteMimeTypes?.some(type => matchesMimeType(type, allPotentialMimeTypes));\n        });\n        if (!allProviders.length) {\n            if (this._pasteAsActionContext?.preferred) {\n                this.showPasteAsNoEditMessage(selections, this._pasteAsActionContext.preferred);\n            }\n            return;\n        }\n        // Prevent the editor's default paste handler from running.\n        // Note that after this point, we are fully responsible for handling paste.\n        // If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        if (this._pasteAsActionContext) {\n            this.showPasteAsPick(this._pasteAsActionContext.preferred, allProviders, selections, dataTransfer, metadata);\n        }\n        else {\n            this.doPasteInline(allProviders, selections, dataTransfer, metadata, e);\n        }\n    }\n    showPasteAsNoEditMessage(selections, preference) {\n        MessageController.get(this._editor)?.showMessage(localize('pasteAsError', \"No paste edits for '{0}' found\", preference instanceof HierarchicalKind ? preference.value : preference.providerId), selections[0].getStartPosition());\n    }\n    doPasteInline(allProviders, selections, dataTransfer, metadata, clipboardEvent) {\n        const editor = this._editor;\n        if (!editor.hasModel()) {\n            return;\n        }\n        const editorStateCts = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined);\n        const p = createCancelablePromise(async (pToken) => {\n            const editor = this._editor;\n            if (!editor.hasModel()) {\n                return;\n            }\n            const model = editor.getModel();\n            const disposables = new DisposableStore();\n            const cts = disposables.add(new CancellationTokenSource(pToken));\n            disposables.add(editorStateCts.token.onCancellationRequested(() => cts.cancel()));\n            const token = cts.token;\n            try {\n                await this.mergeInDataFromCopy(dataTransfer, metadata, token);\n                if (token.isCancellationRequested) {\n                    return;\n                }\n                const supportedProviders = allProviders.filter(provider => this.isSupportedPasteProvider(provider, dataTransfer));\n                if (!supportedProviders.length\n                    || (supportedProviders.length === 1 && supportedProviders[0] instanceof DefaultTextPasteOrDropEditProvider) // Only our default text provider is active\n                ) {\n                    return this.applyDefaultPasteHandler(dataTransfer, metadata, token, clipboardEvent);\n                }\n                const context = {\n                    triggerKind: DocumentPasteTriggerKind.Automatic,\n                };\n                const editSession = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, token);\n                disposables.add(editSession);\n                if (token.isCancellationRequested) {\n                    return;\n                }\n                // If the only edit returned is our default text edit, use the default paste handler\n                if (editSession.edits.length === 1 && editSession.edits[0].provider instanceof DefaultTextPasteOrDropEditProvider) {\n                    return this.applyDefaultPasteHandler(dataTransfer, metadata, token, clipboardEvent);\n                }\n                if (editSession.edits.length) {\n                    const canShowWidget = editor.getOption(85 /* EditorOption.pasteAs */).showPasteSelector === 'afterPaste';\n                    return this._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, { activeEditIndex: 0, allEdits: editSession.edits }, canShowWidget, (edit, token) => {\n                        return new Promise((resolve, reject) => {\n                            (async () => {\n                                try {\n                                    const resolveP = edit.provider.resolveDocumentPasteEdit?.(edit, token);\n                                    const showP = new DeferredPromise();\n                                    const resolved = resolveP && await this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('resolveProcess', \"Resolving paste edit. Click to cancel\"), Promise.race([showP.p, resolveP]), {\n                                        cancel: () => {\n                                            showP.cancel();\n                                            return reject(new CancellationError());\n                                        }\n                                    }, 0);\n                                    if (resolved) {\n                                        edit.additionalEdit = resolved.additionalEdit;\n                                    }\n                                    return resolve(edit);\n                                }\n                                catch (err) {\n                                    return reject(err);\n                                }\n                            })();\n                        });\n                    }, token);\n                }\n                await this.applyDefaultPasteHandler(dataTransfer, metadata, token, clipboardEvent);\n            }\n            finally {\n                disposables.dispose();\n                if (this._currentPasteOperation === p) {\n                    this._currentPasteOperation = undefined;\n                }\n            }\n        });\n        this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', \"Running paste handlers. Click to cancel and do basic paste\"), p, {\n            cancel: async () => {\n                try {\n                    p.cancel();\n                    if (editorStateCts.token.isCancellationRequested) {\n                        return;\n                    }\n                    await this.applyDefaultPasteHandler(dataTransfer, metadata, editorStateCts.token, clipboardEvent);\n                }\n                finally {\n                    editorStateCts.dispose();\n                }\n            }\n        }).then(() => {\n            editorStateCts.dispose();\n        });\n        this._currentPasteOperation = p;\n    }\n    showPasteAsPick(preference, allProviders, selections, dataTransfer, metadata) {\n        const p = createCancelablePromise(async (token) => {\n            const editor = this._editor;\n            if (!editor.hasModel()) {\n                return;\n            }\n            const model = editor.getModel();\n            const disposables = new DisposableStore();\n            const tokenSource = disposables.add(new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token));\n            try {\n                await this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // Filter out any providers the don't match the full data transfer we will send them.\n                let supportedProviders = allProviders.filter(provider => this.isSupportedPasteProvider(provider, dataTransfer, preference));\n                if (preference) {\n                    // We are looking for a specific edit\n                    supportedProviders = supportedProviders.filter(provider => this.providerMatchesPreference(provider, preference));\n                }\n                const context = {\n                    triggerKind: DocumentPasteTriggerKind.PasteAs,\n                    only: preference && preference instanceof HierarchicalKind ? preference : undefined,\n                };\n                let editSession = disposables.add(await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token));\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // Filter out any edits that don't match the requested kind\n                if (preference) {\n                    editSession = {\n                        edits: editSession.edits.filter(edit => {\n                            if (preference instanceof HierarchicalKind) {\n                                return preference.contains(edit.kind);\n                            }\n                            else {\n                                return preference.providerId === edit.provider.id;\n                            }\n                        }),\n                        dispose: editSession.dispose\n                    };\n                }\n                if (!editSession.edits.length) {\n                    if (context.only) {\n                        this.showPasteAsNoEditMessage(selections, context.only);\n                    }\n                    return;\n                }\n                let pickedEdit;\n                if (preference) {\n                    pickedEdit = editSession.edits.at(0);\n                }\n                else {\n                    const selected = await this._quickInputService.pick(editSession.edits.map((edit) => ({\n                        label: edit.title,\n                        description: edit.kind?.value,\n                        edit,\n                    })), {\n                        placeHolder: localize('pasteAsPickerPlaceholder', \"Select Paste Action\"),\n                    });\n                    pickedEdit = selected?.edit;\n                }\n                if (!pickedEdit) {\n                    return;\n                }\n                const combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);\n                await this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor });\n            }\n            finally {\n                disposables.dispose();\n                if (this._currentPasteOperation === p) {\n                    this._currentPasteOperation = undefined;\n                }\n            }\n        });\n        this._progressService.withProgress({\n            location: 10 /* ProgressLocation.Window */,\n            title: localize('pasteAsProgress', \"Running paste handlers\"),\n        }, () => p);\n    }\n    setCopyMetadata(dataTransfer, metadata) {\n        dataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n    }\n    fetchCopyMetadata(e) {\n        if (!e.clipboardData) {\n            return;\n        }\n        // Prefer using the clipboard data we saved off\n        const rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n        if (rawMetadata) {\n            try {\n                return JSON.parse(rawMetadata);\n            }\n            catch {\n                return undefined;\n            }\n        }\n        // Otherwise try to extract the generic text editor metadata\n        const [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n        if (metadata) {\n            return {\n                defaultPastePayload: {\n                    mode: metadata.mode,\n                    multicursorText: metadata.multicursorText ?? null,\n                    pasteOnNewLine: !!metadata.isFromEmptySelection,\n                },\n            };\n        }\n        return undefined;\n    }\n    async mergeInDataFromCopy(dataTransfer, metadata, token) {\n        if (metadata?.id && CopyPasteController_1._currentCopyOperation?.handle === metadata.id) {\n            const toMergeDataTransfer = await CopyPasteController_1._currentCopyOperation.dataTransferPromise;\n            if (token.isCancellationRequested) {\n                return;\n            }\n            for (const [key, value] of toMergeDataTransfer) {\n                dataTransfer.replace(key, value);\n            }\n        }\n        if (!dataTransfer.has(Mimes.uriList)) {\n            const resources = await this._clipboardService.readResources();\n            if (token.isCancellationRequested) {\n                return;\n            }\n            if (resources.length) {\n                dataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));\n            }\n        }\n    }\n    async getPasteEdits(providers, dataTransfer, model, selections, context, token) {\n        const disposables = new DisposableStore();\n        const results = await raceCancellation(Promise.all(providers.map(async (provider) => {\n            try {\n                const edits = await provider.provideDocumentPasteEdits?.(model, selections, dataTransfer, context, token);\n                if (edits) {\n                    disposables.add(edits);\n                }\n                return edits?.edits?.map(edit => ({ ...edit, provider }));\n            }\n            catch (err) {\n                if (!isCancellationError(err)) {\n                    console.error(err);\n                }\n                return undefined;\n            }\n        })), token);\n        const edits = coalesce(results ?? []).flat().filter(edit => {\n            return !context.only || context.only.contains(edit.kind);\n        });\n        return {\n            edits: sortEditsByYieldTo(edits),\n            dispose: () => disposables.dispose()\n        };\n    }\n    async applyDefaultPasteHandler(dataTransfer, metadata, token, clipboardEvent) {\n        const textDataTransfer = dataTransfer.get(Mimes.text) ?? dataTransfer.get('text');\n        const text = (await textDataTransfer?.asString()) ?? '';\n        if (token.isCancellationRequested) {\n            return;\n        }\n        const payload = {\n            clipboardEvent,\n            text,\n            pasteOnNewLine: metadata?.defaultPastePayload.pasteOnNewLine ?? false,\n            multicursorText: metadata?.defaultPastePayload.multicursorText ?? null,\n            mode: null,\n        };\n        this._editor.trigger('keyboard', \"paste\" /* Handler.Paste */, payload);\n    }\n    /**\n     * Filter out providers if they:\n     * - Don't handle any of the data transfer types we have\n     * - Don't match the preferred paste kind\n     */\n    isSupportedPasteProvider(provider, dataTransfer, preference) {\n        if (!provider.pasteMimeTypes?.some(type => dataTransfer.matches(type))) {\n            return false;\n        }\n        return !preference || this.providerMatchesPreference(provider, preference);\n    }\n    providerMatchesPreference(provider, preference) {\n        if (preference instanceof HierarchicalKind) {\n            if (!provider.providedPasteEditKinds) {\n                return true;\n            }\n            return provider.providedPasteEditKinds.some(providedKind => preference.contains(providedKind));\n        }\n        else {\n            return provider.id === preference.providerId;\n        }\n    }\n};\nCopyPasteController = CopyPasteController_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IBulkEditService),\n    __param(3, IClipboardService),\n    __param(4, ILanguageFeaturesService),\n    __param(5, IQuickInputService),\n    __param(6, IProgressService)\n], CopyPasteController);\nexport { CopyPasteController };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1198, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: changePasteTypeCommandId,\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor) {\n        return CopyPasteController.get(editor)?.changePasteType();\n    }\n});\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: 'editor.hidePasteWidget',\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor) {\n        CopyPasteController.get(editor)?.clearWidgets();\n    }\n});\nregisterEditorAction(class PasteAsAction extends EditorAction {\n    static { this.argsSchema = {\n        type: 'object',\n        properties: {\n            kind: {\n                type: 'string',\n                description: nls.localize('pasteAs.kind', \"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\"),\n            }\n        },\n    }; }\n    constructor() {\n        super({\n            id: 'editor.action.pasteAs',\n            label: nls.localize('pasteAs', \"Paste As...\"),\n            alias: 'Paste As...',\n            precondition: EditorContextKeys.writable,\n            metadata: {\n                description: 'Paste as',\n                args: [{\n                        name: 'args',\n                        schema: PasteAsAction.argsSchema\n                    }]\n            }\n        });\n    }\n    run(_accessor, editor, args) {\n        let kind = typeof args?.kind === 'string' ? args.kind : undefined;\n        if (!kind && args) {\n            // Support old id property\n            // TODO: remove this in the future\n            kind = typeof args.id === 'string' ? args.id : undefined;\n        }\n        return CopyPasteController.get(editor)?.pasteAs(kind ? new HierarchicalKind(kind) : undefined);\n    }\n});\nregisterEditorAction(class extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.pasteAsText',\n            label: nls.localize('pasteAsText', \"Paste as Text\"),\n            alias: 'Paste as Text',\n            precondition: EditorContextKeys.writable,\n        });\n    }\n    run(_accessor, editor) {\n        return CopyPasteController.get(editor)?.pasteAs({ providerId: DefaultTextPasteOrDropEditProvider.id });\n    }\n});\n"],"names":[],"mappings":"AAAA;;;8FAG8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;AACA,CAAA,GAAA,sLAAA,CAAA,6BAA0B,AAAD,EAAE,uNAAA,CAAA,sBAAmB,CAAC,EAAE,EAAE,uNAAA,CAAA,sBAAmB,EAAE,EAAE,yCAAyC,MAAK,6EAA6E;AACrM,CAAA,GAAA,mLAAA,CAAA,wBAAqB,AAAD,EAAE,oNAAA,CAAA,+BAA4B;AAClD,CAAA,GAAA,sLAAA,CAAA,wBAAqB,AAAD,EAAE,IAAI,cAAc,sLAAA,CAAA,gBAAa;IACjD,aAAc;QACV,KAAK,CAAC;YACF,IAAI,uNAAA,CAAA,2BAAwB;YAC5B,cAAc,uNAAA,CAAA,wBAAqB;YACnC,QAAQ;gBACJ,QAAQ,IAAI,kCAAkC;gBAC9C,SAAS,KAAK,kBAAkB,MAAK,GAAG,kBAAkB;YAC9D;QACJ;IACJ;IACA,iBAAiB,SAAS,EAAE,MAAM,EAAE;QAChC,OAAO,uNAAA,CAAA,sBAAmB,CAAC,GAAG,CAAC,SAAS;IAC5C;AACJ;AACA,CAAA,GAAA,sLAAA,CAAA,wBAAqB,AAAD,EAAE,IAAI,cAAc,sLAAA,CAAA,gBAAa;IACjD,aAAc;QACV,KAAK,CAAC;YACF,IAAI;YACJ,cAAc,uNAAA,CAAA,wBAAqB;YACnC,QAAQ;gBACJ,QAAQ,IAAI,kCAAkC;gBAC9C,SAAS,EAAE,kBAAkB;YACjC;QACJ;IACJ;IACA,iBAAiB,SAAS,EAAE,MAAM,EAAE;QAChC,uNAAA,CAAA,sBAAmB,CAAC,GAAG,CAAC,SAAS;IACrC;AACJ;AACA,CAAA,GAAA,sLAAA,CAAA,uBAAoB,AAAD,EAAE,MAAM,sBAAsB,sLAAA,CAAA,eAAY;IACzD,MAAO;QAAE,IAAI,CAAC,UAAU,GAAG;YACvB,MAAM;YACN,YAAY;gBACR,MAAM;oBACF,MAAM;oBACN,aAAa,CAAA,GAAA,oKAAA,CAAA,WAAY,AAAD,EAAE,gBAAgB;gBAC9C;YACJ;QACJ;IAAG,CAAC;IACJ,aAAc;QACV,KAAK,CAAC;YACF,IAAI;YACJ,OAAO,CAAA,GAAA,oKAAA,CAAA,WAAY,AAAD,EAAE,WAAW;YAC/B,OAAO;YACP,cAAc,sLAAA,CAAA,oBAAiB,CAAC,QAAQ;YACxC,UAAU;gBACN,aAAa;gBACb,MAAM;oBAAC;wBACC,MAAM;wBACN,QAAQ,cAAc,UAAU;oBACpC;iBAAE;YACV;QACJ;IACJ;IACA,IAAI,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE;QACzB,IAAI,OAAO,OAAO,MAAM,SAAS,WAAW,KAAK,IAAI,GAAG;QACxD,IAAI,CAAC,QAAQ,MAAM;YACf,0BAA0B;YAC1B,kCAAkC;YAClC,OAAO,OAAO,KAAK,EAAE,KAAK,WAAW,KAAK,EAAE,GAAG;QACnD;QACA,OAAO,uNAAA,CAAA,sBAAmB,CAAC,GAAG,CAAC,SAAS,QAAQ,OAAO,IAAI,mLAAA,CAAA,mBAAgB,CAAC,QAAQ;IACxF;AACJ;AACA,CAAA,GAAA,sLAAA,CAAA,uBAAoB,AAAD,EAAE,cAAc,sLAAA,CAAA,eAAY;IAC3C,aAAc;QACV,KAAK,CAAC;YACF,IAAI;YACJ,OAAO,CAAA,GAAA,oKAAA,CAAA,WAAY,AAAD,EAAE,eAAe;YACnC,OAAO;YACP,cAAc,sLAAA,CAAA,oBAAiB,CAAC,QAAQ;QAC5C;IACJ;IACA,IAAI,SAAS,EAAE,MAAM,EAAE;QACnB,OAAO,uNAAA,CAAA,sBAAmB,CAAC,GAAG,CAAC,SAAS,QAAQ;YAAE,YAAY,oNAAA,CAAA,qCAAkC,CAAC,EAAE;QAAC;IACxG;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1309, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar DropIntoEditorController_1;\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';\nimport { VSDataTransfer, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { toExternalVSDataTransfer } from '../../../browser/dnd.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { DraggedTreeItemsIdentifier } from '../../../common/services/treeViewsDnd.js';\nimport { ITreeViewsDnDService } from '../../../common/services/treeViewsDndService.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { LocalSelectionTransfer } from '../../../../platform/dnd/browser/dnd.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { sortEditsByYieldTo } from './edit.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nexport const defaultProviderConfig = 'editor.experimental.dropIntoEditor.defaultProvider';\nexport const changeDropTypeCommandId = 'editor.changeDropType';\nexport const dropWidgetVisibleCtx = new RawContextKey('dropWidgetVisible', false, localize('dropWidgetVisible', \"Whether the drop widget is showing\"));\nlet DropIntoEditorController = class DropIntoEditorController extends Disposable {\n    static { DropIntoEditorController_1 = this; }\n    static { this.ID = 'editor.contrib.dropIntoEditorController'; }\n    static get(editor) {\n        return editor.getContribution(DropIntoEditorController_1.ID);\n    }\n    constructor(editor, instantiationService, _configService, _languageFeaturesService, _treeViewsDragAndDropService) {\n        super();\n        this._configService = _configService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._treeViewsDragAndDropService = _treeViewsDragAndDropService;\n        this.treeItemsTransfer = LocalSelectionTransfer.getInstance();\n        this._dropProgressManager = this._register(instantiationService.createInstance(InlineProgressManager, 'dropIntoEditor', editor));\n        this._postDropWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'dropIntoEditor', editor, dropWidgetVisibleCtx, { id: changeDropTypeCommandId, label: localize('postDropWidgetTitle', \"Show drop options...\") }));\n        this._register(editor.onDropIntoEditor(e => this.onDropIntoEditor(editor, e.position, e.event)));\n    }\n    clearWidgets() {\n        this._postDropWidgetManager.clear();\n    }\n    changeDropType() {\n        this._postDropWidgetManager.tryShowSelector();\n    }\n    async onDropIntoEditor(editor, position, dragEvent) {\n        if (!dragEvent.dataTransfer || !editor.hasModel()) {\n            return;\n        }\n        this._currentOperation?.cancel();\n        editor.focus();\n        editor.setPosition(position);\n        const p = createCancelablePromise(async (token) => {\n            const disposables = new DisposableStore();\n            const tokenSource = disposables.add(new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */, undefined, token));\n            try {\n                const ourDataTransfer = await this.extractDataTransferData(dragEvent);\n                if (ourDataTransfer.size === 0 || tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                const model = editor.getModel();\n                if (!model) {\n                    return;\n                }\n                const providers = this._languageFeaturesService.documentDropEditProvider\n                    .ordered(model)\n                    .filter(provider => {\n                    if (!provider.dropMimeTypes) {\n                        // Keep all providers that don't specify mime types\n                        return true;\n                    }\n                    return provider.dropMimeTypes.some(mime => ourDataTransfer.matches(mime));\n                });\n                const editSession = disposables.add(await this.getDropEdits(providers, model, position, ourDataTransfer, tokenSource));\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                if (editSession.edits.length) {\n                    const activeEditIndex = this.getInitialActiveEditIndex(model, editSession.edits);\n                    const canShowWidget = editor.getOption(36 /* EditorOption.dropIntoEditor */).showDropSelector === 'afterDrop';\n                    // Pass in the parent token here as it tracks cancelling the entire drop operation\n                    await this._postDropWidgetManager.applyEditAndShowIfNeeded([Range.fromPositions(position)], { activeEditIndex, allEdits: editSession.edits }, canShowWidget, async (edit) => edit, token);\n                }\n            }\n            finally {\n                disposables.dispose();\n                if (this._currentOperation === p) {\n                    this._currentOperation = undefined;\n                }\n            }\n        });\n        this._dropProgressManager.showWhile(position, localize('dropIntoEditorProgress', \"Running drop handlers. Click to cancel\"), p, { cancel: () => p.cancel() });\n        this._currentOperation = p;\n    }\n    async getDropEdits(providers, model, position, dataTransfer, tokenSource) {\n        const disposables = new DisposableStore();\n        const results = await raceCancellation(Promise.all(providers.map(async (provider) => {\n            try {\n                const edits = await provider.provideDocumentDropEdits(model, position, dataTransfer, tokenSource.token);\n                if (edits) {\n                    disposables.add(edits);\n                }\n                return edits?.edits.map(edit => ({ ...edit, providerId: provider.id }));\n            }\n            catch (err) {\n                console.error(err);\n            }\n            return undefined;\n        })), tokenSource.token);\n        const edits = coalesce(results ?? []).flat();\n        return {\n            edits: sortEditsByYieldTo(edits),\n            dispose: () => disposables.dispose()\n        };\n    }\n    getInitialActiveEditIndex(model, edits) {\n        const preferredProviders = this._configService.getValue(defaultProviderConfig, { resource: model.uri });\n        for (const [configMime, desiredKindStr] of Object.entries(preferredProviders)) {\n            const desiredKind = new HierarchicalKind(desiredKindStr);\n            const editIndex = edits.findIndex(edit => desiredKind.value === edit.providerId\n                && edit.handledMimeType && matchesMimeType(configMime, [edit.handledMimeType]));\n            if (editIndex >= 0) {\n                return editIndex;\n            }\n        }\n        return 0;\n    }\n    async extractDataTransferData(dragEvent) {\n        if (!dragEvent.dataTransfer) {\n            return new VSDataTransfer();\n        }\n        const dataTransfer = toExternalVSDataTransfer(dragEvent.dataTransfer);\n        if (this.treeItemsTransfer.hasData(DraggedTreeItemsIdentifier.prototype)) {\n            const data = this.treeItemsTransfer.getData(DraggedTreeItemsIdentifier.prototype);\n            if (Array.isArray(data)) {\n                for (const id of data) {\n                    const treeDataTransfer = await this._treeViewsDragAndDropService.removeDragOperationTransfer(id.identifier);\n                    if (treeDataTransfer) {\n                        for (const [type, value] of treeDataTransfer) {\n                            dataTransfer.replace(type, value);\n                        }\n                    }\n                }\n            }\n        }\n        return dataTransfer;\n    }\n};\nDropIntoEditorController = DropIntoEditorController_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IConfigurationService),\n    __param(3, ILanguageFeaturesService),\n    __param(4, ITreeViewsDnDService)\n], DropIntoEditorController);\nexport { DropIntoEditorController };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1526, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorCommand, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { editorConfigurationBaseNode } from '../../../common/config/editorConfigurationSchema.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { DefaultDropProvidersFeature } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nimport { Extensions as ConfigurationExtensions } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { DropIntoEditorController, changeDropTypeCommandId, defaultProviderConfig, dropWidgetVisibleCtx } from './dropIntoEditorController.js';\nregisterEditorContribution(DropIntoEditorController.ID, DropIntoEditorController, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorFeature(DefaultDropProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: changeDropTypeCommandId,\n            precondition: dropWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor, _args) {\n        DropIntoEditorController.get(editor)?.changeDropType();\n    }\n});\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: 'editor.hideDropWidget',\n            precondition: dropWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor, _args) {\n        DropIntoEditorController.get(editor)?.clearWidgets();\n    }\n});\nRegistry.as(ConfigurationExtensions.Configuration).registerConfiguration({\n    ...editorConfigurationBaseNode,\n    properties: {\n        [defaultProviderConfig]: {\n            type: 'object',\n            scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,\n            description: nls.localize('defaultProviderDescription', \"Configures the default drop provider to use for content of a given mime type.\"),\n            default: {},\n            additionalProperties: {\n                type: 'string',\n            },\n        },\n    }\n});\n"],"names":[],"mappings":"AAAA;;;8FAG8F;AAC9F;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;AACA,CAAA,GAAA,sLAAA,CAAA,6BAA0B,AAAD,EAAE,4NAAA,CAAA,2BAAwB,CAAC,EAAE,EAAE,4NAAA,CAAA,2BAAwB,EAAE,EAAE,0DAA0D;AAC9I,CAAA,GAAA,mLAAA,CAAA,wBAAqB,AAAD,EAAE,oNAAA,CAAA,8BAA2B;AACjD,CAAA,GAAA,sLAAA,CAAA,wBAAqB,AAAD,EAAE,IAAI,cAAc,sLAAA,CAAA,gBAAa;IACjD,aAAc;QACV,KAAK,CAAC;YACF,IAAI,4NAAA,CAAA,0BAAuB;YAC3B,cAAc,4NAAA,CAAA,uBAAoB;YAClC,QAAQ;gBACJ,QAAQ,IAAI,kCAAkC;gBAC9C,SAAS,KAAK,kBAAkB,MAAK,GAAG,kBAAkB;YAC9D;QACJ;IACJ;IACA,iBAAiB,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE;QACvC,4NAAA,CAAA,2BAAwB,CAAC,GAAG,CAAC,SAAS;IAC1C;AACJ;AACA,CAAA,GAAA,sLAAA,CAAA,wBAAqB,AAAD,EAAE,IAAI,cAAc,sLAAA,CAAA,gBAAa;IACjD,aAAc;QACV,KAAK,CAAC;YACF,IAAI;YACJ,cAAc,4NAAA,CAAA,uBAAoB;YAClC,QAAQ;gBACJ,QAAQ,IAAI,kCAAkC;gBAC9C,SAAS,EAAE,kBAAkB;YACjC;QACJ;IACJ;IACA,iBAAiB,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE;QACvC,4NAAA,CAAA,2BAAwB,CAAC,GAAG,CAAC,SAAS;IAC1C;AACJ;AACA,2LAAA,CAAA,WAAQ,CAAC,EAAE,CAAC,6MAAA,CAAA,aAAuB,CAAC,aAAa,EAAE,qBAAqB,CAAC;IACrE,GAAG,wMAAA,CAAA,8BAA2B;IAC9B,YAAY;QACR,CAAC,4NAAA,CAAA,wBAAqB,CAAC,EAAE;YACrB,MAAM;YACN,OAAO,EAAE,2CAA2C;YACpD,aAAa,CAAA,GAAA,oKAAA,CAAA,WAAY,AAAD,EAAE,8BAA8B;YACxD,SAAS,CAAC;YACV,sBAAsB;gBAClB,MAAM;YACV;QACJ;IACJ;AACJ","ignoreList":[0],"debugId":null}}]
}