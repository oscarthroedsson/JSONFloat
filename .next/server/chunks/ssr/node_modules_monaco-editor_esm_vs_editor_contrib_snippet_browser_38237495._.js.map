{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetParser.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Scanner {\n    constructor() {\n        this.value = '';\n        this.pos = 0;\n    }\n    static { this._table = {\n        [36 /* CharCode.DollarSign */]: 0 /* TokenType.Dollar */,\n        [58 /* CharCode.Colon */]: 1 /* TokenType.Colon */,\n        [44 /* CharCode.Comma */]: 2 /* TokenType.Comma */,\n        [123 /* CharCode.OpenCurlyBrace */]: 3 /* TokenType.CurlyOpen */,\n        [125 /* CharCode.CloseCurlyBrace */]: 4 /* TokenType.CurlyClose */,\n        [92 /* CharCode.Backslash */]: 5 /* TokenType.Backslash */,\n        [47 /* CharCode.Slash */]: 6 /* TokenType.Forwardslash */,\n        [124 /* CharCode.Pipe */]: 7 /* TokenType.Pipe */,\n        [43 /* CharCode.Plus */]: 11 /* TokenType.Plus */,\n        [45 /* CharCode.Dash */]: 12 /* TokenType.Dash */,\n        [63 /* CharCode.QuestionMark */]: 13 /* TokenType.QuestionMark */,\n    }; }\n    static isDigitCharacter(ch) {\n        return ch >= 48 /* CharCode.Digit0 */ && ch <= 57 /* CharCode.Digit9 */;\n    }\n    static isVariableCharacter(ch) {\n        return ch === 95 /* CharCode.Underline */\n            || (ch >= 97 /* CharCode.a */ && ch <= 122 /* CharCode.z */)\n            || (ch >= 65 /* CharCode.A */ && ch <= 90 /* CharCode.Z */);\n    }\n    text(value) {\n        this.value = value;\n        this.pos = 0;\n    }\n    tokenText(token) {\n        return this.value.substr(token.pos, token.len);\n    }\n    next() {\n        if (this.pos >= this.value.length) {\n            return { type: 14 /* TokenType.EOF */, pos: this.pos, len: 0 };\n        }\n        const pos = this.pos;\n        let len = 0;\n        let ch = this.value.charCodeAt(pos);\n        let type;\n        // static types\n        type = Scanner._table[ch];\n        if (typeof type === 'number') {\n            this.pos += 1;\n            return { type, pos, len: 1 };\n        }\n        // number\n        if (Scanner.isDigitCharacter(ch)) {\n            type = 8 /* TokenType.Int */;\n            do {\n                len += 1;\n                ch = this.value.charCodeAt(pos + len);\n            } while (Scanner.isDigitCharacter(ch));\n            this.pos += len;\n            return { type, pos, len };\n        }\n        // variable name\n        if (Scanner.isVariableCharacter(ch)) {\n            type = 9 /* TokenType.VariableName */;\n            do {\n                ch = this.value.charCodeAt(pos + (++len));\n            } while (Scanner.isVariableCharacter(ch) || Scanner.isDigitCharacter(ch));\n            this.pos += len;\n            return { type, pos, len };\n        }\n        // format\n        type = 10 /* TokenType.Format */;\n        do {\n            len += 1;\n            ch = this.value.charCodeAt(pos + len);\n        } while (!isNaN(ch)\n            && typeof Scanner._table[ch] === 'undefined' // not static token\n            && !Scanner.isDigitCharacter(ch) // not number\n            && !Scanner.isVariableCharacter(ch) // not variable\n        );\n        this.pos += len;\n        return { type, pos, len };\n    }\n}\nexport class Marker {\n    constructor() {\n        this._children = [];\n    }\n    appendChild(child) {\n        if (child instanceof Text && this._children[this._children.length - 1] instanceof Text) {\n            // this and previous child are text -> merge them\n            this._children[this._children.length - 1].value += child.value;\n        }\n        else {\n            // normal adoption of child\n            child.parent = this;\n            this._children.push(child);\n        }\n        return this;\n    }\n    replace(child, others) {\n        const { parent } = child;\n        const idx = parent.children.indexOf(child);\n        const newChildren = parent.children.slice(0);\n        newChildren.splice(idx, 1, ...others);\n        parent._children = newChildren;\n        (function _fixParent(children, parent) {\n            for (const child of children) {\n                child.parent = parent;\n                _fixParent(child.children, child);\n            }\n        })(others, parent);\n    }\n    get children() {\n        return this._children;\n    }\n    get rightMostDescendant() {\n        if (this._children.length > 0) {\n            return this._children[this._children.length - 1].rightMostDescendant;\n        }\n        return this;\n    }\n    get snippet() {\n        let candidate = this;\n        while (true) {\n            if (!candidate) {\n                return undefined;\n            }\n            if (candidate instanceof TextmateSnippet) {\n                return candidate;\n            }\n            candidate = candidate.parent;\n        }\n    }\n    toString() {\n        return this.children.reduce((prev, cur) => prev + cur.toString(), '');\n    }\n    len() {\n        return 0;\n    }\n}\nexport class Text extends Marker {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    len() {\n        return this.value.length;\n    }\n    clone() {\n        return new Text(this.value);\n    }\n}\nexport class TransformableMarker extends Marker {\n}\nexport class Placeholder extends TransformableMarker {\n    static compareByIndex(a, b) {\n        if (a.index === b.index) {\n            return 0;\n        }\n        else if (a.isFinalTabstop) {\n            return 1;\n        }\n        else if (b.isFinalTabstop) {\n            return -1;\n        }\n        else if (a.index < b.index) {\n            return -1;\n        }\n        else if (a.index > b.index) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    constructor(index) {\n        super();\n        this.index = index;\n    }\n    get isFinalTabstop() {\n        return this.index === 0;\n    }\n    get choice() {\n        return this._children.length === 1 && this._children[0] instanceof Choice\n            ? this._children[0]\n            : undefined;\n    }\n    clone() {\n        const ret = new Placeholder(this.index);\n        if (this.transform) {\n            ret.transform = this.transform.clone();\n        }\n        ret._children = this.children.map(child => child.clone());\n        return ret;\n    }\n}\nexport class Choice extends Marker {\n    constructor() {\n        super(...arguments);\n        this.options = [];\n    }\n    appendChild(marker) {\n        if (marker instanceof Text) {\n            marker.parent = this;\n            this.options.push(marker);\n        }\n        return this;\n    }\n    toString() {\n        return this.options[0].value;\n    }\n    len() {\n        return this.options[0].len();\n    }\n    clone() {\n        const ret = new Choice();\n        this.options.forEach(ret.appendChild, ret);\n        return ret;\n    }\n}\nexport class Transform extends Marker {\n    constructor() {\n        super(...arguments);\n        this.regexp = new RegExp('');\n    }\n    resolve(value) {\n        const _this = this;\n        let didMatch = false;\n        let ret = value.replace(this.regexp, function () {\n            didMatch = true;\n            return _this._replace(Array.prototype.slice.call(arguments, 0, -2));\n        });\n        // when the regex didn't match and when the transform has\n        // else branches, then run those\n        if (!didMatch && this._children.some(child => child instanceof FormatString && Boolean(child.elseValue))) {\n            ret = this._replace([]);\n        }\n        return ret;\n    }\n    _replace(groups) {\n        let ret = '';\n        for (const marker of this._children) {\n            if (marker instanceof FormatString) {\n                let value = groups[marker.index] || '';\n                value = marker.resolve(value);\n                ret += value;\n            }\n            else {\n                ret += marker.toString();\n            }\n        }\n        return ret;\n    }\n    toString() {\n        return '';\n    }\n    clone() {\n        const ret = new Transform();\n        ret.regexp = new RegExp(this.regexp.source, '' + (this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));\n        ret._children = this.children.map(child => child.clone());\n        return ret;\n    }\n}\nexport class FormatString extends Marker {\n    constructor(index, shorthandName, ifValue, elseValue) {\n        super();\n        this.index = index;\n        this.shorthandName = shorthandName;\n        this.ifValue = ifValue;\n        this.elseValue = elseValue;\n    }\n    resolve(value) {\n        if (this.shorthandName === 'upcase') {\n            return !value ? '' : value.toLocaleUpperCase();\n        }\n        else if (this.shorthandName === 'downcase') {\n            return !value ? '' : value.toLocaleLowerCase();\n        }\n        else if (this.shorthandName === 'capitalize') {\n            return !value ? '' : (value[0].toLocaleUpperCase() + value.substr(1));\n        }\n        else if (this.shorthandName === 'pascalcase') {\n            return !value ? '' : this._toPascalCase(value);\n        }\n        else if (this.shorthandName === 'camelcase') {\n            return !value ? '' : this._toCamelCase(value);\n        }\n        else if (Boolean(value) && typeof this.ifValue === 'string') {\n            return this.ifValue;\n        }\n        else if (!Boolean(value) && typeof this.elseValue === 'string') {\n            return this.elseValue;\n        }\n        else {\n            return value || '';\n        }\n    }\n    _toPascalCase(value) {\n        const match = value.match(/[a-z0-9]+/gi);\n        if (!match) {\n            return value;\n        }\n        return match.map(word => {\n            return word.charAt(0).toUpperCase() + word.substr(1);\n        })\n            .join('');\n    }\n    _toCamelCase(value) {\n        const match = value.match(/[a-z0-9]+/gi);\n        if (!match) {\n            return value;\n        }\n        return match.map((word, index) => {\n            if (index === 0) {\n                return word.charAt(0).toLowerCase() + word.substr(1);\n            }\n            return word.charAt(0).toUpperCase() + word.substr(1);\n        })\n            .join('');\n    }\n    clone() {\n        const ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);\n        return ret;\n    }\n}\nexport class Variable extends TransformableMarker {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    resolve(resolver) {\n        let value = resolver.resolve(this);\n        if (this.transform) {\n            value = this.transform.resolve(value || '');\n        }\n        if (value !== undefined) {\n            this._children = [new Text(value)];\n            return true;\n        }\n        return false;\n    }\n    clone() {\n        const ret = new Variable(this.name);\n        if (this.transform) {\n            ret.transform = this.transform.clone();\n        }\n        ret._children = this.children.map(child => child.clone());\n        return ret;\n    }\n}\nfunction walk(marker, visitor) {\n    const stack = [...marker];\n    while (stack.length > 0) {\n        const marker = stack.shift();\n        const recurse = visitor(marker);\n        if (!recurse) {\n            break;\n        }\n        stack.unshift(...marker.children);\n    }\n}\nexport class TextmateSnippet extends Marker {\n    get placeholderInfo() {\n        if (!this._placeholders) {\n            // fill in placeholders\n            const all = [];\n            let last;\n            this.walk(function (candidate) {\n                if (candidate instanceof Placeholder) {\n                    all.push(candidate);\n                    last = !last || last.index < candidate.index ? candidate : last;\n                }\n                return true;\n            });\n            this._placeholders = { all, last };\n        }\n        return this._placeholders;\n    }\n    get placeholders() {\n        const { all } = this.placeholderInfo;\n        return all;\n    }\n    offset(marker) {\n        let pos = 0;\n        let found = false;\n        this.walk(candidate => {\n            if (candidate === marker) {\n                found = true;\n                return false;\n            }\n            pos += candidate.len();\n            return true;\n        });\n        if (!found) {\n            return -1;\n        }\n        return pos;\n    }\n    fullLen(marker) {\n        let ret = 0;\n        walk([marker], marker => {\n            ret += marker.len();\n            return true;\n        });\n        return ret;\n    }\n    enclosingPlaceholders(placeholder) {\n        const ret = [];\n        let { parent } = placeholder;\n        while (parent) {\n            if (parent instanceof Placeholder) {\n                ret.push(parent);\n            }\n            parent = parent.parent;\n        }\n        return ret;\n    }\n    resolveVariables(resolver) {\n        this.walk(candidate => {\n            if (candidate instanceof Variable) {\n                if (candidate.resolve(resolver)) {\n                    this._placeholders = undefined;\n                }\n            }\n            return true;\n        });\n        return this;\n    }\n    appendChild(child) {\n        this._placeholders = undefined;\n        return super.appendChild(child);\n    }\n    replace(child, others) {\n        this._placeholders = undefined;\n        return super.replace(child, others);\n    }\n    clone() {\n        const ret = new TextmateSnippet();\n        this._children = this.children.map(child => child.clone());\n        return ret;\n    }\n    walk(visitor) {\n        walk(this.children, visitor);\n    }\n}\nexport class SnippetParser {\n    constructor() {\n        this._scanner = new Scanner();\n        this._token = { type: 14 /* TokenType.EOF */, pos: 0, len: 0 };\n    }\n    static escape(value) {\n        return value.replace(/\\$|}|\\\\/g, '\\\\$&');\n    }\n    static guessNeedsClipboard(template) {\n        return /\\${?CLIPBOARD/.test(template);\n    }\n    parse(value, insertFinalTabstop, enforceFinalTabstop) {\n        const snippet = new TextmateSnippet();\n        this.parseFragment(value, snippet);\n        this.ensureFinalTabstop(snippet, enforceFinalTabstop ?? false, insertFinalTabstop ?? false);\n        return snippet;\n    }\n    parseFragment(value, snippet) {\n        const offset = snippet.children.length;\n        this._scanner.text(value);\n        this._token = this._scanner.next();\n        while (this._parse(snippet)) {\n            // nothing\n        }\n        // fill in values for placeholders. the first placeholder of an index\n        // that has a value defines the value for all placeholders with that index\n        const placeholderDefaultValues = new Map();\n        const incompletePlaceholders = [];\n        snippet.walk(marker => {\n            if (marker instanceof Placeholder) {\n                if (marker.isFinalTabstop) {\n                    placeholderDefaultValues.set(0, undefined);\n                }\n                else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) {\n                    placeholderDefaultValues.set(marker.index, marker.children);\n                }\n                else {\n                    incompletePlaceholders.push(marker);\n                }\n            }\n            return true;\n        });\n        const fillInIncompletePlaceholder = (placeholder, stack) => {\n            const defaultValues = placeholderDefaultValues.get(placeholder.index);\n            if (!defaultValues) {\n                return;\n            }\n            const clone = new Placeholder(placeholder.index);\n            clone.transform = placeholder.transform;\n            for (const child of defaultValues) {\n                const newChild = child.clone();\n                clone.appendChild(newChild);\n                // \"recurse\" on children that are again placeholders\n                if (newChild instanceof Placeholder && placeholderDefaultValues.has(newChild.index) && !stack.has(newChild.index)) {\n                    stack.add(newChild.index);\n                    fillInIncompletePlaceholder(newChild, stack);\n                    stack.delete(newChild.index);\n                }\n            }\n            snippet.replace(placeholder, [clone]);\n        };\n        const stack = new Set();\n        for (const placeholder of incompletePlaceholders) {\n            fillInIncompletePlaceholder(placeholder, stack);\n        }\n        return snippet.children.slice(offset);\n    }\n    ensureFinalTabstop(snippet, enforceFinalTabstop, insertFinalTabstop) {\n        if (enforceFinalTabstop || insertFinalTabstop && snippet.placeholders.length > 0) {\n            const finalTabstop = snippet.placeholders.find(p => p.index === 0);\n            if (!finalTabstop) {\n                // the snippet uses placeholders but has no\n                // final tabstop defined -> insert at the end\n                snippet.appendChild(new Placeholder(0));\n            }\n        }\n    }\n    _accept(type, value) {\n        if (type === undefined || this._token.type === type) {\n            const ret = !value ? true : this._scanner.tokenText(this._token);\n            this._token = this._scanner.next();\n            return ret;\n        }\n        return false;\n    }\n    _backTo(token) {\n        this._scanner.pos = token.pos + token.len;\n        this._token = token;\n        return false;\n    }\n    _until(type) {\n        const start = this._token;\n        while (this._token.type !== type) {\n            if (this._token.type === 14 /* TokenType.EOF */) {\n                return false;\n            }\n            else if (this._token.type === 5 /* TokenType.Backslash */) {\n                const nextToken = this._scanner.next();\n                if (nextToken.type !== 0 /* TokenType.Dollar */\n                    && nextToken.type !== 4 /* TokenType.CurlyClose */\n                    && nextToken.type !== 5 /* TokenType.Backslash */) {\n                    return false;\n                }\n            }\n            this._token = this._scanner.next();\n        }\n        const value = this._scanner.value.substring(start.pos, this._token.pos).replace(/\\\\(\\$|}|\\\\)/g, '$1');\n        this._token = this._scanner.next();\n        return value;\n    }\n    _parse(marker) {\n        return this._parseEscaped(marker)\n            || this._parseTabstopOrVariableName(marker)\n            || this._parseComplexPlaceholder(marker)\n            || this._parseComplexVariable(marker)\n            || this._parseAnything(marker);\n    }\n    // \\$, \\\\, \\} -> just text\n    _parseEscaped(marker) {\n        let value;\n        if (value = this._accept(5 /* TokenType.Backslash */, true)) {\n            // saw a backslash, append escaped token or that backslash\n            value = this._accept(0 /* TokenType.Dollar */, true)\n                || this._accept(4 /* TokenType.CurlyClose */, true)\n                || this._accept(5 /* TokenType.Backslash */, true)\n                || value;\n            marker.appendChild(new Text(value));\n            return true;\n        }\n        return false;\n    }\n    // $foo -> variable, $1 -> tabstop\n    _parseTabstopOrVariableName(parent) {\n        let value;\n        const token = this._token;\n        const match = this._accept(0 /* TokenType.Dollar */)\n            && (value = this._accept(9 /* TokenType.VariableName */, true) || this._accept(8 /* TokenType.Int */, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        parent.appendChild(/^\\d+$/.test(value)\n            ? new Placeholder(Number(value))\n            : new Variable(value));\n        return true;\n    }\n    // ${1:<children>}, ${1} -> placeholder\n    _parseComplexPlaceholder(parent) {\n        let index;\n        const token = this._token;\n        const match = this._accept(0 /* TokenType.Dollar */)\n            && this._accept(3 /* TokenType.CurlyOpen */)\n            && (index = this._accept(8 /* TokenType.Int */, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        const placeholder = new Placeholder(Number(index));\n        if (this._accept(1 /* TokenType.Colon */)) {\n            // ${1:<children>}\n            while (true) {\n                // ...} -> done\n                if (this._accept(4 /* TokenType.CurlyClose */)) {\n                    parent.appendChild(placeholder);\n                    return true;\n                }\n                if (this._parse(placeholder)) {\n                    continue;\n                }\n                // fallback\n                parent.appendChild(new Text('${' + index + ':'));\n                placeholder.children.forEach(parent.appendChild, parent);\n                return true;\n            }\n        }\n        else if (placeholder.index > 0 && this._accept(7 /* TokenType.Pipe */)) {\n            // ${1|one,two,three|}\n            const choice = new Choice();\n            while (true) {\n                if (this._parseChoiceElement(choice)) {\n                    if (this._accept(2 /* TokenType.Comma */)) {\n                        // opt, -> more\n                        continue;\n                    }\n                    if (this._accept(7 /* TokenType.Pipe */)) {\n                        placeholder.appendChild(choice);\n                        if (this._accept(4 /* TokenType.CurlyClose */)) {\n                            // ..|} -> done\n                            parent.appendChild(placeholder);\n                            return true;\n                        }\n                    }\n                }\n                this._backTo(token);\n                return false;\n            }\n        }\n        else if (this._accept(6 /* TokenType.Forwardslash */)) {\n            // ${1/<regex>/<format>/<options>}\n            if (this._parseTransform(placeholder)) {\n                parent.appendChild(placeholder);\n                return true;\n            }\n            this._backTo(token);\n            return false;\n        }\n        else if (this._accept(4 /* TokenType.CurlyClose */)) {\n            // ${1}\n            parent.appendChild(placeholder);\n            return true;\n        }\n        else {\n            // ${1 <- missing curly or colon\n            return this._backTo(token);\n        }\n    }\n    _parseChoiceElement(parent) {\n        const token = this._token;\n        const values = [];\n        while (true) {\n            if (this._token.type === 2 /* TokenType.Comma */ || this._token.type === 7 /* TokenType.Pipe */) {\n                break;\n            }\n            let value;\n            if (value = this._accept(5 /* TokenType.Backslash */, true)) {\n                // \\, \\|, or \\\\\n                value = this._accept(2 /* TokenType.Comma */, true)\n                    || this._accept(7 /* TokenType.Pipe */, true)\n                    || this._accept(5 /* TokenType.Backslash */, true)\n                    || value;\n            }\n            else {\n                value = this._accept(undefined, true);\n            }\n            if (!value) {\n                // EOF\n                this._backTo(token);\n                return false;\n            }\n            values.push(value);\n        }\n        if (values.length === 0) {\n            this._backTo(token);\n            return false;\n        }\n        parent.appendChild(new Text(values.join('')));\n        return true;\n    }\n    // ${foo:<children>}, ${foo} -> variable\n    _parseComplexVariable(parent) {\n        let name;\n        const token = this._token;\n        const match = this._accept(0 /* TokenType.Dollar */)\n            && this._accept(3 /* TokenType.CurlyOpen */)\n            && (name = this._accept(9 /* TokenType.VariableName */, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        const variable = new Variable(name);\n        if (this._accept(1 /* TokenType.Colon */)) {\n            // ${foo:<children>}\n            while (true) {\n                // ...} -> done\n                if (this._accept(4 /* TokenType.CurlyClose */)) {\n                    parent.appendChild(variable);\n                    return true;\n                }\n                if (this._parse(variable)) {\n                    continue;\n                }\n                // fallback\n                parent.appendChild(new Text('${' + name + ':'));\n                variable.children.forEach(parent.appendChild, parent);\n                return true;\n            }\n        }\n        else if (this._accept(6 /* TokenType.Forwardslash */)) {\n            // ${foo/<regex>/<format>/<options>}\n            if (this._parseTransform(variable)) {\n                parent.appendChild(variable);\n                return true;\n            }\n            this._backTo(token);\n            return false;\n        }\n        else if (this._accept(4 /* TokenType.CurlyClose */)) {\n            // ${foo}\n            parent.appendChild(variable);\n            return true;\n        }\n        else {\n            // ${foo <- missing curly or colon\n            return this._backTo(token);\n        }\n    }\n    _parseTransform(parent) {\n        // ...<regex>/<format>/<options>}\n        const transform = new Transform();\n        let regexValue = '';\n        let regexOptions = '';\n        // (1) /regex\n        while (true) {\n            if (this._accept(6 /* TokenType.Forwardslash */)) {\n                break;\n            }\n            let escaped;\n            if (escaped = this._accept(5 /* TokenType.Backslash */, true)) {\n                escaped = this._accept(6 /* TokenType.Forwardslash */, true) || escaped;\n                regexValue += escaped;\n                continue;\n            }\n            if (this._token.type !== 14 /* TokenType.EOF */) {\n                regexValue += this._accept(undefined, true);\n                continue;\n            }\n            return false;\n        }\n        // (2) /format\n        while (true) {\n            if (this._accept(6 /* TokenType.Forwardslash */)) {\n                break;\n            }\n            let escaped;\n            if (escaped = this._accept(5 /* TokenType.Backslash */, true)) {\n                escaped = this._accept(5 /* TokenType.Backslash */, true) || this._accept(6 /* TokenType.Forwardslash */, true) || escaped;\n                transform.appendChild(new Text(escaped));\n                continue;\n            }\n            if (this._parseFormatString(transform) || this._parseAnything(transform)) {\n                continue;\n            }\n            return false;\n        }\n        // (3) /option\n        while (true) {\n            if (this._accept(4 /* TokenType.CurlyClose */)) {\n                break;\n            }\n            if (this._token.type !== 14 /* TokenType.EOF */) {\n                regexOptions += this._accept(undefined, true);\n                continue;\n            }\n            return false;\n        }\n        try {\n            transform.regexp = new RegExp(regexValue, regexOptions);\n        }\n        catch (e) {\n            // invalid regexp\n            return false;\n        }\n        parent.transform = transform;\n        return true;\n    }\n    _parseFormatString(parent) {\n        const token = this._token;\n        if (!this._accept(0 /* TokenType.Dollar */)) {\n            return false;\n        }\n        let complex = false;\n        if (this._accept(3 /* TokenType.CurlyOpen */)) {\n            complex = true;\n        }\n        const index = this._accept(8 /* TokenType.Int */, true);\n        if (!index) {\n            this._backTo(token);\n            return false;\n        }\n        else if (!complex) {\n            // $1\n            parent.appendChild(new FormatString(Number(index)));\n            return true;\n        }\n        else if (this._accept(4 /* TokenType.CurlyClose */)) {\n            // ${1}\n            parent.appendChild(new FormatString(Number(index)));\n            return true;\n        }\n        else if (!this._accept(1 /* TokenType.Colon */)) {\n            this._backTo(token);\n            return false;\n        }\n        if (this._accept(6 /* TokenType.Forwardslash */)) {\n            // ${1:/upcase}\n            const shorthand = this._accept(9 /* TokenType.VariableName */, true);\n            if (!shorthand || !this._accept(4 /* TokenType.CurlyClose */)) {\n                this._backTo(token);\n                return false;\n            }\n            else {\n                parent.appendChild(new FormatString(Number(index), shorthand));\n                return true;\n            }\n        }\n        else if (this._accept(11 /* TokenType.Plus */)) {\n            // ${1:+<if>}\n            const ifValue = this._until(4 /* TokenType.CurlyClose */);\n            if (ifValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, ifValue, undefined));\n                return true;\n            }\n        }\n        else if (this._accept(12 /* TokenType.Dash */)) {\n            // ${2:-<else>}\n            const elseValue = this._until(4 /* TokenType.CurlyClose */);\n            if (elseValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n                return true;\n            }\n        }\n        else if (this._accept(13 /* TokenType.QuestionMark */)) {\n            // ${2:?<if>:<else>}\n            const ifValue = this._until(1 /* TokenType.Colon */);\n            if (ifValue) {\n                const elseValue = this._until(4 /* TokenType.CurlyClose */);\n                if (elseValue) {\n                    parent.appendChild(new FormatString(Number(index), undefined, ifValue, elseValue));\n                    return true;\n                }\n            }\n        }\n        else {\n            // ${1:<else>}\n            const elseValue = this._until(4 /* TokenType.CurlyClose */);\n            if (elseValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n                return true;\n            }\n        }\n        this._backTo(token);\n        return false;\n    }\n    _parseAnything(marker) {\n        if (this._token.type !== 14 /* TokenType.EOF */) {\n            marker.appendChild(new Text(this._scanner.tokenText(this._token)));\n            this._accept(undefined);\n            return true;\n        }\n        return false;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 889, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetVariables.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { normalizeDriveLetter } from '../../../../base/common/labels.js';\nimport * as path from '../../../../base/common/path.js';\nimport { dirname } from '../../../../base/common/resources.js';\nimport { commonPrefixLength, getLeadingWhitespace, isFalsyOrWhitespace, splitLines } from '../../../../base/common/strings.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { Text } from './snippetParser.js';\nimport * as nls from '../../../../nls.js';\nimport { WORKSPACE_EXTENSION, isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, isEmptyWorkspaceIdentifier } from '../../../../platform/workspace/common/workspace.js';\nexport const KnownSnippetVariableNames = Object.freeze({\n    'CURRENT_YEAR': true,\n    'CURRENT_YEAR_SHORT': true,\n    'CURRENT_MONTH': true,\n    'CURRENT_DATE': true,\n    'CURRENT_HOUR': true,\n    'CURRENT_MINUTE': true,\n    'CURRENT_SECOND': true,\n    'CURRENT_DAY_NAME': true,\n    'CURRENT_DAY_NAME_SHORT': true,\n    'CURRENT_MONTH_NAME': true,\n    'CURRENT_MONTH_NAME_SHORT': true,\n    'CURRENT_SECONDS_UNIX': true,\n    'CURRENT_TIMEZONE_OFFSET': true,\n    'SELECTION': true,\n    'CLIPBOARD': true,\n    'TM_SELECTED_TEXT': true,\n    'TM_CURRENT_LINE': true,\n    'TM_CURRENT_WORD': true,\n    'TM_LINE_INDEX': true,\n    'TM_LINE_NUMBER': true,\n    'TM_FILENAME': true,\n    'TM_FILENAME_BASE': true,\n    'TM_DIRECTORY': true,\n    'TM_FILEPATH': true,\n    'CURSOR_INDEX': true, // 0-offset\n    'CURSOR_NUMBER': true, // 1-offset\n    'RELATIVE_FILEPATH': true,\n    'BLOCK_COMMENT_START': true,\n    'BLOCK_COMMENT_END': true,\n    'LINE_COMMENT': true,\n    'WORKSPACE_NAME': true,\n    'WORKSPACE_FOLDER': true,\n    'RANDOM': true,\n    'RANDOM_HEX': true,\n    'UUID': true\n});\nexport class CompositeSnippetVariableResolver {\n    constructor(_delegates) {\n        this._delegates = _delegates;\n        //\n    }\n    resolve(variable) {\n        for (const delegate of this._delegates) {\n            const value = delegate.resolve(variable);\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return undefined;\n    }\n}\nexport class SelectionBasedVariableResolver {\n    constructor(_model, _selection, _selectionIdx, _overtypingCapturer) {\n        this._model = _model;\n        this._selection = _selection;\n        this._selectionIdx = _selectionIdx;\n        this._overtypingCapturer = _overtypingCapturer;\n        //\n    }\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n            let value = this._model.getValueInRange(this._selection) || undefined;\n            let isMultiline = this._selection.startLineNumber !== this._selection.endLineNumber;\n            // If there was no selected text, try to get last overtyped text\n            if (!value && this._overtypingCapturer) {\n                const info = this._overtypingCapturer.getLastOvertypedInfo(this._selectionIdx);\n                if (info) {\n                    value = info.value;\n                    isMultiline = info.multiline;\n                }\n            }\n            if (value && isMultiline && variable.snippet) {\n                // Selection is a multiline string which we indentation we now\n                // need to adjust. We compare the indentation of this variable\n                // with the indentation at the editor position and add potential\n                // extra indentation to the value\n                const line = this._model.getLineContent(this._selection.startLineNumber);\n                const lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n                let varLeadingWhitespace = lineLeadingWhitespace;\n                variable.snippet.walk(marker => {\n                    if (marker === variable) {\n                        return false;\n                    }\n                    if (marker instanceof Text) {\n                        varLeadingWhitespace = getLeadingWhitespace(splitLines(marker.value).pop());\n                    }\n                    return true;\n                });\n                const whitespaceCommonLength = commonPrefixLength(varLeadingWhitespace, lineLeadingWhitespace);\n                value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, (m, newline, rest) => `${newline}${varLeadingWhitespace.substr(whitespaceCommonLength)}${rest}`);\n            }\n            return value;\n        }\n        else if (name === 'TM_CURRENT_LINE') {\n            return this._model.getLineContent(this._selection.positionLineNumber);\n        }\n        else if (name === 'TM_CURRENT_WORD') {\n            const info = this._model.getWordAtPosition({\n                lineNumber: this._selection.positionLineNumber,\n                column: this._selection.positionColumn\n            });\n            return info && info.word || undefined;\n        }\n        else if (name === 'TM_LINE_INDEX') {\n            return String(this._selection.positionLineNumber - 1);\n        }\n        else if (name === 'TM_LINE_NUMBER') {\n            return String(this._selection.positionLineNumber);\n        }\n        else if (name === 'CURSOR_INDEX') {\n            return String(this._selectionIdx);\n        }\n        else if (name === 'CURSOR_NUMBER') {\n            return String(this._selectionIdx + 1);\n        }\n        return undefined;\n    }\n}\nexport class ModelBasedVariableResolver {\n    constructor(_labelService, _model) {\n        this._labelService = _labelService;\n        this._model = _model;\n        //\n    }\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'TM_FILENAME') {\n            return path.basename(this._model.uri.fsPath);\n        }\n        else if (name === 'TM_FILENAME_BASE') {\n            const name = path.basename(this._model.uri.fsPath);\n            const idx = name.lastIndexOf('.');\n            if (idx <= 0) {\n                return name;\n            }\n            else {\n                return name.slice(0, idx);\n            }\n        }\n        else if (name === 'TM_DIRECTORY') {\n            if (path.dirname(this._model.uri.fsPath) === '.') {\n                return '';\n            }\n            return this._labelService.getUriLabel(dirname(this._model.uri));\n        }\n        else if (name === 'TM_FILEPATH') {\n            return this._labelService.getUriLabel(this._model.uri);\n        }\n        else if (name === 'RELATIVE_FILEPATH') {\n            return this._labelService.getUriLabel(this._model.uri, { relative: true, noPrefix: true });\n        }\n        return undefined;\n    }\n}\nexport class ClipboardBasedVariableResolver {\n    constructor(_readClipboardText, _selectionIdx, _selectionCount, _spread) {\n        this._readClipboardText = _readClipboardText;\n        this._selectionIdx = _selectionIdx;\n        this._selectionCount = _selectionCount;\n        this._spread = _spread;\n        //\n    }\n    resolve(variable) {\n        if (variable.name !== 'CLIPBOARD') {\n            return undefined;\n        }\n        const clipboardText = this._readClipboardText();\n        if (!clipboardText) {\n            return undefined;\n        }\n        // `spread` is assigning each cursor a line of the clipboard\n        // text whenever there the line count equals the cursor count\n        // and when enabled\n        if (this._spread) {\n            const lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(s => !isFalsyOrWhitespace(s));\n            if (lines.length === this._selectionCount) {\n                return lines[this._selectionIdx];\n            }\n        }\n        return clipboardText;\n    }\n}\nlet CommentBasedVariableResolver = class CommentBasedVariableResolver {\n    constructor(_model, _selection, _languageConfigurationService) {\n        this._model = _model;\n        this._selection = _selection;\n        this._languageConfigurationService = _languageConfigurationService;\n        //\n    }\n    resolve(variable) {\n        const { name } = variable;\n        const langId = this._model.getLanguageIdAtPosition(this._selection.selectionStartLineNumber, this._selection.selectionStartColumn);\n        const config = this._languageConfigurationService.getLanguageConfiguration(langId).comments;\n        if (!config) {\n            return undefined;\n        }\n        if (name === 'LINE_COMMENT') {\n            return config.lineCommentToken || undefined;\n        }\n        else if (name === 'BLOCK_COMMENT_START') {\n            return config.blockCommentStartToken || undefined;\n        }\n        else if (name === 'BLOCK_COMMENT_END') {\n            return config.blockCommentEndToken || undefined;\n        }\n        return undefined;\n    }\n};\nCommentBasedVariableResolver = __decorate([\n    __param(2, ILanguageConfigurationService)\n], CommentBasedVariableResolver);\nexport { CommentBasedVariableResolver };\nexport class TimeBasedVariableResolver {\n    constructor() {\n        this._date = new Date();\n    }\n    static { this.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")]; }\n    static { this.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")]; }\n    static { this.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")]; }\n    static { this.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")]; }\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'CURRENT_YEAR') {\n            return String(this._date.getFullYear());\n        }\n        else if (name === 'CURRENT_YEAR_SHORT') {\n            return String(this._date.getFullYear()).slice(-2);\n        }\n        else if (name === 'CURRENT_MONTH') {\n            return String(this._date.getMonth().valueOf() + 1).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_DATE') {\n            return String(this._date.getDate().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_HOUR') {\n            return String(this._date.getHours().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_MINUTE') {\n            return String(this._date.getMinutes().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_SECOND') {\n            return String(this._date.getSeconds().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_DAY_NAME') {\n            return TimeBasedVariableResolver.dayNames[this._date.getDay()];\n        }\n        else if (name === 'CURRENT_DAY_NAME_SHORT') {\n            return TimeBasedVariableResolver.dayNamesShort[this._date.getDay()];\n        }\n        else if (name === 'CURRENT_MONTH_NAME') {\n            return TimeBasedVariableResolver.monthNames[this._date.getMonth()];\n        }\n        else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n            return TimeBasedVariableResolver.monthNamesShort[this._date.getMonth()];\n        }\n        else if (name === 'CURRENT_SECONDS_UNIX') {\n            return String(Math.floor(this._date.getTime() / 1000));\n        }\n        else if (name === 'CURRENT_TIMEZONE_OFFSET') {\n            const rawTimeOffset = this._date.getTimezoneOffset();\n            const sign = rawTimeOffset > 0 ? '-' : '+';\n            const hours = Math.trunc(Math.abs(rawTimeOffset / 60));\n            const hoursString = (hours < 10 ? '0' + hours : hours);\n            const minutes = Math.abs(rawTimeOffset) - hours * 60;\n            const minutesString = (minutes < 10 ? '0' + minutes : minutes);\n            return sign + hoursString + ':' + minutesString;\n        }\n        return undefined;\n    }\n}\nexport class WorkspaceBasedVariableResolver {\n    constructor(_workspaceService) {\n        this._workspaceService = _workspaceService;\n        //\n    }\n    resolve(variable) {\n        if (!this._workspaceService) {\n            return undefined;\n        }\n        const workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n        if (isEmptyWorkspaceIdentifier(workspaceIdentifier)) {\n            return undefined;\n        }\n        if (variable.name === 'WORKSPACE_NAME') {\n            return this._resolveWorkspaceName(workspaceIdentifier);\n        }\n        else if (variable.name === 'WORKSPACE_FOLDER') {\n            return this._resoveWorkspacePath(workspaceIdentifier);\n        }\n        return undefined;\n    }\n    _resolveWorkspaceName(workspaceIdentifier) {\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n            return path.basename(workspaceIdentifier.uri.path);\n        }\n        let filename = path.basename(workspaceIdentifier.configPath.path);\n        if (filename.endsWith(WORKSPACE_EXTENSION)) {\n            filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n        }\n        return filename;\n    }\n    _resoveWorkspacePath(workspaceIdentifier) {\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n            return normalizeDriveLetter(workspaceIdentifier.uri.fsPath);\n        }\n        const filename = path.basename(workspaceIdentifier.configPath.path);\n        let folderpath = workspaceIdentifier.configPath.fsPath;\n        if (folderpath.endsWith(filename)) {\n            folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\n        }\n        return (folderpath ? normalizeDriveLetter(folderpath) : '/');\n    }\n}\nexport class RandomBasedVariableResolver {\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'RANDOM') {\n            return Math.random().toString().slice(-6);\n        }\n        else if (name === 'RANDOM_HEX') {\n            return Math.random().toString(16).slice(-6);\n        }\n        else if (name === 'UUID') {\n            return generateUuid();\n        }\n        return undefined;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1294, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetSession.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar SnippetSession_1;\nimport { groupBy } from '../../../../base/common/arrays.js';\nimport { dispose } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace } from '../../../../base/common/strings.js';\nimport './snippetSession.css';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { Choice, Placeholder, SnippetParser, Text, TextmateSnippet } from './snippetParser.js';\nimport { ClipboardBasedVariableResolver, CommentBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, RandomBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, WorkspaceBasedVariableResolver } from './snippetVariables.js';\nexport class OneSnippet {\n    static { this._decor = {\n        active: ModelDecorationOptions.register({ description: 'snippet-placeholder-1', stickiness: 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */, className: 'snippet-placeholder' }),\n        inactive: ModelDecorationOptions.register({ description: 'snippet-placeholder-2', stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */, className: 'snippet-placeholder' }),\n        activeFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-3', stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */, className: 'finish-snippet-placeholder' }),\n        inactiveFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-4', stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */, className: 'finish-snippet-placeholder' }),\n    }; }\n    constructor(_editor, _snippet, _snippetLineLeadingWhitespace) {\n        this._editor = _editor;\n        this._snippet = _snippet;\n        this._snippetLineLeadingWhitespace = _snippetLineLeadingWhitespace;\n        this._offset = -1;\n        this._nestingLevel = 1;\n        this._placeholderGroups = groupBy(_snippet.placeholders, Placeholder.compareByIndex);\n        this._placeholderGroupsIdx = -1;\n    }\n    initialize(textChange) {\n        this._offset = textChange.newPosition;\n    }\n    dispose() {\n        if (this._placeholderDecorations) {\n            this._editor.removeDecorations([...this._placeholderDecorations.values()]);\n        }\n        this._placeholderGroups.length = 0;\n    }\n    _initDecorations() {\n        if (this._offset === -1) {\n            throw new Error(`Snippet not initialized!`);\n        }\n        if (this._placeholderDecorations) {\n            // already initialized\n            return;\n        }\n        this._placeholderDecorations = new Map();\n        const model = this._editor.getModel();\n        this._editor.changeDecorations(accessor => {\n            // create a decoration for each placeholder\n            for (const placeholder of this._snippet.placeholders) {\n                const placeholderOffset = this._snippet.offset(placeholder);\n                const placeholderLen = this._snippet.fullLen(placeholder);\n                const range = Range.fromPositions(model.getPositionAt(this._offset + placeholderOffset), model.getPositionAt(this._offset + placeholderOffset + placeholderLen));\n                const options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;\n                const handle = accessor.addDecoration(range, options);\n                this._placeholderDecorations.set(placeholder, handle);\n            }\n        });\n    }\n    move(fwd) {\n        if (!this._editor.hasModel()) {\n            return [];\n        }\n        this._initDecorations();\n        // Transform placeholder text if necessary\n        if (this._placeholderGroupsIdx >= 0) {\n            const operations = [];\n            for (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n                // Check if the placeholder has a transformation\n                if (placeholder.transform) {\n                    const id = this._placeholderDecorations.get(placeholder);\n                    const range = this._editor.getModel().getDecorationRange(id);\n                    const currentValue = this._editor.getModel().getValueInRange(range);\n                    const transformedValueLines = placeholder.transform.resolve(currentValue).split(/\\r\\n|\\r|\\n/);\n                    // fix indentation for transformed lines\n                    for (let i = 1; i < transformedValueLines.length; i++) {\n                        transformedValueLines[i] = this._editor.getModel().normalizeIndentation(this._snippetLineLeadingWhitespace + transformedValueLines[i]);\n                    }\n                    operations.push(EditOperation.replace(range, transformedValueLines.join(this._editor.getModel().getEOL())));\n                }\n            }\n            if (operations.length > 0) {\n                this._editor.executeEdits('snippet.placeholderTransform', operations);\n            }\n        }\n        let couldSkipThisPlaceholder = false;\n        if (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {\n            this._placeholderGroupsIdx += 1;\n            couldSkipThisPlaceholder = true;\n        }\n        else if (fwd === false && this._placeholderGroupsIdx > 0) {\n            this._placeholderGroupsIdx -= 1;\n            couldSkipThisPlaceholder = true;\n        }\n        else {\n            // the selection of the current placeholder might\n            // not acurate any more -> simply restore it\n        }\n        const newSelections = this._editor.getModel().changeDecorations(accessor => {\n            const activePlaceholders = new Set();\n            // change stickiness to always grow when typing at its edges\n            // because these decorations represent the currently active\n            // tabstop.\n            // Special case #1: reaching the final tabstop\n            // Special case #2: placeholders enclosing active placeholders\n            const selections = [];\n            for (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n                const id = this._placeholderDecorations.get(placeholder);\n                const range = this._editor.getModel().getDecorationRange(id);\n                selections.push(new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));\n                // consider to skip this placeholder index when the decoration\n                // range is empty but when the placeholder wasn't. that's a strong\n                // hint that the placeholder has been deleted. (all placeholder must match this)\n                couldSkipThisPlaceholder = couldSkipThisPlaceholder && this._hasPlaceholderBeenCollapsed(placeholder);\n                accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n                activePlaceholders.add(placeholder);\n                for (const enclosingPlaceholder of this._snippet.enclosingPlaceholders(placeholder)) {\n                    const id = this._placeholderDecorations.get(enclosingPlaceholder);\n                    accessor.changeDecorationOptions(id, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n                    activePlaceholders.add(enclosingPlaceholder);\n                }\n            }\n            // change stickness to never grow when typing at its edges\n            // so that in-active tabstops never grow\n            for (const [placeholder, id] of this._placeholderDecorations) {\n                if (!activePlaceholders.has(placeholder)) {\n                    accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);\n                }\n            }\n            return selections;\n        });\n        return !couldSkipThisPlaceholder ? newSelections ?? [] : this.move(fwd);\n    }\n    _hasPlaceholderBeenCollapsed(placeholder) {\n        // A placeholder is empty when it wasn't empty when authored but\n        // when its tracking decoration is empty. This also applies to all\n        // potential parent placeholders\n        let marker = placeholder;\n        while (marker) {\n            if (marker instanceof Placeholder) {\n                const id = this._placeholderDecorations.get(marker);\n                const range = this._editor.getModel().getDecorationRange(id);\n                if (range.isEmpty() && marker.toString().length > 0) {\n                    return true;\n                }\n            }\n            marker = marker.parent;\n        }\n        return false;\n    }\n    get isAtFirstPlaceholder() {\n        return this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;\n    }\n    get isAtLastPlaceholder() {\n        return this._placeholderGroupsIdx === this._placeholderGroups.length - 1;\n    }\n    get hasPlaceholder() {\n        return this._snippet.placeholders.length > 0;\n    }\n    /**\n     * A snippet is trivial when it has no placeholder or only a final placeholder at\n     * its very end\n     */\n    get isTrivialSnippet() {\n        if (this._snippet.placeholders.length === 0) {\n            return true;\n        }\n        if (this._snippet.placeholders.length === 1) {\n            const [placeholder] = this._snippet.placeholders;\n            if (placeholder.isFinalTabstop) {\n                if (this._snippet.rightMostDescendant === placeholder) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    computePossibleSelections() {\n        const result = new Map();\n        for (const placeholdersWithEqualIndex of this._placeholderGroups) {\n            let ranges;\n            for (const placeholder of placeholdersWithEqualIndex) {\n                if (placeholder.isFinalTabstop) {\n                    // ignore those\n                    break;\n                }\n                if (!ranges) {\n                    ranges = [];\n                    result.set(placeholder.index, ranges);\n                }\n                const id = this._placeholderDecorations.get(placeholder);\n                const range = this._editor.getModel().getDecorationRange(id);\n                if (!range) {\n                    // one of the placeholder lost its decoration and\n                    // therefore we bail out and pretend the placeholder\n                    // (with its mirrors) doesn't exist anymore.\n                    result.delete(placeholder.index);\n                    break;\n                }\n                ranges.push(range);\n            }\n        }\n        return result;\n    }\n    get activeChoice() {\n        if (!this._placeholderDecorations) {\n            return undefined;\n        }\n        const placeholder = this._placeholderGroups[this._placeholderGroupsIdx][0];\n        if (!placeholder?.choice) {\n            return undefined;\n        }\n        const id = this._placeholderDecorations.get(placeholder);\n        if (!id) {\n            return undefined;\n        }\n        const range = this._editor.getModel().getDecorationRange(id);\n        if (!range) {\n            return undefined;\n        }\n        return { range, choice: placeholder.choice };\n    }\n    get hasChoice() {\n        let result = false;\n        this._snippet.walk(marker => {\n            result = marker instanceof Choice;\n            return !result;\n        });\n        return result;\n    }\n    merge(others) {\n        const model = this._editor.getModel();\n        this._nestingLevel *= 10;\n        this._editor.changeDecorations(accessor => {\n            // For each active placeholder take one snippet and merge it\n            // in that the placeholder (can be many for `$1foo$1foo`). Because\n            // everything is sorted by editor selection we can simply remove\n            // elements from the beginning of the array\n            for (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n                const nested = others.shift();\n                console.assert(nested._offset !== -1);\n                console.assert(!nested._placeholderDecorations);\n                // Massage placeholder-indicies of the nested snippet to be\n                // sorted right after the insertion point. This ensures we move\n                // through the placeholders in the correct order\n                const indexLastPlaceholder = nested._snippet.placeholderInfo.last.index;\n                for (const nestedPlaceholder of nested._snippet.placeholderInfo.all) {\n                    if (nestedPlaceholder.isFinalTabstop) {\n                        nestedPlaceholder.index = placeholder.index + ((indexLastPlaceholder + 1) / this._nestingLevel);\n                    }\n                    else {\n                        nestedPlaceholder.index = placeholder.index + (nestedPlaceholder.index / this._nestingLevel);\n                    }\n                }\n                this._snippet.replace(placeholder, nested._snippet.children);\n                // Remove the placeholder at which position are inserting\n                // the snippet and also remove its decoration.\n                const id = this._placeholderDecorations.get(placeholder);\n                accessor.removeDecoration(id);\n                this._placeholderDecorations.delete(placeholder);\n                // For each *new* placeholder we create decoration to monitor\n                // how and if it grows/shrinks.\n                for (const placeholder of nested._snippet.placeholders) {\n                    const placeholderOffset = nested._snippet.offset(placeholder);\n                    const placeholderLen = nested._snippet.fullLen(placeholder);\n                    const range = Range.fromPositions(model.getPositionAt(nested._offset + placeholderOffset), model.getPositionAt(nested._offset + placeholderOffset + placeholderLen));\n                    const handle = accessor.addDecoration(range, OneSnippet._decor.inactive);\n                    this._placeholderDecorations.set(placeholder, handle);\n                }\n            }\n            // Last, re-create the placeholder groups by sorting placeholders by their index.\n            this._placeholderGroups = groupBy(this._snippet.placeholders, Placeholder.compareByIndex);\n        });\n    }\n}\nconst _defaultOptions = {\n    overwriteBefore: 0,\n    overwriteAfter: 0,\n    adjustWhitespace: true,\n    clipboardText: undefined,\n    overtypingCapturer: undefined\n};\nlet SnippetSession = SnippetSession_1 = class SnippetSession {\n    static adjustWhitespace(model, position, adjustIndentation, snippet, filter) {\n        const line = model.getLineContent(position.lineNumber);\n        const lineLeadingWhitespace = getLeadingWhitespace(line, 0, position.column - 1);\n        // the snippet as inserted\n        let snippetTextString;\n        snippet.walk(marker => {\n            // all text elements that are not inside choice\n            if (!(marker instanceof Text) || marker.parent instanceof Choice) {\n                return true;\n            }\n            // check with filter (iff provided)\n            if (filter && !filter.has(marker)) {\n                return true;\n            }\n            const lines = marker.value.split(/\\r\\n|\\r|\\n/);\n            if (adjustIndentation) {\n                // adjust indentation of snippet test\n                // -the snippet-start doesn't get extra-indented (lineLeadingWhitespace), only normalized\n                // -all N+1 lines get extra-indented and normalized\n                // -the text start get extra-indented and normalized when following a linebreak\n                const offset = snippet.offset(marker);\n                if (offset === 0) {\n                    // snippet start\n                    lines[0] = model.normalizeIndentation(lines[0]);\n                }\n                else {\n                    // check if text start is after a linebreak\n                    snippetTextString = snippetTextString ?? snippet.toString();\n                    const prevChar = snippetTextString.charCodeAt(offset - 1);\n                    if (prevChar === 10 /* CharCode.LineFeed */ || prevChar === 13 /* CharCode.CarriageReturn */) {\n                        lines[0] = model.normalizeIndentation(lineLeadingWhitespace + lines[0]);\n                    }\n                }\n                for (let i = 1; i < lines.length; i++) {\n                    lines[i] = model.normalizeIndentation(lineLeadingWhitespace + lines[i]);\n                }\n            }\n            const newValue = lines.join(model.getEOL());\n            if (newValue !== marker.value) {\n                marker.parent.replace(marker, [new Text(newValue)]);\n                snippetTextString = undefined;\n            }\n            return true;\n        });\n        return lineLeadingWhitespace;\n    }\n    static adjustSelection(model, selection, overwriteBefore, overwriteAfter) {\n        if (overwriteBefore !== 0 || overwriteAfter !== 0) {\n            // overwrite[Before|After] is compute using the position, not the whole\n            // selection. therefore we adjust the selection around that position\n            const { positionLineNumber, positionColumn } = selection;\n            const positionColumnBefore = positionColumn - overwriteBefore;\n            const positionColumnAfter = positionColumn + overwriteAfter;\n            const range = model.validateRange({\n                startLineNumber: positionLineNumber,\n                startColumn: positionColumnBefore,\n                endLineNumber: positionLineNumber,\n                endColumn: positionColumnAfter\n            });\n            selection = Selection.createWithDirection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn, selection.getDirection());\n        }\n        return selection;\n    }\n    static createEditsAndSnippetsFromSelections(editor, template, overwriteBefore, overwriteAfter, enforceFinalTabstop, adjustWhitespace, clipboardText, overtypingCapturer, languageConfigurationService) {\n        const edits = [];\n        const snippets = [];\n        if (!editor.hasModel()) {\n            return { edits, snippets };\n        }\n        const model = editor.getModel();\n        const workspaceService = editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService));\n        const modelBasedVariableResolver = editor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model));\n        const readClipboardText = () => clipboardText;\n        // know what text the overwrite[Before|After] extensions\n        // of the primary curser have selected because only when\n        // secondary selections extend to the same text we can grow them\n        const firstBeforeText = model.getValueInRange(SnippetSession_1.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));\n        const firstAfterText = model.getValueInRange(SnippetSession_1.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));\n        // remember the first non-whitespace column to decide if\n        // `keepWhitespace` should be overruled for secondary selections\n        const firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);\n        // sort selections by their start position but remeber\n        // the original index. that allows you to create correct\n        // offset-based selection logic without changing the\n        // primary selection\n        const indexedSelections = editor.getSelections()\n            .map((selection, idx) => ({ selection, idx }))\n            .sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n        for (const { selection, idx } of indexedSelections) {\n            // extend selection with the `overwriteBefore` and `overwriteAfter` and then\n            // compare if this matches the extensions of the primary selection\n            let extensionBefore = SnippetSession_1.adjustSelection(model, selection, overwriteBefore, 0);\n            let extensionAfter = SnippetSession_1.adjustSelection(model, selection, 0, overwriteAfter);\n            if (firstBeforeText !== model.getValueInRange(extensionBefore)) {\n                extensionBefore = selection;\n            }\n            if (firstAfterText !== model.getValueInRange(extensionAfter)) {\n                extensionAfter = selection;\n            }\n            // merge the before and after selection into one\n            const snippetSelection = selection\n                .setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn)\n                .setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);\n            const snippet = new SnippetParser().parse(template, true, enforceFinalTabstop);\n            // adjust the template string to match the indentation and\n            // whitespace rules of this insert location (can be different for each cursor)\n            // happens when being asked for (default) or when this is a secondary\n            // cursor and the leading whitespace is different\n            const start = snippetSelection.getStartPosition();\n            const snippetLineLeadingWhitespace = SnippetSession_1.adjustWhitespace(model, start, adjustWhitespace || (idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber)), snippet);\n            snippet.resolveVariables(new CompositeSnippetVariableResolver([\n                modelBasedVariableResolver,\n                new ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(79 /* EditorOption.multiCursorPaste */) === 'spread'),\n                new SelectionBasedVariableResolver(model, selection, idx, overtypingCapturer),\n                new CommentBasedVariableResolver(model, selection, languageConfigurationService),\n                new TimeBasedVariableResolver,\n                new WorkspaceBasedVariableResolver(workspaceService),\n                new RandomBasedVariableResolver,\n            ]));\n            // store snippets with the index of their originating selection.\n            // that ensures the primiary cursor stays primary despite not being\n            // the one with lowest start position\n            edits[idx] = EditOperation.replace(snippetSelection, snippet.toString());\n            edits[idx].identifier = { major: idx, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n            edits[idx]._isTracked = true;\n            snippets[idx] = new OneSnippet(editor, snippet, snippetLineLeadingWhitespace);\n        }\n        return { edits, snippets };\n    }\n    static createEditsAndSnippetsFromEdits(editor, snippetEdits, enforceFinalTabstop, adjustWhitespace, clipboardText, overtypingCapturer, languageConfigurationService) {\n        if (!editor.hasModel() || snippetEdits.length === 0) {\n            return { edits: [], snippets: [] };\n        }\n        const edits = [];\n        const model = editor.getModel();\n        const parser = new SnippetParser();\n        const snippet = new TextmateSnippet();\n        // snippet variables resolver\n        const resolver = new CompositeSnippetVariableResolver([\n            editor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model)),\n            new ClipboardBasedVariableResolver(() => clipboardText, 0, editor.getSelections().length, editor.getOption(79 /* EditorOption.multiCursorPaste */) === 'spread'),\n            new SelectionBasedVariableResolver(model, editor.getSelection(), 0, overtypingCapturer),\n            new CommentBasedVariableResolver(model, editor.getSelection(), languageConfigurationService),\n            new TimeBasedVariableResolver,\n            new WorkspaceBasedVariableResolver(editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService))),\n            new RandomBasedVariableResolver,\n        ]);\n        //\n        snippetEdits = snippetEdits.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n        let offset = 0;\n        for (let i = 0; i < snippetEdits.length; i++) {\n            const { range, template } = snippetEdits[i];\n            // gaps between snippet edits are appended as text nodes. this\n            // ensures placeholder-offsets are later correct\n            if (i > 0) {\n                const lastRange = snippetEdits[i - 1].range;\n                const textRange = Range.fromPositions(lastRange.getEndPosition(), range.getStartPosition());\n                const textNode = new Text(model.getValueInRange(textRange));\n                snippet.appendChild(textNode);\n                offset += textNode.value.length;\n            }\n            const newNodes = parser.parseFragment(template, snippet);\n            SnippetSession_1.adjustWhitespace(model, range.getStartPosition(), true, snippet, new Set(newNodes));\n            snippet.resolveVariables(resolver);\n            const snippetText = snippet.toString();\n            const snippetFragmentText = snippetText.slice(offset);\n            offset = snippetText.length;\n            // make edit\n            const edit = EditOperation.replace(range, snippetFragmentText);\n            edit.identifier = { major: i, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n            edit._isTracked = true;\n            edits.push(edit);\n        }\n        //\n        parser.ensureFinalTabstop(snippet, enforceFinalTabstop, true);\n        return {\n            edits,\n            snippets: [new OneSnippet(editor, snippet, '')]\n        };\n    }\n    constructor(_editor, _template, _options = _defaultOptions, _languageConfigurationService) {\n        this._editor = _editor;\n        this._template = _template;\n        this._options = _options;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._templateMerges = [];\n        this._snippets = [];\n    }\n    dispose() {\n        dispose(this._snippets);\n    }\n    _logInfo() {\n        return `template=\"${this._template}\", merged_templates=\"${this._templateMerges.join(' -> ')}\"`;\n    }\n    insert() {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        // make insert edit and start with first selections\n        const { edits, snippets } = typeof this._template === 'string'\n            ? SnippetSession_1.createEditsAndSnippetsFromSelections(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService)\n            : SnippetSession_1.createEditsAndSnippetsFromEdits(this._editor, this._template, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService);\n        this._snippets = snippets;\n        this._editor.executeEdits('snippet', edits, _undoEdits => {\n            // Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n            // so we need to look only at the undo edits relevant for us.\n            // Our edits have an identifier set so that's how we can distinguish them\n            const undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n            for (let idx = 0; idx < snippets.length; idx++) {\n                snippets[idx].initialize(undoEdits[idx].textChange);\n            }\n            if (this._snippets[0].hasPlaceholder) {\n                return this._move(true);\n            }\n            else {\n                return undoEdits\n                    .map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n            }\n        });\n        this._editor.revealRange(this._editor.getSelections()[0]);\n    }\n    merge(template, options = _defaultOptions) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        this._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);\n        const { edits, snippets } = SnippetSession_1.createEditsAndSnippetsFromSelections(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText, options.overtypingCapturer, this._languageConfigurationService);\n        this._editor.executeEdits('snippet', edits, _undoEdits => {\n            // Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n            // so we need to look only at the undo edits relevant for us.\n            // Our edits have an identifier set so that's how we can distinguish them\n            const undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n            for (let idx = 0; idx < snippets.length; idx++) {\n                snippets[idx].initialize(undoEdits[idx].textChange);\n            }\n            // Trivial snippets have no placeholder or are just the final placeholder. That means they\n            // are just text insertions and we don't need to merge the nested snippet into the existing\n            // snippet\n            const isTrivialSnippet = snippets[0].isTrivialSnippet;\n            if (!isTrivialSnippet) {\n                for (const snippet of this._snippets) {\n                    snippet.merge(snippets);\n                }\n                console.assert(snippets.length === 0);\n            }\n            if (this._snippets[0].hasPlaceholder && !isTrivialSnippet) {\n                return this._move(undefined);\n            }\n            else {\n                return undoEdits.map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n            }\n        });\n    }\n    next() {\n        const newSelections = this._move(true);\n        this._editor.setSelections(newSelections);\n        this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n    }\n    prev() {\n        const newSelections = this._move(false);\n        this._editor.setSelections(newSelections);\n        this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n    }\n    _move(fwd) {\n        const selections = [];\n        for (const snippet of this._snippets) {\n            const oneSelection = snippet.move(fwd);\n            selections.push(...oneSelection);\n        }\n        return selections;\n    }\n    get isAtFirstPlaceholder() {\n        return this._snippets[0].isAtFirstPlaceholder;\n    }\n    get isAtLastPlaceholder() {\n        return this._snippets[0].isAtLastPlaceholder;\n    }\n    get hasPlaceholder() {\n        return this._snippets[0].hasPlaceholder;\n    }\n    get hasChoice() {\n        return this._snippets[0].hasChoice;\n    }\n    get activeChoice() {\n        return this._snippets[0].activeChoice;\n    }\n    isSelectionWithinPlaceholders() {\n        if (!this.hasPlaceholder) {\n            return false;\n        }\n        const selections = this._editor.getSelections();\n        if (selections.length < this._snippets.length) {\n            // this means we started snippet mode with N\n            // selections and have M (N > M) selections.\n            // So one snippet is without selection -> cancel\n            return false;\n        }\n        const allPossibleSelections = new Map();\n        for (const snippet of this._snippets) {\n            const possibleSelections = snippet.computePossibleSelections();\n            // for the first snippet find the placeholder (and its ranges)\n            // that contain at least one selection. for all remaining snippets\n            // the same placeholder (and their ranges) must be used.\n            if (allPossibleSelections.size === 0) {\n                for (const [index, ranges] of possibleSelections) {\n                    ranges.sort(Range.compareRangesUsingStarts);\n                    for (const selection of selections) {\n                        if (ranges[0].containsRange(selection)) {\n                            allPossibleSelections.set(index, []);\n                            break;\n                        }\n                    }\n                }\n            }\n            if (allPossibleSelections.size === 0) {\n                // return false if we couldn't associate a selection to\n                // this (the first) snippet\n                return false;\n            }\n            // add selections from 'this' snippet so that we know all\n            // selections for this placeholder\n            allPossibleSelections.forEach((array, index) => {\n                array.push(...possibleSelections.get(index));\n            });\n        }\n        // sort selections (and later placeholder-ranges). then walk both\n        // arrays and make sure the placeholder-ranges contain the corresponding\n        // selection\n        selections.sort(Range.compareRangesUsingStarts);\n        for (const [index, ranges] of allPossibleSelections) {\n            if (ranges.length !== selections.length) {\n                allPossibleSelections.delete(index);\n                continue;\n            }\n            ranges.sort(Range.compareRangesUsingStarts);\n            for (let i = 0; i < ranges.length; i++) {\n                if (!ranges[i].containsRange(selections[i])) {\n                    allPossibleSelections.delete(index);\n                    continue;\n                }\n            }\n        }\n        // from all possible selections we have deleted those\n        // that don't match with the current selection. if we don't\n        // have any left, we don't have a selection anymore\n        return allPossibleSelections.size > 0;\n    }\n};\nSnippetSession = SnippetSession_1 = __decorate([\n    __param(3, ILanguageConfigurationService)\n], SnippetSession);\nexport { SnippetSession };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2001, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetController2.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar SnippetController2_1;\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { EditorCommand, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { showSimpleSuggestions } from '../../suggest/browser/suggest.js';\nimport { localize } from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { SnippetSession } from './snippetSession.js';\nconst _defaultOptions = {\n    overwriteBefore: 0,\n    overwriteAfter: 0,\n    undoStopBefore: true,\n    undoStopAfter: true,\n    adjustWhitespace: true,\n    clipboardText: undefined,\n    overtypingCapturer: undefined\n};\nlet SnippetController2 = class SnippetController2 {\n    static { SnippetController2_1 = this; }\n    static { this.ID = 'snippetController2'; }\n    static get(editor) {\n        return editor.getContribution(SnippetController2_1.ID);\n    }\n    static { this.InSnippetMode = new RawContextKey('inSnippetMode', false, localize('inSnippetMode', \"Whether the editor in current in snippet mode\")); }\n    static { this.HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('hasNextTabstop', \"Whether there is a next tab stop when in snippet mode\")); }\n    static { this.HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('hasPrevTabstop', \"Whether there is a previous tab stop when in snippet mode\")); }\n    constructor(_editor, _logService, _languageFeaturesService, contextKeyService, _languageConfigurationService) {\n        this._editor = _editor;\n        this._logService = _logService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._snippetListener = new DisposableStore();\n        this._modelVersionId = -1;\n        this._inSnippet = SnippetController2_1.InSnippetMode.bindTo(contextKeyService);\n        this._hasNextTabstop = SnippetController2_1.HasNextTabstop.bindTo(contextKeyService);\n        this._hasPrevTabstop = SnippetController2_1.HasPrevTabstop.bindTo(contextKeyService);\n    }\n    dispose() {\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        this._session?.dispose();\n        this._snippetListener.dispose();\n    }\n    insert(template, opts) {\n        // this is here to find out more about the yet-not-understood\n        // error that sometimes happens when we fail to inserted a nested\n        // snippet\n        try {\n            this._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : { ..._defaultOptions, ...opts });\n        }\n        catch (e) {\n            this.cancel();\n            this._logService.error(e);\n            this._logService.error('snippet_error');\n            this._logService.error('insert_template=', template);\n            this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n        }\n    }\n    _doInsert(template, opts) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        // don't listen while inserting the snippet\n        // as that is the inflight state causing cancelation\n        this._snippetListener.clear();\n        if (opts.undoStopBefore) {\n            this._editor.getModel().pushStackElement();\n        }\n        // don't merge\n        if (this._session && typeof template !== 'string') {\n            this.cancel();\n        }\n        if (!this._session) {\n            this._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n            this._session = new SnippetSession(this._editor, template, opts, this._languageConfigurationService);\n            this._session.insert();\n        }\n        else {\n            assertType(typeof template === 'string');\n            this._session.merge(template, opts);\n        }\n        if (opts.undoStopAfter) {\n            this._editor.getModel().pushStackElement();\n        }\n        // regster completion item provider when there is any choice element\n        if (this._session?.hasChoice) {\n            const provider = {\n                _debugDisplayName: 'snippetChoiceCompletions',\n                provideCompletionItems: (model, position) => {\n                    if (!this._session || model !== this._editor.getModel() || !Position.equals(this._editor.getPosition(), position)) {\n                        return undefined;\n                    }\n                    const { activeChoice } = this._session;\n                    if (!activeChoice || activeChoice.choice.options.length === 0) {\n                        return undefined;\n                    }\n                    const word = model.getValueInRange(activeChoice.range);\n                    const isAnyOfOptions = Boolean(activeChoice.choice.options.find(o => o.value === word));\n                    const suggestions = [];\n                    for (let i = 0; i < activeChoice.choice.options.length; i++) {\n                        const option = activeChoice.choice.options[i];\n                        suggestions.push({\n                            kind: 13 /* CompletionItemKind.Value */,\n                            label: option.value,\n                            insertText: option.value,\n                            sortText: 'a'.repeat(i + 1),\n                            range: activeChoice.range,\n                            filterText: isAnyOfOptions ? `${word}_${option.value}` : undefined,\n                            command: { id: 'jumpToNextSnippetPlaceholder', title: localize('next', 'Go to next placeholder...') }\n                        });\n                    }\n                    return { suggestions };\n                }\n            };\n            const model = this._editor.getModel();\n            let registration;\n            let isRegistered = false;\n            const disable = () => {\n                registration?.dispose();\n                isRegistered = false;\n            };\n            const enable = () => {\n                if (!isRegistered) {\n                    registration = this._languageFeaturesService.completionProvider.register({\n                        language: model.getLanguageId(),\n                        pattern: model.uri.fsPath,\n                        scheme: model.uri.scheme,\n                        exclusive: true\n                    }, provider);\n                    this._snippetListener.add(registration);\n                    isRegistered = true;\n                }\n            };\n            this._choiceCompletions = { provider, enable, disable };\n        }\n        this._updateState();\n        this._snippetListener.add(this._editor.onDidChangeModelContent(e => e.isFlush && this.cancel()));\n        this._snippetListener.add(this._editor.onDidChangeModel(() => this.cancel()));\n        this._snippetListener.add(this._editor.onDidChangeCursorSelection(() => this._updateState()));\n    }\n    _updateState() {\n        if (!this._session || !this._editor.hasModel()) {\n            // canceled in the meanwhile\n            return;\n        }\n        if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n            // undo until the 'before' state happened\n            // and makes use cancel snippet mode\n            return this.cancel();\n        }\n        if (!this._session.hasPlaceholder) {\n            // don't listen for selection changes and don't\n            // update context keys when the snippet is plain text\n            return this.cancel();\n        }\n        if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n            this._editor.getModel().pushStackElement();\n            return this.cancel();\n        }\n        this._inSnippet.set(true);\n        this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n        this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n        this._handleChoice();\n    }\n    _handleChoice() {\n        if (!this._session || !this._editor.hasModel()) {\n            this._currentChoice = undefined;\n            return;\n        }\n        const { activeChoice } = this._session;\n        if (!activeChoice || !this._choiceCompletions) {\n            this._choiceCompletions?.disable();\n            this._currentChoice = undefined;\n            return;\n        }\n        if (this._currentChoice !== activeChoice.choice) {\n            this._currentChoice = activeChoice.choice;\n            this._choiceCompletions.enable();\n            // trigger suggest with the special choice completion provider\n            queueMicrotask(() => {\n                showSimpleSuggestions(this._editor, this._choiceCompletions.provider);\n            });\n        }\n    }\n    finish() {\n        while (this._inSnippet.get()) {\n            this.next();\n        }\n    }\n    cancel(resetSelection = false) {\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        this._snippetListener.clear();\n        this._currentChoice = undefined;\n        this._session?.dispose();\n        this._session = undefined;\n        this._modelVersionId = -1;\n        if (resetSelection) {\n            // reset selection to the primary cursor when being asked\n            // for. this happens when explicitly cancelling snippet mode,\n            // e.g. when pressing ESC\n            this._editor.setSelections([this._editor.getSelection()]);\n        }\n    }\n    prev() {\n        this._session?.prev();\n        this._updateState();\n    }\n    next() {\n        this._session?.next();\n        this._updateState();\n    }\n    isInSnippet() {\n        return Boolean(this._inSnippet.get());\n    }\n};\nSnippetController2 = SnippetController2_1 = __decorate([\n    __param(1, ILogService),\n    __param(2, ILanguageFeaturesService),\n    __param(3, IContextKeyService),\n    __param(4, ILanguageConfigurationService)\n], SnippetController2);\nexport { SnippetController2 };\nregisterEditorContribution(SnippetController2.ID, SnippetController2, 4 /* EditorContributionInstantiation.Lazy */);\nconst CommandCtor = EditorCommand.bindToContribution(SnippetController2.get);\nregisterEditorCommand(new CommandCtor({\n    id: 'jumpToNextSnippetPlaceholder',\n    precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n    handler: ctrl => ctrl.next(),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2 /* KeyCode.Tab */\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'jumpToPrevSnippetPlaceholder',\n    precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n    handler: ctrl => ctrl.prev(),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'leaveSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: ctrl => ctrl.cancel(true),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 9 /* KeyCode.Escape */,\n        secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'acceptSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: ctrl => ctrl.finish(),\n    // kbOpts: {\n    // \tweight: KeybindingWeight.EditorContrib + 30,\n    // \tkbExpr: EditorContextKeys.textFocus,\n    // \tprimary: KeyCode.Enter,\n    // }\n}));\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}