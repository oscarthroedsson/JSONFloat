{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/base/parts/storage/common/storage.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ThrottledDelayer } from '../../../common/async.js';\nimport { Event, PauseableEmitter } from '../../../common/event.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { stringify } from '../../../common/marshalling.js';\nimport { isObject, isUndefinedOrNull } from '../../../common/types.js';\nexport var StorageHint;\n(function (StorageHint) {\n    // A hint to the storage that the storage\n    // does not exist on disk yet. This allows\n    // the storage library to improve startup\n    // time by not checking the storage for data.\n    StorageHint[StorageHint[\"STORAGE_DOES_NOT_EXIST\"] = 0] = \"STORAGE_DOES_NOT_EXIST\";\n    // A hint to the storage that the storage\n    // is backed by an in-memory storage.\n    StorageHint[StorageHint[\"STORAGE_IN_MEMORY\"] = 1] = \"STORAGE_IN_MEMORY\";\n})(StorageHint || (StorageHint = {}));\nexport var StorageState;\n(function (StorageState) {\n    StorageState[StorageState[\"None\"] = 0] = \"None\";\n    StorageState[StorageState[\"Initialized\"] = 1] = \"Initialized\";\n    StorageState[StorageState[\"Closed\"] = 2] = \"Closed\";\n})(StorageState || (StorageState = {}));\nexport class Storage extends Disposable {\n    static { this.DEFAULT_FLUSH_DELAY = 100; }\n    constructor(database, options = Object.create(null)) {\n        super();\n        this.database = database;\n        this.options = options;\n        this._onDidChangeStorage = this._register(new PauseableEmitter());\n        this.onDidChangeStorage = this._onDidChangeStorage.event;\n        this.state = StorageState.None;\n        this.cache = new Map();\n        this.flushDelayer = this._register(new ThrottledDelayer(Storage.DEFAULT_FLUSH_DELAY));\n        this.pendingDeletes = new Set();\n        this.pendingInserts = new Map();\n        this.whenFlushedCallbacks = [];\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.database.onDidChangeItemsExternal(e => this.onDidChangeItemsExternal(e)));\n    }\n    onDidChangeItemsExternal(e) {\n        this._onDidChangeStorage.pause();\n        try {\n            // items that change external require us to update our\n            // caches with the values. we just accept the value and\n            // emit an event if there is a change.\n            e.changed?.forEach((value, key) => this.acceptExternal(key, value));\n            e.deleted?.forEach(key => this.acceptExternal(key, undefined));\n        }\n        finally {\n            this._onDidChangeStorage.resume();\n        }\n    }\n    acceptExternal(key, value) {\n        if (this.state === StorageState.Closed) {\n            return; // Return early if we are already closed\n        }\n        let changed = false;\n        // Item got removed, check for deletion\n        if (isUndefinedOrNull(value)) {\n            changed = this.cache.delete(key);\n        }\n        // Item got updated, check for change\n        else {\n            const currentValue = this.cache.get(key);\n            if (currentValue !== value) {\n                this.cache.set(key, value);\n                changed = true;\n            }\n        }\n        // Signal to outside listeners\n        if (changed) {\n            this._onDidChangeStorage.fire({ key, external: true });\n        }\n    }\n    get(key, fallbackValue) {\n        const value = this.cache.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return value;\n    }\n    getBoolean(key, fallbackValue) {\n        const value = this.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return value === 'true';\n    }\n    getNumber(key, fallbackValue) {\n        const value = this.get(key);\n        if (isUndefinedOrNull(value)) {\n            return fallbackValue;\n        }\n        return parseInt(value, 10);\n    }\n    async set(key, value, external = false) {\n        if (this.state === StorageState.Closed) {\n            return; // Return early if we are already closed\n        }\n        // We remove the key for undefined/null values\n        if (isUndefinedOrNull(value)) {\n            return this.delete(key, external);\n        }\n        // Otherwise, convert to String and store\n        const valueStr = isObject(value) || Array.isArray(value) ? stringify(value) : String(value);\n        // Return early if value already set\n        const currentValue = this.cache.get(key);\n        if (currentValue === valueStr) {\n            return;\n        }\n        // Update in cache and pending\n        this.cache.set(key, valueStr);\n        this.pendingInserts.set(key, valueStr);\n        this.pendingDeletes.delete(key);\n        // Event\n        this._onDidChangeStorage.fire({ key, external });\n        // Accumulate work by scheduling after timeout\n        return this.doFlush();\n    }\n    async delete(key, external = false) {\n        if (this.state === StorageState.Closed) {\n            return; // Return early if we are already closed\n        }\n        // Remove from cache and add to pending\n        const wasDeleted = this.cache.delete(key);\n        if (!wasDeleted) {\n            return; // Return early if value already deleted\n        }\n        if (!this.pendingDeletes.has(key)) {\n            this.pendingDeletes.add(key);\n        }\n        this.pendingInserts.delete(key);\n        // Event\n        this._onDidChangeStorage.fire({ key, external });\n        // Accumulate work by scheduling after timeout\n        return this.doFlush();\n    }\n    get hasPending() {\n        return this.pendingInserts.size > 0 || this.pendingDeletes.size > 0;\n    }\n    async flushPending() {\n        if (!this.hasPending) {\n            return; // return early if nothing to do\n        }\n        // Get pending data\n        const updateRequest = { insert: this.pendingInserts, delete: this.pendingDeletes };\n        // Reset pending data for next run\n        this.pendingDeletes = new Set();\n        this.pendingInserts = new Map();\n        // Update in storage and release any\n        // waiters we have once done\n        return this.database.updateItems(updateRequest).finally(() => {\n            if (!this.hasPending) {\n                while (this.whenFlushedCallbacks.length) {\n                    this.whenFlushedCallbacks.pop()?.();\n                }\n            }\n        });\n    }\n    async doFlush(delay) {\n        if (this.options.hint === StorageHint.STORAGE_IN_MEMORY) {\n            return this.flushPending(); // return early if in-memory\n        }\n        return this.flushDelayer.trigger(() => this.flushPending(), delay);\n    }\n}\nexport class InMemoryStorageDatabase {\n    constructor() {\n        this.onDidChangeItemsExternal = Event.None;\n        this.items = new Map();\n    }\n    async updateItems(request) {\n        request.insert?.forEach((value, key) => this.items.set(key, value));\n        request.delete?.forEach(key => this.items.delete(key));\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}