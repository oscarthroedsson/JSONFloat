{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/types.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/layout/utils.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/layout/elkLayout.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/layout/useLayout.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/utils/useEdgeDrag.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/utils/useZoom.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/utils/CanvasProvider.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/utils/helpers.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/utils/useNodeDrag.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/symbols/Port/Port.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/symbols/Label/Label.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/symbols/Remove/Remove.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/symbols/Edge/utils.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/symbols/Add/Add.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/symbols/Edge/Edge.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/symbols/Node/Node.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/symbols/Arrow/Arrow.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/symbols/Arrow/MarkerArrow.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/Canvas.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/symbols/Icon/Icon.tsx","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/helpers/crudHelpers.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/helpers/useSelection.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/helpers/useUndo.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/helpers/useProximity.ts","file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/reaflow/src/helpers/graphHelpers.ts"],"sourcesContent":["import { ElkNodeLayoutOptions } from './layout';\n\nexport enum CanvasPosition {\n  CENTER = 'center',\n  TOP = 'top',\n  LEFT = 'left',\n  RIGHT = 'right',\n  BOTTOM = 'bottom'\n}\n\nexport interface NodeData<T = any> {\n  /**\n   * Unique ID for the node.\n   */\n  id: string;\n\n  /**\n   * Whether the node is disabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Text label for the node.\n   */\n  text?: any;\n\n  /**\n   * Optional height attribute. If not passed with calculate\n   * default sizes using text.\n   */\n  height?: number;\n\n  /**\n   * Optional width attribute. If not passed with calculate\n   * default sizes using text.\n   */\n  width?: number;\n\n  /**\n   * Parent node id for nesting.\n   */\n  parent?: string;\n\n  /**\n   * List of ports.\n   */\n  ports?: PortData[];\n\n  /**\n   * Icon for the node.\n   */\n  icon?: IconData;\n\n  /**\n   * Padding for the node.\n   */\n  nodePadding?: number | [number, number] | [number, number, number, number];\n\n  /**\n   * Data for the node.\n   */\n  data?: T;\n\n  /**\n   * CSS classname for the node.\n   */\n  className?: string;\n\n  /**\n   * ELK layout options.\n   */\n  layoutOptions?: ElkNodeLayoutOptions;\n\n  /**\n   * Whether the node can be clicked.\n   */\n  selectionDisabled?: boolean;\n}\n\nexport interface LayoutNodeData extends NodeData {\n  x: number;\n  y: number;\n  children?: LayoutNodeData[];\n}\n\nexport interface IconData {\n  /**\n   * URL for the icon.\n   */\n  url: string;\n\n  /**\n   * Height of the icon.\n   */\n  height: number;\n\n  /**\n   * Width of the icon.\n   */\n  width: number;\n}\n\nexport interface EdgeData<T = any> {\n  /**\n   * Unique ID of the edge.\n   */\n  id: string;\n\n  /**\n   * Whether the edge is disabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Text label for the edge.\n   */\n  text?: any;\n\n  /**\n   * ID of the from node.\n   */\n  from?: string;\n\n  /**\n   * ID of the to node.\n   */\n  to?: string;\n\n  /**\n   * Optional ID of the from port.\n   */\n  fromPort?: string;\n\n  /**\n   * Optional ID of the to port.\n   */\n  toPort?: string;\n\n  /**\n   * Data about the edge.\n   */\n  data?: T;\n\n  /**\n   * CSS class name for the edge (\"path\" element).\n   */\n  className?: string;\n\n  /**\n   * CSS class name for the edge (main \"g\" element).\n   */\n  containerClassName?: string;\n\n  /**\n   * Optional arrow head type.\n   */\n  arrowHeadType?: any;\n\n  /**\n   * Parent of the edge for nesting.\n   */\n  parent?: string;\n\n  /**\n   * Whether the edge can be clicked.\n   */\n  selectionDisabled?: boolean;\n}\n\nexport type PortSide = 'NORTH' | 'SOUTH' | 'EAST' | 'WEST';\n\nexport interface PortData {\n  /**\n   * Unique ID of the port.\n   */\n  id: string;\n\n  /**\n   * Port is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Height of the port.\n   */\n  height: number;\n\n  /**\n   * Width of the port.\n   */\n  width: number;\n\n  /**\n   * Whether the port is visually hidden or not.\n   */\n  hidden?: boolean;\n\n  /**\n   * Classname for the port.\n   */\n  className?: string;\n\n  /**\n   * Alignment of the port.\n   */\n  alignment?: 'CENTER';\n\n  /**\n   * Side the port is located.\n   */\n  side: PortSide;\n}\n","import calculateSize from 'calculate-size';\nimport { LayoutNodeData, NodeData } from '../types';\nimport ellipsize from 'ellipsize';\n\nconst MAX_CHAR_COUNT = 35;\nconst MIN_NODE_WIDTH = 50;\nconst DEFAULT_NODE_HEIGHT = 50;\nconst NODE_PADDING = 30;\nconst ICON_PADDING = 10;\n\nexport function measureText(text: string) {\n  let result = { height: 0, width: 0 };\n\n  if (text) {\n    // Reference: https://github.com/reaviz/reaflow/pull/229\n    // @ts-ignore\n    const fn = typeof calculateSize === 'function' ? calculateSize : calculateSize.default;\n    result = fn(text, {\n      font: 'Arial, sans-serif',\n      fontSize: '14px'\n    });\n  }\n\n  return result;\n}\n\nexport function parsePadding(padding: NodeData['nodePadding']) {\n  let top = 50;\n  let right = 50;\n  let bottom = 50;\n  let left = 50;\n\n  if (Array.isArray(padding)) {\n    if (padding.length === 2) {\n      top = padding[0];\n      bottom = padding[0];\n      left = padding[1];\n      right = padding[1];\n    } else if (padding.length === 4) {\n      top = padding[0];\n      right = padding[1];\n      bottom = padding[2];\n      left = padding[3];\n    }\n  } else if (padding !== undefined) {\n    top = padding;\n    right = padding;\n    bottom = padding;\n    left = padding;\n  }\n\n  return {\n    top,\n    right,\n    bottom,\n    left\n  };\n}\n\nexport function formatText(node: NodeData) {\n  const text = node.text ? ellipsize(node.text, MAX_CHAR_COUNT) : node.text;\n\n  const labelDim = measureText(text);\n  const nodePadding = parsePadding(node.nodePadding);\n\n  let width = node.width;\n  if (width === undefined) {\n    if (text && node.icon) {\n      width = labelDim.width + node.icon.width + NODE_PADDING + ICON_PADDING;\n    } else {\n      if (text) {\n        width = labelDim.width + NODE_PADDING;\n      } else if (node.icon) {\n        width = node.icon.width + NODE_PADDING;\n      }\n\n      width = Math.max(width, MIN_NODE_WIDTH);\n    }\n  }\n\n  let height = node.height;\n  if (height === undefined) {\n    if (text && node.icon) {\n      height = labelDim.height + node.icon.height;\n    } else if (text) {\n      height = labelDim.height + NODE_PADDING;\n    } else if (node.icon) {\n      height = node.icon.height + NODE_PADDING;\n    }\n\n    height = Math.max(height, DEFAULT_NODE_HEIGHT);\n  }\n\n  return {\n    text,\n    originalText: node.text,\n    width,\n    height,\n    nodePadding,\n    labelHeight: labelDim.height,\n    labelWidth: labelDim.width\n  };\n}\n\n/**\n * Finds a node in a tree of nodes\n * @param nodes - The nodes to search through\n * @param nodeId - The id of the node to find\n * @returns The node if found, undefined otherwise\n */\nexport const findNode = (nodes: LayoutNodeData[], nodeId: string): any | undefined => {\n  for (const node of nodes) {\n    if (node.id === nodeId) {\n      return node;\n    }\n    if (node.children) {\n      const foundNode = findNode(node.children, nodeId);\n      if (foundNode) {\n        return foundNode;\n      }\n    }\n  }\n  return undefined;\n};\n\n/**\n * Finds the number of nested children a node has\n * @param node - The node to search through\n * @returns The number of children\n */\nexport const getChildCount = (node: LayoutNodeData): number => {\n  return (\n    node.children?.reduce((acc, child) => {\n      if (child.children) {\n        return acc + 1 + getChildCount(child);\n      }\n      return acc + 1;\n    }, 0) ?? 0\n  );\n};\n\n/**\n * Calculates the zoom for a group of nodes when fitting to the viewport\n * @param nodes - The nodes to calculate the zoom for\n * @param viewportWidth - The width of the viewport\n * @param viewportHeight - The height of the viewport\n * @param maxViewportCoverage - The maximum percentage of the viewport that the node group will take up\n * @param minViewportCoverage - The minimum percentage of the viewport that the node group will take up\n * @returns The zoom\n */\nexport const calculateZoom = ({ nodes, viewportWidth, viewportHeight, maxViewportCoverage = 0.9, minViewportCoverage = 0.2 }: { nodes: LayoutNodeData[]; viewportWidth: number; viewportHeight: number; maxViewportCoverage?: number; minViewportCoverage?: number }) => {\n  const maxChildren = Math.max(\n    0,\n    nodes.map(getChildCount).reduce((acc, curr) => acc + curr, 0)\n  );\n  const boundingBox = getNodesBoundingBox(nodes);\n  const boundingBoxWidth = boundingBox.x1 - boundingBox.x0;\n  const boundingBoxHeight = boundingBox.y1 - boundingBox.y0;\n\n  // calculate the maximum zoom to ensure no single node takes up more than 20% of the viewport\n  const maxNodeWidth = Math.max(...nodes.map((node) => node.width));\n  const maxNodeHeight = Math.max(...nodes.map((node) => node.height));\n  // if a node has children, let it take up an extra 10% per child\n  const maxNodeZoomX = ((0.2 + maxChildren * 0.1) * viewportWidth) / maxNodeWidth;\n  const maxNodeZoomY = ((0.2 + maxChildren * 0.1) * viewportHeight) / maxNodeHeight;\n  const maxNodeZoom = Math.min(maxNodeZoomX, maxNodeZoomY);\n\n  const viewportCoverage = Math.max(Math.min(maxViewportCoverage, maxNodeZoom), minViewportCoverage);\n\n  const updatedHorizontalZoom = (viewportCoverage * viewportWidth) / boundingBoxWidth;\n  const updatedVerticalZoom = (viewportCoverage * viewportHeight) / boundingBoxHeight;\n  const updatedZoom = Math.min(updatedHorizontalZoom, updatedVerticalZoom, maxNodeZoom);\n\n  return updatedZoom;\n};\n\n/**\n * Calculates the scroll position for the canvas when fitting nodes to the viewport - assumes the chart is centered\n * @param nodes - The nodes to calculate the zoom and position for\n * @param viewportWidth - The width of the viewport\n * @param viewportHeight - The height of the viewport\n * @param canvasWidth - The width of the canvas\n * @param canvasHeight - The height of the canvas\n * @param chartWidth - The width of the chart\n * @param chartHeight - The height of the chart\n * @param zoom - The zoom level of the canvas\n * @returns The scroll position\n */\nexport const calculateScrollPosition = ({ nodes, viewportWidth, viewportHeight, canvasWidth, canvasHeight, chartWidth, chartHeight, zoom }: { nodes: LayoutNodeData[]; viewportWidth: number; viewportHeight: number; canvasWidth: number; canvasHeight: number; chartWidth: number; chartHeight: number; zoom: number }): [number, number] => {\n  const { x0, y0, x1, y1 } = getNodesBoundingBox(nodes);\n  const boundingBoxWidth = (x1 - x0) * zoom;\n  const boundingBoxHeight = (y1 - y0) * zoom;\n\n  // the chart is centered so we can assume the x and y positions\n  const chartPosition = {\n    x: (canvasWidth - chartWidth * zoom) / 2,\n    y: (canvasHeight - chartHeight * zoom) / 2\n  };\n\n  const boxXPosition = chartPosition.x + x0 * zoom;\n  const boxYPosition = chartPosition.y + y0 * zoom;\n\n  const boxCenterXPosition = boxXPosition + boundingBoxWidth / 2;\n  const boxCenterYPosition = boxYPosition + boundingBoxHeight / 2;\n\n  // scroll to the spot that centers the node in the viewport\n  const scrollX = boxCenterXPosition - viewportWidth / 2;\n  const scrollY = boxCenterYPosition - viewportHeight / 2;\n\n  return [scrollX, scrollY];\n};\n\n/**\n * Calculates the bounding box of a group of nodes\n * @param nodes - The nodes to calculate the bounding box for\n * @returns The bounding box\n */\nexport const getNodesBoundingBox = (nodes: LayoutNodeData[]) => {\n  return nodes.reduce(\n    (acc, node) => ({\n      x0: Math.min(acc.x0, node.x),\n      y0: Math.min(acc.y0, node.y),\n      x1: Math.max(acc.x1, node.x + node.width),\n      y1: Math.max(acc.y1, node.y + node.height)\n    }),\n    { x0: nodes[0].x, y0: nodes[0].y, x1: nodes[0].x + nodes[0].width, y1: nodes[0].y + nodes[0].height }\n  );\n};\n","import { EdgeData, NodeData } from '../types';\nimport type { ELK, ElkNode } from 'elkjs';\nimport PCancelable from 'p-cancelable';\nimport { formatText, measureText } from './utils';\n\nexport type CanvasDirection = 'LEFT' | 'RIGHT' | 'DOWN' | 'UP';\n\n/**\n * ELKjs layout options for the Canvas.\n *\n * Unfortunately, the ELKjs documentation is not straightforward.\n * You'll likely need to take a look at the ELK options reference to see all available options.\n *\n * @see https://github.com/kieler/elkjs#layout-options\n * @see https://www.eclipse.org/elk/reference/options.html\n */\nexport interface ElkCanvasLayoutOptions {\n  'elk.direction'?: CanvasDirection;\n  [key: string]: string;\n}\n\n/**\n * ELKjs layout option for a node.\n *\n * TODO add reference link, I don't know what are the available options.\n *\n * @see https://www.eclipse.org/elk/reference/options.html\n */\nexport interface ElkNodeLayoutOptions {\n  [key: string]: string;\n\n  /**\n   * @example [left=12, top=12, right=12, bottom=12]\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-padding.html\n   */\n  'elk.padding': string;\n\n  /**\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-portConstraints.html\n   */\n  portConstraints: 'UNDEFINED' | 'FREE' | 'FIXED_SIDE' | 'FIXED_ORDER' | 'FIXED_RATIO' | 'FIXED_POS';\n}\n\n/**\n * ELK layout options applied by default, unless overridden through <Canvas layoutOptions> property.\n *\n * XXX Not to be confounded with ELK \"defaultLayoutOptions\" property, which is meant to be used as fallback, when no layout option is provided.\n *\n * @see https://www.eclipse.org/elk/reference/options.html\n */\nconst defaultLayoutOptions: ElkCanvasLayoutOptions = {\n  /**\n   * Hints for where node labels are to be placed; if empty, the node label’s position is not modified.\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-nodeLabels-placement.html\n   */\n  'elk.nodeLabels.placement': 'INSIDE V_CENTER H_RIGHT',\n\n  /**\n   * Select a specific layout algorithm.\n   *\n   * Uses \"layered\" strategy.\n   * It emphasizes the direction of edges by pointing as many edges as possible into the same direction.\n   * The nodes are arranged in layers, which are sometimes called “hierarchies”,\n   * and then reordered such that the number of edge crossings is minimized.\n   * Afterwards, concrete coordinates are computed for the nodes and edge bend points.\n   *\n   * @see https://www.eclipse.org/elk/reference/algorithms.html\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-algorithm.html\n   * @see https://www.eclipse.org/elk/reference/algorithms/org-eclipse-elk-layered.html\n   */\n  'elk.algorithm': 'org.eclipse.elk.layered',\n\n  /**\n   * Overall direction of edges: horizontal (right / left) or vertical (down / up).\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-direction.html\n   */\n  'elk.direction': 'DOWN',\n\n  /**\n   * The node order given by the model does not change to produce a better layout.\n   * E.g. if node A is before node B in the model this is not changed during crossing minimization.\n   * This assumes that the node model order is already respected before crossing minimization. This\n   * can be achieved by setting considerModelOrder.strategy to NODES_AND_EDGES.\n   *\n   * @see https://eclipse.dev/elk/reference/options/org-eclipse-elk-layered-crossingMinimization-forceNodeModelOrder.html\n   */\n  'layered.crossingMinimization.forceNodeModelOrder': 'true',\n\n  /**\n   * Strategy for node layering.\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-layered-layering-strategy.html\n   */\n  'org.eclipse.elk.layered.layering.strategy': 'INTERACTIVE',\n\n  /**\n   * What kind of edge routing style should be applied for the content of a parent node.\n   * Algorithms may also set this option to single edges in order to mark them as splines.\n   * The bend point list of edges with this option set to SPLINES\n   * must be interpreted as control points for a piecewise cubic spline.\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-edgeRouting.html\n   */\n  'org.eclipse.elk.edgeRouting': 'ORTHOGONAL',\n\n  /**\n   * Adds bend points even if an edge does not change direction.\n   * If true, each long edge dummy will contribute a bend point to its edges\n   * and hierarchy-crossing edges will always get a bend point where they cross hierarchy boundaries.\n   * By default, bend points are only added where an edge changes direction.\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-layered-unnecessaryBendpoints.html\n   */\n  'elk.layered.unnecessaryBendpoints': 'true',\n\n  /**\n   * The spacing to be preserved between nodes and edges that are routed next to the node’s layer.\n   * For the spacing between nodes and edges that cross the node’s layer ‘spacing.edgeNode’ is used.\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-layered-spacing-edgeNodeBetweenLayers.html\n   */\n  'elk.layered.spacing.edgeNodeBetweenLayers': '50',\n\n  /**\n   * Tells the BK node placer to use a certain alignment (out of its four)\n   * instead of the one producing the smallest height, or the combination of all four.\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-layered-nodePlacement-bk-fixedAlignment.html\n   */\n  'org.eclipse.elk.layered.nodePlacement.bk.fixedAlignment': 'BALANCED',\n\n  /**\n   * Strategy for cycle breaking.\n   *\n   * Cycle breaking looks for cycles in the graph and determines which edges to reverse to break the cycles.\n   * Reversed edges will end up pointing to the opposite direction of regular edges\n   * (that is, reversed edges will point left if edges usually point right).\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-layered-cycleBreaking-strategy.html\n   */\n  'org.eclipse.elk.layered.cycleBreaking.strategy': 'DEPTH_FIRST',\n\n  /**\n   * Whether this node allows to route self loops inside of it instead of around it.\n   *\n   * If set to true, this will make the node a compound node if it isn’t already,\n   * and will require the layout algorithm to support compound nodes with hierarchical ports.\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-insideSelfLoops-activate.html\n   */\n  'org.eclipse.elk.insideSelfLoops.activate': 'true',\n\n  /**\n   * Whether each connected component should be processed separately.\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-separateConnectedComponents.html\n   */\n  separateConnectedComponents: 'false',\n\n  /**\n   * Spacing to be preserved between pairs of connected components.\n   * This option is only relevant if ‘separateConnectedComponents’ is activated.\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-spacing-componentComponent.html\n   */\n  'spacing.componentComponent': '70',\n\n  /**\n   * TODO: Should be spacing.baseValue?\n   * An optional base value for all other layout options of the ‘spacing’ group.\n   * It can be used to conveniently alter the overall ‘spaciousness’ of the drawing.\n   * Whenever an explicit value is set for the other layout options, this base value will have no effect.\n   * The base value is not inherited, i.e. it must be set for each hierarchical node.\n   *\n   * @see https://www.eclipse.org/elk/reference/groups/org-eclipse-elk-layered-spacing.html\n   */\n  spacing: '75',\n\n  /**\n   * The spacing to be preserved between any pair of nodes of two adjacent layers.\n   * Note that ‘spacing.nodeNode’ is used for the spacing between nodes within the layer itself.\n   *\n   * @see https://www.eclipse.org/elk/reference/options/org-eclipse-elk-layered-spacing-nodeNodeBetweenLayers.html\n   */\n  'spacing.nodeNodeBetweenLayers': '70'\n};\n\nfunction mapNode(nodes: NodeData[], edges: EdgeData[], node: NodeData) {\n  const { text, width, height, labelHeight, labelWidth, nodePadding, originalText } = formatText(node);\n\n  const children = nodes.filter((n) => n.parent === node.id).map((n) => mapNode(nodes, edges, n));\n\n  const childEdges = edges.filter((e) => e.parent === node.id).map((e) => mapEdge({ edge: e }));\n\n  const nodeLayoutOptions: ElkNodeLayoutOptions = {\n    'elk.padding': `[left=${nodePadding.left}, top=${nodePadding.top}, right=${nodePadding.right}, bottom=${nodePadding.bottom}]`,\n    portConstraints: 'FIXED_ORDER',\n    ...(node.layoutOptions || {})\n  };\n\n  return {\n    id: node.id,\n    height,\n    width,\n    children,\n    edges: childEdges,\n    ports: node.ports\n      ? node.ports.map((port) => ({\n        id: port.id,\n        properties: {\n          ...port,\n          'port.side': port.side,\n          'port.alignment': port.alignment || 'CENTER'\n        }\n      }))\n      : [],\n    layoutOptions: nodeLayoutOptions,\n    properties: {\n      ...node\n    },\n    labels: text\n      ? [\n        {\n          width: labelWidth,\n          height: -(labelHeight / 2),\n          text,\n          originalText\n          // layoutOptions: { 'elk.nodeLabels.placement': 'INSIDE V_CENTER H_CENTER' }\n        }\n      ]\n      : []\n  };\n}\n\nfunction mapEdge({ edge: { data, ...edge }, direction }: { edge: EdgeData; direction?: CanvasDirection }) {\n  const labelDim = measureText(edge.text);\n  const validEdgeData = data ? { data } : {};\n  let labelWidth = labelDim.width / 2;\n\n  if (direction === 'LEFT' || direction === 'RIGHT') {\n    labelWidth = labelDim.width;\n  }\n\n  return {\n    id: edge.id,\n    source: edge.from,\n    target: edge.to,\n    properties: {\n      ...edge\n    },\n    ...validEdgeData,\n    sourcePort: edge.fromPort,\n    targetPort: edge.toPort,\n    labels: edge.text\n      ? [\n        {\n          width: labelWidth,\n          height: -(labelDim.height / 2),\n          text: edge.text,\n          layoutOptions: {\n            'elk.edgeLabels.placement': 'INSIDE V_CENTER H_CENTER'\n          }\n        }\n      ]\n      : []\n  };\n}\n\nfunction mapInput({ nodes, edges, direction }: { nodes: NodeData[]; edges: EdgeData[]; direction?: CanvasDirection }) {\n  const children = [];\n  const mappedEdges = [];\n\n  for (const node of nodes) {\n    if (!node.parent) {\n      const mappedNode = mapNode(nodes, edges, node);\n      if (mappedNode !== null) {\n        children.push(mappedNode);\n      }\n    }\n  }\n\n  for (const edge of edges) {\n    if (!edge.parent) {\n      const mappedEdge = mapEdge({ edge, direction });\n      if (mappedEdge !== null) {\n        mappedEdges.push(mappedEdge);\n      }\n    }\n  }\n\n  return {\n    children,\n    edges: mappedEdges\n  };\n}\n\nfunction postProcessNode(nodes: any[]): any[] {\n  for (const node of nodes) {\n    const hasLabels = node.labels?.length > 0;\n\n    if (hasLabels && node.properties.icon) {\n      const [label] = node.labels;\n      label.x = node.properties.icon.width + 25;\n      node.properties.icon.x = 25;\n      node.properties.icon.y = node.height / 2;\n    } else if (hasLabels) {\n      const [label] = node.labels;\n      label.x = (node.width - label.width) / 2;\n    } else if (node.properties.icon) {\n      node.properties.icon.x = node.width / 2;\n      node.properties.icon.y = node.height / 2;\n    }\n\n    if (node.children) {\n      postProcessNode(node.children);\n    }\n  }\n\n  return nodes;\n}\n\nconst isBrowser = typeof window !== 'undefined' && typeof Worker !== 'undefined';\nlet elkInstance: ELK | null = null;\n\nconst getElk = async () => {\n  if (elkInstance) return elkInstance;\n\n  if (!isBrowser) {\n    const ELKModule = await import('elkjs/lib/elk.bundled.js');\n    elkInstance = new ELKModule.default({\n      algorithms: ['layered']\n    });\n\n    return elkInstance;\n  } else {\n    const ELKModule = await import('elkjs/lib/elk-api');\n\n    elkInstance = new ELKModule.default({\n      algorithms: ['layered'],\n      workerFactory: () => {\n        const workerUrl = new URL('elkjs/lib/elk-worker.min.js', import.meta.url).href;\n        return new Worker(workerUrl);\n      }\n    });\n\n    return elkInstance;\n  }\n};\n\nexport const elkLayout = (nodes: NodeData[], edges: EdgeData[], options: ElkCanvasLayoutOptions) => {\n  return new PCancelable<ElkNode>(async (resolve, reject) => {\n    const graph = await getElk();\n    const layoutOptions: ElkCanvasLayoutOptions = {\n      ...defaultLayoutOptions,\n      ...options\n    };\n\n    graph\n      .layout(\n        {\n          id: 'root',\n          ...mapInput({ nodes, edges, direction: layoutOptions?.['elk.direction'] })\n        },\n        {\n          layoutOptions: layoutOptions\n        }\n      )\n      .then((data) => {\n        resolve({\n          ...data,\n          children: postProcessNode(data.children)\n        });\n      })\n      .catch(reject);\n  });\n};\n","import { RefObject, useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport useDimensions from 'react-cool-dimensions';\nimport isEqual from 'react-fast-compare';\nimport { CanvasPosition, EdgeData, NodeData } from '../types';\nimport { CanvasDirection, ElkCanvasLayoutOptions, elkLayout } from './elkLayout';\nimport { calculateScrollPosition, calculateZoom, findNode } from './utils';\n\nexport interface ElkRoot {\n  x?: number;\n  y?: number;\n  width?: number;\n  height?: number;\n  children?: any[];\n  edges?: any[];\n  direction?: CanvasDirection;\n}\n\nexport interface LayoutProps {\n  maxHeight: number;\n  maxWidth: number;\n  nodes: NodeData[];\n  edges: EdgeData[];\n  pannable: boolean;\n  defaultPosition: CanvasPosition;\n  fit: boolean;\n  zoom: number;\n  layoutOptions?: ElkCanvasLayoutOptions;\n  direction: CanvasDirection;\n  setZoom: (factor: number) => void;\n  onLayoutChange: (layout: ElkRoot) => void;\n}\n\nexport interface LayoutResult {\n  /**\n   * X/Y offset.\n   */\n  xy: [number, number];\n\n  /**\n   * Scroll offset.\n   */\n  scrollXY: [number, number];\n\n  /**\n   * ELK Layout object.\n   */\n  layout: ElkRoot;\n\n  /**\n   * Ref to container div.\n   */\n  containerRef: RefObject<HTMLDivElement | null>;\n\n  /**\n   * Height of the svg.\n   */\n  canvasHeight?: number;\n\n  /**\n   * Width of the svg.\n   */\n  canvasWidth?: number;\n\n  /**\n   * Width of the container div.\n   */\n  containerWidth?: number;\n\n  /**\n   * Height of the container div.\n   */\n  containerHeight?: number;\n\n  /**\n   * Positions the canvas to the viewport.\n   */\n  positionCanvas?: (position: CanvasPosition, animated?: boolean) => void;\n\n  /**\n   * Fit the canvas to the viewport.\n   */\n  fitCanvas?: (animated?: boolean) => void;\n\n  /**\n   * Fit a group of nodes to the viewport.\n   */\n  fitNodes?: (nodeIds: string | string[], animated?: boolean) => void;\n\n  /**\n   * Scroll to X/Y\n   */\n  setScrollXY?: (xy: [number, number], animated?: boolean) => void;\n\n  observe: (el: HTMLDivElement) => void;\n}\n\nexport const useLayout = ({ maxWidth, maxHeight, nodes = [], edges = [], fit, pannable, defaultPosition, direction, layoutOptions = {}, zoom, setZoom, onLayoutChange }: LayoutProps) => {\n  const scrolled = useRef<boolean>(false);\n  const ref = useRef<HTMLDivElement>();\n  const { observe, width, height } = useDimensions<HTMLDivElement>();\n  const [layout, setLayout] = useState<ElkRoot | null>(null);\n  const [xy, setXY] = useState<[number, number]>([0, 0]);\n  const [scrollXY, setScrollXY] = useState<[number, number]>([0, 0]);\n  const canvasHeight = pannable ? maxHeight : height;\n  const canvasWidth = pannable ? maxWidth : width;\n\n  const scrollToXY = (xy: [number, number], animated = false) => {\n    ref.current.scrollTo({ left: xy[0], top: xy[1], behavior: animated ? 'smooth' : 'auto' });\n    setScrollXY(xy);\n  };\n\n  useEffect(() => {\n    const promise = elkLayout(nodes, edges, {\n      'elk.direction': direction,\n      ...layoutOptions\n    });\n\n    promise\n      .then((result) => {\n        if (!isEqual(layout, result)) {\n          setLayout(result);\n          onLayoutChange(result);\n        }\n      })\n      .catch((err) => {\n        if (err.name !== 'CancelError') {\n          console.error('Layout Error:', err);\n        }\n      });\n\n    return () => promise.cancel();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [nodes, edges]);\n\n  const positionVector = useCallback(\n    (position: CanvasPosition) => {\n      if (layout) {\n        const centerX = (canvasWidth - layout.width * zoom) / 2;\n        const centerY = (canvasHeight - layout.height * zoom) / 2;\n        switch (position) {\n          case CanvasPosition.CENTER:\n            setXY([centerX, centerY]);\n            break;\n          case CanvasPosition.TOP:\n            setXY([centerX, 0]);\n            break;\n          case CanvasPosition.LEFT:\n            setXY([0, centerY]);\n            break;\n          case CanvasPosition.RIGHT:\n            setXY([canvasWidth - layout.width * zoom, centerY]);\n            break;\n          case CanvasPosition.BOTTOM:\n            setXY([centerX, canvasHeight - layout.height * zoom]);\n            break;\n        }\n      }\n    },\n    [canvasWidth, canvasHeight, layout, zoom]\n  );\n\n  const positionScroll = useCallback(\n    (position: CanvasPosition, animated = false) => {\n      const scrollCenterX = (canvasWidth - width) / 2;\n      const scrollCenterY = (canvasHeight - height) / 2;\n      if (pannable) {\n        switch (position) {\n          case CanvasPosition.CENTER:\n            scrollToXY([scrollCenterX, scrollCenterY], animated);\n            break;\n          case CanvasPosition.TOP:\n            scrollToXY([scrollCenterX, 0], animated);\n            break;\n          case CanvasPosition.LEFT:\n            scrollToXY([0, scrollCenterY], animated);\n            break;\n          case CanvasPosition.RIGHT:\n            scrollToXY([canvasWidth - width, scrollCenterY], animated);\n            break;\n          case CanvasPosition.BOTTOM:\n            scrollToXY([scrollCenterX, canvasHeight - height], animated);\n            break;\n        }\n      }\n    },\n    [canvasWidth, canvasHeight, width, height, pannable]\n  );\n\n  const positionCanvas = useCallback(\n    (position: CanvasPosition, animated = false) => {\n      positionVector(position);\n      positionScroll(position, animated);\n    },\n    [positionScroll, positionVector]\n  );\n\n  useEffect(() => {\n    if (scrolled.current && defaultPosition) {\n      positionVector(defaultPosition);\n    }\n  }, [positionVector, zoom, defaultPosition]);\n\n  const fitCanvas = useCallback(\n    (animated = false) => {\n      if (layout) {\n        const heightZoom = height / layout.height;\n        const widthZoom = width / layout.width;\n        const scale = Math.min(heightZoom, widthZoom, 1);\n        setZoom(scale - 1);\n        positionCanvas(CanvasPosition.CENTER, animated);\n      }\n    },\n    [height, layout, width, setZoom, positionCanvas]\n  );\n\n  /**\n   * This centers the chart on the canvas, zooms in to fit the specified nodes, and scrolls to center the nodes in the viewport\n   */\n  const fitNodes = useCallback(\n    (nodeIds: string | string[], animated = true) => {\n      if (layout && layout.children) {\n        const nodes = Array.isArray(nodeIds) ? nodeIds.map((nodeId) => findNode(layout.children, nodeId)) : [findNode(layout.children, nodeIds)];\n\n        if (nodes) {\n          // center the chart\n          positionVector(CanvasPosition.CENTER);\n\n          const updatedZoom = calculateZoom({ nodes, viewportWidth: width, viewportHeight: height, maxViewportCoverage: 0.9, minViewportCoverage: 0.2 });\n          const scrollPosition = calculateScrollPosition({ nodes, viewportWidth: width, viewportHeight: height, canvasWidth, canvasHeight, chartWidth: layout.width, chartHeight: layout.height, zoom: updatedZoom });\n\n          setZoom(updatedZoom - 1);\n          scrollToXY(scrollPosition, animated);\n        }\n      }\n    },\n    [canvasHeight, canvasWidth, height, layout, positionVector, setZoom, width]\n  );\n\n  useLayoutEffect(() => {\n    const scroller = ref.current;\n    if (scroller && !scrolled.current && layout && height && width) {\n      if (fit) {\n        fitCanvas();\n      } else if (defaultPosition) {\n        positionCanvas(defaultPosition);\n      }\n\n      scrolled.current = true;\n    }\n  }, [canvasWidth, pannable, canvasHeight, layout, height, fit, width, defaultPosition, positionCanvas, fitCanvas, ref]);\n\n  useLayoutEffect(() => {\n    function onResize() {\n      if (fit) {\n        fitCanvas();\n      } else if (defaultPosition) {\n        positionCanvas(defaultPosition);\n      }\n    }\n\n    window.addEventListener('resize', onResize);\n\n    return () => window.removeEventListener('resize', onResize);\n  }, [fit, positionCanvas, defaultPosition, fitCanvas]);\n\n  return {\n    xy,\n    observe,\n    containerRef: ref,\n    canvasHeight,\n    canvasWidth,\n    containerWidth: width,\n    containerHeight: height,\n    layout,\n    scrollXY,\n    positionCanvas,\n    fitCanvas,\n    fitNodes,\n    setScrollXY: scrollToXY\n  } as LayoutResult;\n};\n","import React, { useCallback, useState } from 'react';\nimport { EdgeSections } from '../symbols/Edge';\nimport { NodeData, PortData } from '../types';\nimport { DragEvent, NodeDragEvents, Position } from './useNodeDrag';\nimport { Point2D } from 'kld-affine';\nimport { NodeDragType } from '../symbols/Node';\n\nexport interface EdgeDragResult extends NodeDragEvents {\n  dragCoords: EdgeSections[] | null;\n  canLinkNode: boolean | null;\n  dragNode: NodeData | null;\n  dragPort: PortData | null;\n  enteredNode: NodeData | null;\n  onEnter?: (\n    event: React.MouseEvent<SVGGElement, MouseEvent>,\n    data: NodeData | PortData\n  ) => void;\n  onLeave?: (\n    event: React.MouseEvent<SVGGElement, MouseEvent>,\n    data: NodeData | PortData\n  ) => void;\n}\n\nexport const useEdgeDrag = ({\n  onNodeLink,\n  onNodeLinkCheck\n}): EdgeDragResult => {\n  const [dragNode, setDragNode] = useState<NodeData | null>(null);\n  const [dragPort, setDragPort] = useState<PortData | null>(null);\n  const [dragType, setDragType] = useState<NodeDragType | null>(null);\n  const [enteredNode, setEnteredNode] = useState<NodeData | null>(null);\n  const [dragCoords, setDragCoords] = useState<EdgeSections[] | null>(null);\n  const [canLinkNode, setCanLinkNode] = useState<boolean | null>(null);\n\n  const onDragStart = useCallback(\n    (state: DragEvent, _initial: Position, node: NodeData, port?: PortData) => {\n      setDragType(state.dragType);\n      setDragNode(node);\n      setDragPort(port);\n    },\n    []\n  );\n\n  const onDrag = useCallback(\n    ({ memo: [matrix], xy: [x, y] }: DragEvent, [ix, iy]: Position) => {\n      const endPoint = new Point2D(x, y).transform(matrix);\n      setDragCoords([\n        {\n          startPoint: {\n            x: ix,\n            y: iy\n          },\n          endPoint\n        }\n      ]);\n    },\n    []\n  );\n\n  const onDragEnd = useCallback(\n    (event: DragEvent) => {\n      if (dragNode && enteredNode && canLinkNode) {\n        onNodeLink(event, dragNode, enteredNode, dragPort);\n      }\n\n      setDragNode(null);\n      setDragPort(null);\n      setEnteredNode(null);\n      setDragCoords(null);\n    },\n    [canLinkNode, dragNode, dragPort, enteredNode, onNodeLink]\n  );\n\n  const onEnter = useCallback(\n    (event: React.MouseEvent<SVGGElement, MouseEvent>, node: NodeData) => {\n      if (dragNode && node) {\n        setEnteredNode(node);\n        const canLink = onNodeLinkCheck(event, dragNode, node, dragPort);\n        const result =\n          (canLink === undefined || canLink) &&\n          (dragNode.parent === node.parent || dragType === 'node');\n\n        setCanLinkNode(result);\n      }\n    },\n    [dragNode, dragPort, dragType, onNodeLinkCheck]\n  );\n\n  const onLeave = useCallback(\n    (event: React.MouseEvent<SVGGElement, MouseEvent>, node: NodeData) => {\n      if (dragNode && node) {\n        setEnteredNode(null);\n        setCanLinkNode(null);\n      }\n    },\n    [dragNode]\n  );\n\n  return {\n    dragCoords,\n    canLinkNode,\n    dragNode,\n    dragPort,\n    enteredNode,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onEnter,\n    onLeave\n  };\n};\n","import { RefObject, useCallback, useRef, useState } from 'react';\nimport { useGesture } from 'react-use-gesture';\n\nconst limit = (scale: number, min: number, max: number) => (scale < max ? (scale > min ? scale : min) : max);\n\nexport interface ZoomProps {\n  disabled?: boolean;\n  zoom?: number;\n  minZoom?: number;\n  maxZoom?: number;\n  onZoomChange: (zoom: number) => void;\n}\n\nexport interface ZoomResult {\n  /**\n   * Factor of zoom.\n   */\n  zoom: number;\n\n  /**\n   * SVG Ref for the Canvas.\n   */\n  svgRef: RefObject<SVGSVGElement | null>;\n\n  /**\n   * Set a zoom factor of the canvas.\n   */\n  setZoom?: (factor: number) => void;\n\n  /**\n   * Zoom in on the canvas.\n   */\n  zoomIn?: (zoomFactor?: number) => void;\n\n  /**\n   * Zoom out on the canvas.\n   */\n  zoomOut?: (zoomFactor?: number) => void;\n}\n\nexport const useZoom = ({ disabled = false, zoom = 1, minZoom = -0.5, maxZoom = 1, onZoomChange }: ZoomProps) => {\n  const [factor, setFactor] = useState<number>(zoom - 1);\n  const svgRef = useRef<SVGSVGElement | null>(null);\n\n  useGesture(\n    {\n      onPinch: ({ offset: [d], event }) => {\n        event.preventDefault();\n        // TODO: Set X/Y on center of zoom\n        const next = limit(d / 100, minZoom, maxZoom);\n        setFactor(next);\n        onZoomChange(next + 1);\n      }\n    },\n    {\n      enabled: !disabled,\n      domTarget: svgRef,\n      eventOptions: { passive: false }\n    }\n  );\n\n  const setZoom = useCallback(\n    (f: number) => {\n      const next = limit(f, minZoom, maxZoom);\n      setFactor(next);\n      onZoomChange(next + 1);\n    },\n    [maxZoom, minZoom, onZoomChange]\n  );\n\n  const zoomIn = useCallback(\n    (zoomFactor: number = 0.1) => {\n      setZoom(factor + zoomFactor);\n    },\n    [factor, setZoom]\n  );\n\n  const zoomOut = useCallback(\n    (zoomFactor: number = -0.1) => {\n      setZoom(factor + zoomFactor);\n    },\n    [factor, setZoom]\n  );\n\n  return {\n    svgRef,\n    zoom: factor + 1,\n    setZoom,\n    zoomIn,\n    zoomOut\n  } as ZoomResult;\n};\n","import React, { createContext, useContext } from 'react';\nimport { LayoutResult, useLayout } from '../layout/useLayout';\nimport { NodeData, PortData } from '../types';\nimport { EdgeDragResult, useEdgeDrag } from './useEdgeDrag';\nimport { useZoom, ZoomResult } from './useZoom';\n\nexport interface CanvasProviderValue\n  extends EdgeDragResult,\n    LayoutResult,\n    ZoomResult {\n  selections?: string[];\n  readonly?: boolean;\n  pannable: boolean;\n  panType: 'scroll' | 'drag'; \n}\n\nexport const CanvasContext = createContext<CanvasProviderValue>({} as any);\n\nexport interface CanvasProviderProps {\n  onNodeLink?: (\n    event: any,\n    fromNode: NodeData,\n    toNode: NodeData,\n    fromPort?: PortData\n  ) => void;\n  onNodeLinkCheck?: (\n    event: any,\n    fromNode: NodeData,\n    toNode: NodeData,\n    fromPort?: PortData\n  ) => undefined | boolean;\n}\n\nexport const CanvasProvider = ({\n  selections,\n  onNodeLink,\n  readonly,\n  children,\n  nodes,\n  edges,\n  maxHeight,\n  fit,\n  maxWidth,\n  direction,\n  layoutOptions,\n  pannable,\n  panType,\n  defaultPosition,\n  zoomable,\n  zoom,\n  minZoom,\n  maxZoom,\n  onNodeLinkCheck,\n  onLayoutChange,\n  onZoomChange\n}) => {\n  const zoomProps = useZoom({\n    zoom,\n    minZoom,\n    maxZoom,\n    disabled: !zoomable,\n    onZoomChange\n  });\n\n  const layoutProps = useLayout({\n    nodes,\n    edges,\n    maxHeight,\n    maxWidth,\n    direction,\n    pannable,\n    panType,\n    defaultPosition,\n    fit,\n    layoutOptions,\n    zoom: zoomProps.zoom,\n    setZoom: zoomProps.setZoom,\n    onLayoutChange\n  });\n\n  const dragProps = useEdgeDrag({\n    onNodeLink,\n    onNodeLinkCheck\n  });\n\n  return (\n    <CanvasContext.Provider\n      value={{\n        selections,\n        readonly,\n        pannable,\n        panType,\n        ...layoutProps,\n        ...zoomProps,\n        ...dragProps\n      }}\n    >\n      {children}\n    </CanvasContext.Provider>\n  );\n};\n\nexport const useCanvas = () => {\n  const context = useContext(CanvasContext);\n\n  if (context === undefined) {\n    throw new Error(\n      '`useCanvas` hook must be used within a `CanvasContext` component'\n    );\n  }\n\n  return context;\n};\n","import { RefObject } from 'react';\nimport { NodeData } from '../types';\nimport { Matrix2D } from 'kld-affine';\n\n/**\n * Checks if the node can be linked or not.\n */\nexport function checkNodeLinkable(\n  curNode: NodeData,\n  enteredNode: NodeData | null,\n  canLinkNode: boolean | null\n) {\n  if (canLinkNode === null || !enteredNode) {\n    return null;\n  }\n\n  if (!enteredNode || !curNode) {\n    return false;\n  }\n\n  // TODO: Revisit how to do self-linking better...\n  return !(canLinkNode === false && enteredNode.id === curNode.id);\n}\n\nexport interface CoordProps {\n  zoom: number;\n  layoutXY: [number, number];\n  containerRef: RefObject<HTMLDivElement | null>;\n}\n\n/**\n * Given various dimensions and positions, create a matrix\n * used for determining position.\n */\nexport function getCoords({ zoom, layoutXY, containerRef }: CoordProps) {\n  const { top, left } = containerRef.current.getBoundingClientRect();\n  const tx = layoutXY[0] - containerRef.current.scrollLeft + left;\n  const ty = layoutXY[1] - containerRef.current.scrollTop + top;\n\n  return new Matrix2D().translate(tx, ty).scale(zoom).inverse();\n}\n\n/**\n * Given a nodeId to find, a list of nodes to check against, and an optional parentId of the node\n * find the node from the list of nodes\n */\nexport function findNestedNode(\n  nodeId: string,\n  children: any[],\n  parentId?: string\n): { [key: string]: any } {\n  if (!nodeId || !children) {\n    return {};\n  }\n\n  const foundNode = children.find((n) => n.id === nodeId);\n  if (foundNode) {\n    return foundNode;\n  }\n\n  if (parentId) {\n    const parentNode = children.find((n) => n.id === parentId);\n    if (parentNode?.children) {\n      return findNestedNode(nodeId, parentNode.children, parentId);\n    }\n  }\n\n  // Check for nested children\n  const nodesWithChildren = children.filter((n) => n.children?.length);\n  // Iterate over all nested nodes and check if any of them contain the node\n  for (const n of nodesWithChildren) {\n    const foundChild = findNestedNode(nodeId, n.children, parentId);\n\n    if (foundChild && Object.keys(foundChild).length) {\n      return foundChild;\n    }\n  }\n\n  return {};\n}\n\n/**\n * Return the layout node that is currently being dragged on the Canvas\n */\nexport function getDragNodeData(\n  dragNode: NodeData,\n  children: any[] = []\n): { [key: string]: any } {\n  if (!dragNode) {\n    return {};\n  }\n\n  const { parent } = dragNode;\n  if (!parent) {\n    return children?.find((n) => n.id === dragNode.id) || {};\n  }\n\n  return findNestedNode(dragNode.id, children, parent);\n}\n","import { useRef } from 'react';\nimport { useDrag } from 'react-use-gesture';\nimport { State } from 'react-use-gesture/dist/types';\nimport { NodeDragType } from 'symbols';\nimport { NodeData } from '../types';\nimport { useCanvas } from './CanvasProvider';\nimport { getCoords } from './helpers';\n\nexport type DragEvent = State['drag'] & { dragType?: NodeDragType };\nexport type Position = [number, number];\n\nexport interface NodeDragEvents<T = any, TT = any | undefined> {\n  onDrag?: (event: DragEvent, initial: Position, data: T, extra?: TT) => void;\n  onDragEnd?: (\n    event: DragEvent,\n    initial: Position,\n    data: T,\n    extra?: TT\n  ) => void;\n  onDragStart?: (\n    event: DragEvent,\n    initial: Position,\n    data: T,\n    extra?: TT\n  ) => void;\n}\n\nexport interface NodeDragProps extends NodeDragEvents {\n  node: NodeData;\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n  disabled: boolean;\n}\n\nexport const useNodeDrag = ({\n  x,\n  y,\n  height,\n  width,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  node,\n  disabled\n}: NodeDragProps) => {\n  const initial: Position = [width / 2 + x, height + y];\n  const targetRef = useRef<EventTarget | null>(null);\n  const { zoom, xy, containerRef } = useCanvas();\n\n  const bind = useDrag(\n    (state) => {\n      if (state.event.type === 'pointerdown') {\n        targetRef.current = state.event.currentTarget;\n      }\n\n      if (!state.intentional || !targetRef.current) {\n        return;\n      }\n\n      if (state.first) {\n        const matrix = getCoords({\n          containerRef,\n          zoom,\n          layoutXY: xy\n        });\n\n        // memo will hold the difference between the\n        // first point of impact and the origin\n        const memo = [matrix];\n\n        onDragStart({ ...state, memo }, initial, node);\n\n        return memo;\n      }\n\n      onDrag(state, initial, node);\n\n      if (state.last) {\n        targetRef.current = null;\n        onDragEnd(state, initial, node);\n      }\n    },\n    {\n      enabled: !disabled,\n      triggerAllEvents: true,\n      threshold: 5\n    }\n  );\n\n  return bind;\n};\n","import React, { forwardRef, Fragment, ReactNode, Ref, useState } from 'react';\nimport { motion } from 'motion/react';\nimport { PortData } from '../../types';\nimport { NodeDragEvents, DragEvent, useNodeDrag, Position } from '../../utils/useNodeDrag';\nimport classNames from 'classnames';\nimport { useCanvas } from '../../utils/CanvasProvider';\nimport css from './Port.module.css';\n\nexport interface ElkPortProperties {\n  index: number;\n  width: number;\n  height: number;\n  'port.side': string;\n  'port.alignment': string;\n}\n\nexport interface PortChildProps {\n  port: PortData;\n  isDisabled: boolean;\n  isDragging: boolean;\n  isHovered: boolean;\n  x: number;\n  y: number;\n  rx: number;\n  ry: number;\n  offsetX: number;\n  offsetY: number;\n}\n\nexport type PortChildrenAsFunction = (portChildProps: PortChildProps) => ReactNode;\n\nexport interface PortProps extends NodeDragEvents<PortData> {\n  id: string;\n  x: number;\n  y: number;\n  rx: number;\n  ry: number;\n  offsetX: number;\n  offsetY: number;\n  disabled?: boolean;\n  className?: string;\n  properties: ElkPortProperties & PortData;\n  style?: any;\n  children?: ReactNode | PortChildrenAsFunction;\n  active?: boolean;\n  onEnter?: (event: React.MouseEvent<SVGGElement, MouseEvent>, port: PortData) => void;\n  onLeave?: (event: React.MouseEvent<SVGGElement, MouseEvent>, port: PortData) => void;\n  onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, port: PortData) => void;\n}\n\nexport const Port = forwardRef(({ id, x, y, rx, ry, disabled, style, children, properties, offsetX, offsetY, className, active, onDrag = () => undefined, onDragStart = () => undefined, onDragEnd = () => undefined, onEnter = () => undefined, onLeave = () => undefined, onClick = () => undefined }: Partial<PortProps>, ref: Ref<SVGRectElement>) => {\n  const { readonly } = useCanvas();\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [isHovered, setIsHovered] = useState<boolean>(false);\n  const newX = x - properties.width / 2;\n  const newY = y - properties.height / 2;\n\n  const onDragStartInternal = (event: DragEvent, initial: Position) => {\n    onDragStart(event, initial, properties);\n    setIsDragging(true);\n  };\n\n  const onDragEndInternal = (event: DragEvent, initial: Position) => {\n    onDragEnd(event, initial, properties);\n    setIsDragging(false);\n  };\n\n  const bind = useNodeDrag({\n    x: newX + offsetX,\n    y: newY + offsetY,\n    height: properties.height,\n    width: properties.width,\n    disabled: disabled || readonly || properties?.disabled,\n    node: properties,\n    onDrag,\n    onDragStart: onDragStartInternal,\n    onDragEnd: onDragEndInternal\n  });\n\n  if (properties.hidden) {\n    return null;\n  }\n\n  const isDisabled = properties.disabled || disabled;\n\n  const portChildProps: PortChildProps = {\n    port: properties,\n    isDragging,\n    isHovered,\n    isDisabled,\n    x,\n    y,\n    rx,\n    ry,\n    offsetX,\n    offsetY\n  };\n\n  return (\n    <g id={id}>\n      <rect\n        {...bind()}\n        ref={ref}\n        height={properties.height + 14}\n        width={properties.width + 14}\n        x={newX - 7}\n        y={newY - 7}\n        className={classNames(css.clicker, { [css.disabled]: isDisabled })}\n        onMouseEnter={(event) => {\n          event.stopPropagation();\n          if (!isDisabled) {\n            setIsHovered(true);\n            onEnter(event, properties);\n          }\n        }}\n        onMouseLeave={(event) => {\n          event.stopPropagation();\n          if (!isDisabled) {\n            setIsHovered(false);\n            onLeave(event, properties);\n          }\n        }}\n        onClick={(event) => {\n          event.stopPropagation();\n          if (!isDisabled) {\n            onClick(event, properties);\n          }\n        }}\n      />\n      <motion.rect\n        key={`${x}-${y}`}\n        style={style}\n        className={classNames(css.port, className, properties?.className)}\n        height={properties.height}\n        width={properties.width}\n        rx={rx}\n        ry={ry}\n        initial={{\n          scale: 0,\n          opacity: 0,\n          x: newX,\n          y: newY\n        }}\n        animate={{\n          x: newX,\n          y: newY,\n          scale: (isDragging || active || isHovered) && !isDisabled ? 1.5 : 1,\n          opacity: 1\n        }}\n      />\n      {children && <Fragment>{typeof children === 'function' ? (children as PortChildrenAsFunction)(portChildProps) : children}</Fragment>}\n    </g>\n  );\n});\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport css from './Label.module.css';\n\nexport interface LabelProps {\n  x: number;\n  y: number;\n  height: number;\n  width: number;\n  text: string;\n  style?: any;\n  className?: string;\n  originalText?: string;\n}\n\nexport const Label: FC<Partial<LabelProps>> = ({ text, x, y, style, className, originalText }) => {\n  const isString = typeof originalText === 'string';\n  return (\n    <>\n      {isString && <title>{originalText}</title>}\n      <g transform={`translate(${x}, ${y})`}>\n        <text className={classNames(css.text, className)} style={style}>\n          {text}\n        </text>\n      </g>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport { motion } from 'motion/react';\nimport css from './Remove.module.css';\n\nexport interface RemoveProps {\n  x: number;\n  y: number;\n  hidden?: boolean;\n  size?: number;\n  className?: string;\n  onEnter?: (event: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n  onLeave?: (event: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n  onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n}\n\nexport const Remove: FC<Partial<RemoveProps>> = ({ size = 15, className, hidden, x, y, onClick = () => undefined, onEnter = () => undefined, onLeave = () => undefined }) => {\n  if (hidden) {\n    return null;\n  }\n\n  const half = size / 2;\n  const translateX = x - half;\n  const translateY = y - half;\n\n  return (\n    <motion.g className={classNames(className, css.container)} initial={{ scale: 0, opacity: 0, translateX, translateY }} animate={{ scale: 1, opacity: 1, translateX, translateY }} whileHover={{ scale: 1.2 }} whileTap={{ scale: 0.8 }}>\n      <rect\n        height={size * 1.5}\n        width={size * 1.5}\n        className={css.drop}\n        onMouseEnter={onEnter}\n        onMouseLeave={onLeave}\n        onClick={(event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          onClick(event);\n        }}\n      />\n      <rect height={size} width={size} className={css.rect} />\n      <line x1=\"2\" y1={size - 2} x2={size - 2} y2=\"2\" className={css.deleteX} strokeWidth=\"1\" />\n      <line x1=\"2\" y1=\"2\" x2={size - 2} y2={size - 2} className={css.deleteX} strokeWidth=\"1\" />\n    </motion.g>\n  );\n};\n","export interface PointCoords {\n  x: number;\n  y: number;\n}\n\nexport interface CenterCoords {\n  angle: number;\n  x: number;\n  y: number;\n}\n\n/**\n * Center helper.\n * Ref: https://github.com/wbkd/react-flow/blob/main/src/components/Edges/utils.ts#L18\n */\nfunction getBezierCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}): [number, number, number, number] {\n  const xOffset = Math.abs(targetX - sourceX) / 2;\n  const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n\n  const yOffset = Math.abs(targetY - sourceY) / 2;\n  const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n\n  return [centerX, centerY, xOffset, yOffset];\n}\n\n/**\n * Path helper utils.\n * Ref: https://github.com/wbkd/react-flow/blob/main/src/components/Edges/BezierEdge.tsx#L19\n */\nexport function getBezierPath({\n  sourceX,\n  sourceY,\n  sourcePosition = 'bottom',\n  targetX,\n  targetY,\n  targetPosition = 'top'\n}): string {\n  const leftAndRight = ['left', 'right'];\n  const [centerX, centerY] = getBezierCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  });\n\n  let path = `M${sourceX},${sourceY} C${sourceX},${centerY} ${targetX},${centerY} ${targetX},${targetY}`;\n\n  if (\n    leftAndRight.includes(sourcePosition) &&\n    leftAndRight.includes(targetPosition)\n  ) {\n    path = `M${sourceX},${sourceY} C${centerX},${sourceY} ${centerX},${targetY} ${targetX},${targetY}`;\n  } else if (leftAndRight.includes(targetPosition)) {\n    path = `M${sourceX},${sourceY} C${sourceX},${targetY} ${sourceX},${targetY} ${targetX},${targetY}`;\n  } else if (leftAndRight.includes(sourcePosition)) {\n    path = `M${sourceX},${sourceY} C${targetX},${sourceY} ${targetX},${sourceY} ${targetX},${targetY}`;\n  }\n\n  return path;\n}\n\n/**\n * Calculate actual center for a path element.\n */\nfunction getCenter(pathElm: SVGPathElement) {\n  const pLength = pathElm.getTotalLength();\n  const pieceSize = pLength / 2;\n  const { x, y } = pathElm.getPointAtLength(pieceSize);\n  const angle = (Math.atan2(x, y) * 180) / Math.PI;\n  return { x, y, angle };\n}\n\n/**\n * Get the angle for the path.\n */\nfunction getAngle(source: PointCoords, target: PointCoords) {\n  const dx = source.x - target.x;\n  const dy = source.y - target.y;\n\n  let theta = Math.atan2(-dy, -dx);\n  theta *= 180 / Math.PI;\n  if (theta < 0) {\n    theta += 360;\n  }\n\n  return theta;\n}\n\n/**\n * Get the center for the path element.\n */\nexport function getPathCenter(\n  pathElm: SVGPathElement,\n  firstPoint: PointCoords,\n  lastPoint: PointCoords\n): CenterCoords {\n  if (!pathElm) {\n    return null;\n  }\n\n  const angle = getAngle(firstPoint, lastPoint);\n  const point = getCenter(pathElm);\n  return {\n    ...point,\n    angle\n  };\n}\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport { motion } from 'motion/react';\nimport css from './Add.module.css';\n\nexport interface AddProps {\n  x: number;\n  y: number;\n  size?: number;\n  className?: string;\n  hidden?: boolean;\n  onEnter?: (event: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n  onLeave?: (event: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n  onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n}\n\nexport const Add: FC<Partial<AddProps>> = ({ x, y, className, size = 15, hidden = true, onEnter = () => undefined, onLeave = () => undefined, onClick = () => undefined }) => {\n  if (hidden) {\n    return null;\n  }\n\n  const half = size / 2;\n  const translateX = x - half;\n  const translateY = y - half;\n\n  return (\n    <motion.g className={classNames(className, css.container)} initial={{ scale: 0, opacity: 0, translateX, translateY }} animate={{ scale: 1, opacity: 1, translateX, translateY }} whileHover={{ scale: 1.2 }} whileTap={{ scale: 0.8 }}>\n      <rect\n        height={size * 2}\n        width={size * 2}\n        className={css.drop}\n        onClick={(event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          onClick(event);\n        }}\n        onMouseEnter={onEnter}\n        onMouseLeave={onLeave}\n      />\n      <rect height={size} width={size} className={css.rect} />\n      <line x1=\"2\" x2={size - 2} y1={half} y2={half} className={css.plus} strokeWidth=\"1\" />\n      <line x1={half} x2={half} y1=\"2\" y2={size - 2} className={css.plus} strokeWidth=\"1\" />\n    </motion.g>\n  );\n};\n","import React, { FC, Fragment, MutableRefObject, ReactElement, ReactNode, useEffect, useMemo, useRef, useState } from 'react';\nimport { EdgeData } from '../../types';\nimport { Label, LabelProps } from '../Label';\nimport { CloneElement } from 'reablocks';\nimport classNames from 'classnames';\nimport { CenterCoords, getBezierPath, getPathCenter } from './utils';\nimport { curveBundle, line } from 'd3-shape';\nimport { Remove, RemoveProps } from '../Remove';\nimport { Add, AddProps } from '../Add';\nimport { useCanvas } from '../../utils/CanvasProvider';\nimport css from './Edge.module.css';\n\nexport interface EdgeSections {\n  id?: string;\n  startPoint?: {\n    x: number;\n    y: number;\n  };\n  endPoint?: {\n    x: number;\n    y: number;\n  };\n  bendPoints?: {\n    x: number;\n    y: number;\n  };\n}\n\nexport interface EdgeChildProps {\n  edge: EdgeData;\n  pathRef: MutableRefObject<SVGPathElement> | null;\n  center: CenterCoords | null;\n}\n\nexport type EdgeChildrenAsFunction = (edgeChildProps: EdgeChildProps) => ReactNode;\n\nexport interface EdgeProps {\n  id: string;\n  disabled?: boolean;\n  removable?: boolean;\n  selectable?: boolean;\n  upsertable?: boolean;\n  source: string;\n  sourcePort: string;\n  target: string;\n  targetPort: string;\n  properties?: EdgeData;\n  style?: any;\n  children?: ReactNode | EdgeChildrenAsFunction;\n  sections: EdgeSections[];\n  interpolation: 'linear' | 'curved' | Function;\n  labels?: LabelProps[];\n  className?: string;\n  containerClassName?: string;\n\n  add: ReactElement<AddProps, typeof Add>;\n  label: ReactElement<LabelProps, typeof Label>;\n  remove: ReactElement<RemoveProps, typeof Remove>;\n\n  onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, data: EdgeData) => void;\n  onKeyDown?: (event: React.KeyboardEvent<SVGGElement>, data: EdgeData) => void;\n  onEnter?: (event: React.MouseEvent<SVGGElement, MouseEvent>, node: EdgeData) => void;\n  onLeave?: (event: React.MouseEvent<SVGGElement, MouseEvent>, node: EdgeData) => void;\n  onRemove?: (event: React.MouseEvent<SVGGElement, MouseEvent>, edge: EdgeData) => void;\n  onAdd?: (event: React.MouseEvent<SVGGElement, MouseEvent>, edge: EdgeData) => void;\n}\n\nexport const Edge: FC<Partial<EdgeProps>> = ({ sections, interpolation = 'curved', properties, labels, className, containerClassName, disabled, removable = true, selectable = true, upsertable = true, style, children, add = <Add />, remove = <Remove />, label = <Label />, onClick = () => undefined, onKeyDown = () => undefined, onEnter = () => undefined, onLeave = () => undefined, onRemove = () => undefined, onAdd = () => undefined }) => {\n  const pathRef = useRef<SVGPathElement | null>(null);\n  const [deleteHovered, setDeleteHovered] = useState<boolean>(false);\n  const [center, setCenter] = useState<CenterCoords | null>(null);\n  const { selections, readonly } = useCanvas();\n  const isActive: boolean = selections?.length ? selections.includes(properties?.id) : false;\n  const isDisabled = disabled || properties?.disabled;\n  const canSelect = selectable && !properties?.selectionDisabled;\n\n  // The \"d\" attribute defines a path to be drawn. See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n  const d = useMemo(() => {\n    if (!sections?.length) {\n      return null;\n    }\n\n    // Handle bend points that elk gives\n    // us separately from drag points\n    if (sections[0].bendPoints) {\n      const points: any[] = sections ? [sections[0].startPoint, ...(sections[0].bendPoints || ([] as any)), sections[0].endPoint] : [];\n\n      let pathFn: any = line()\n        .x((d: any) => d.x)\n        .y((d: any) => d.y);\n      if (interpolation !== 'linear') {\n        pathFn = interpolation === 'curved' ? pathFn.curve(curveBundle.beta(1)) : interpolation;\n      }\n      return pathFn(points);\n    } else {\n      return getBezierPath({\n        sourceX: sections[0].startPoint.x,\n        sourceY: sections[0].startPoint.y,\n        targetX: sections[0].endPoint.x,\n        targetY: sections[0].endPoint.y\n      });\n    }\n  }, [interpolation, sections]);\n\n  useEffect(() => {\n    if (sections?.length > 0) {\n      setCenter(getPathCenter(pathRef.current, sections[0].startPoint, sections[0].endPoint));\n    }\n  }, [sections]);\n\n  const edgeChildProps: EdgeChildProps = {\n    edge: properties,\n    center,\n    pathRef\n  };\n\n  return (\n    <g\n      className={classNames(css.edge, containerClassName, {\n        [css.disabled]: isDisabled,\n        [css.selectionDisabled]: !canSelect\n      })}\n    >\n      <path\n        ref={pathRef}\n        style={style}\n        className={classNames(css.path, properties?.className, className, {\n          [css.active]: isActive,\n          [css.deleteHovered]: deleteHovered\n        })}\n        d={d}\n        markerEnd=\"url(#end-arrow)\"\n      />\n      <path\n        className={css.clicker}\n        d={d}\n        tabIndex={-1}\n        onClick={(event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          if (!isDisabled && canSelect) {\n            onClick(event, properties);\n          }\n        }}\n        onKeyDown={(event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          if (!isDisabled) {\n            onKeyDown(event, properties);\n          }\n        }}\n        onMouseEnter={(event) => {\n          event.stopPropagation();\n          if (!isDisabled) {\n            onEnter(event, properties);\n          }\n        }}\n        onMouseLeave={(event) => {\n          event.stopPropagation();\n          if (!isDisabled) {\n            onLeave(event, properties);\n          }\n        }}\n      />\n      {children && <Fragment>{typeof children === 'function' ? (children as EdgeChildrenAsFunction)(edgeChildProps) : children}</Fragment>}\n      {labels?.length > 0 && labels.map((l, index) => <CloneElement<LabelProps> element={label} key={index} edgeChildProps={edgeChildProps} {...(l as LabelProps)} />)}\n      {!isDisabled && center && !readonly && remove && removable && (\n        <CloneElement<RemoveProps>\n          element={remove}\n          {...center}\n          hidden={remove.props.hidden !== undefined ? remove.props.hidden : !isActive}\n          onClick={(event: React.MouseEvent<SVGGElement, MouseEvent>) => {\n            event.preventDefault();\n            event.stopPropagation();\n            onRemove(event, properties);\n            setDeleteHovered(false);\n          }}\n          onEnter={() => setDeleteHovered(true)}\n          onLeave={() => setDeleteHovered(false)}\n        />\n      )}\n      {!isDisabled && center && !readonly && add && upsertable && (\n        <CloneElement<AddProps>\n          element={add}\n          {...center}\n          onClick={(event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            onAdd(event, properties);\n          }}\n        />\n      )}\n    </g>\n  );\n};\n","import React, { FC, Fragment, ReactElement, ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport { motion, useAnimation } from 'motion/react';\nimport { Port, PortProps } from '../Port';\nimport { Label, LabelProps } from '../Label';\nimport { EdgeData, NodeData, PortData } from '../../types';\nimport { CloneElement } from 'reablocks';\nimport { Icon, IconProps } from '../Icon';\nimport classNames from 'classnames';\nimport { Remove, RemoveProps } from '../Remove';\nimport { NodeDragEvents, DragEvent, useNodeDrag, Position } from '../../utils/useNodeDrag';\nimport { Edge, EdgeProps } from '../Edge';\nimport { useCanvas } from '../../utils/CanvasProvider';\nimport { checkNodeLinkable } from '../../utils/helpers';\nimport css from './Node.module.css';\n\nexport interface NodeChildProps {\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n  node: NodeData;\n  nodes?: NodeData[];\n  edges?: EdgeData[];\n}\n\nexport type NodeDragType = 'node' | 'port' | 'multiportOnly' | 'all';\n\nexport type NodeChildrenAsFunction = (nodeChildProps: NodeChildProps) => ReactNode;\n\nexport interface NodeProps<T = any> extends NodeDragEvents<NodeData<T>, PortData> {\n  id: string;\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n  rx: number;\n  ry: number;\n  offsetX?: number;\n  offsetY?: number;\n  disabled?: boolean;\n  ports?: PortProps[];\n  labels?: LabelProps[];\n  properties: NodeData<T>;\n  className?: string;\n  style?: any;\n  children?: ReactNode | NodeChildrenAsFunction;\n  parent?: string;\n  animated?: boolean;\n  draggable?: boolean;\n  linkable?: boolean;\n  selectable?: boolean;\n  removable?: boolean;\n  dragType?: NodeDragType;\n  dragCursor?: string;\n\n  nodes?: NodeData[];\n  edges?: EdgeData[];\n\n  onRemove?: (event: React.MouseEvent<SVGGElement, MouseEvent>, node: NodeData) => void;\n\n  onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, data: NodeData) => void;\n\n  onKeyDown?: (event: React.KeyboardEvent<SVGGElement>, data: NodeData) => void;\n\n  onEnter?: (event: React.MouseEvent<SVGGElement, MouseEvent>, node: NodeData) => void;\n\n  onLeave?: (event: React.MouseEvent<SVGGElement, MouseEvent>, node: NodeData) => void;\n\n  childNode?: ReactElement<NodeProps, typeof Node> | ((node: NodeProps) => ReactElement<NodeProps, typeof Node>);\n\n  childEdge?: ReactElement<EdgeProps, typeof Edge> | ((edge: EdgeProps) => ReactElement<NodeProps, typeof Edge>);\n\n  remove: ReactElement<RemoveProps, typeof Remove>;\n  icon: ReactElement<IconProps, typeof Icon>;\n  label: ReactElement<LabelProps, typeof Label>;\n  port: ReactElement<PortProps, typeof Port>;\n}\n\nexport const Node: FC<Partial<NodeProps>> = ({ id, x, y, ports, labels, height, width, properties, animated, className, rx = 2, ry = 2, offsetX = 0, offsetY = 0, icon, disabled, style, children, nodes, edges, draggable = true, linkable = true, selectable = true, removable = true, dragType = 'multiportOnly', dragCursor = 'crosshair', childEdge = <Edge />, childNode = <Node />, remove = <Remove />, port = <Port />, label = <Label />, onRemove, onDrag, onDragStart, onDragEnd, onClick, onKeyDown, onEnter, onLeave }) => {\n  const nodeRef = useRef<SVGRectElement | null>(null);\n  const controls = useAnimation();\n  const { canLinkNode, enteredNode, selections, readonly, ...canvas } = useCanvas();\n  const [deleteHovered, setDeleteHovered] = useState<boolean>(false);\n  const [dragging, setDragging] = useState<boolean>(false);\n  const [isLinkable, setIsLinkable] = useState<boolean>(true);\n  const isActive = selections?.length ? selections.includes(properties.id) : null;\n  const isNodeDrag = id.includes('node-drag');\n  const newX = x + offsetX;\n  const newY = y + offsetY;\n  const isMultiPort = dragType === 'multiportOnly' && ports?.filter((p) => !p.properties?.hidden).length > 1;\n  const isDisabled = disabled || properties?.disabled;\n  const canDrag = ['port', 'multiportOnly'].includes(dragType) ? linkable : draggable;\n  const canSelect = selectable && !properties?.selectionDisabled;\n\n  const getDragType = useCallback(\n    (hasPort: boolean) => {\n      let activeDragType: NodeDragType = null;\n      if (!hasPort) {\n        if (dragType === 'all' || dragType === 'node') {\n          activeDragType = 'node';\n        } else if (!isMultiPort) {\n          activeDragType = 'port';\n        }\n      } else {\n        if (dragType === 'all' || dragType === 'port' || isMultiPort) {\n          activeDragType = 'port';\n        }\n      }\n      return activeDragType;\n    },\n    [dragType, isMultiPort]\n  );\n\n  const setDragCursor = useCallback((dragType: NodeDragType | null) => {\n    if (dragType) {\n      document.body.classList.add('dragging');\n      document.body.style.cursor = dragType === 'node' ? 'grab' : 'crosshair';\n    } else {\n      document.body.classList.remove('dragging');\n      document.body.style.cursor = 'auto';\n    }\n  }, []);\n\n  const bind = useNodeDrag({\n    x: newX,\n    y: newY,\n    height,\n    width,\n    disabled: isDisabled || isMultiPort || readonly || !canDrag || dragType === 'port',\n    node: properties,\n    onDrag: (...props) => {\n      if (!isDisabled && canDrag) {\n        canvas.onDrag(...props);\n        onDrag?.(...props);\n      }\n    },\n    onDragStart: (event, coords, node, port) => {\n      if (!isDisabled && canDrag) {\n        // @ts-ignore\n        event.dragType = getDragType(false);\n        // @ts-ignore\n        setDragCursor(event.dragType);\n\n        canvas.onDragStart(event, coords, node, port);\n        onDragStart?.(event, coords, node, port);\n        setDragging(true);\n      }\n    },\n    onDragEnd: (event, coords, node, port) => {\n      if (!isDisabled && canDrag) {\n        // @ts-ignore\n        event.dragType = getDragType(false);\n        // @ts-ignore\n        event.srcElement = nodeRef.current;\n\n        canvas.onDragEnd(event, coords, node, port);\n        onDragEnd?.(event, coords, node, port);\n        setDragging(false);\n        setDragCursor(null);\n      }\n    }\n  });\n\n  useEffect(() => {\n    if (enteredNode?.id === properties.id) {\n      setIsLinkable(checkNodeLinkable(properties, enteredNode, canLinkNode));\n    }\n\n    return () => setIsLinkable(true);\n  }, [canLinkNode, enteredNode, properties]);\n\n  useEffect(() => {\n    controls.set({\n      opacity: 1,\n      translateX: x,\n      translateY: y\n    });\n  }, [controls, x, y]);\n\n  const nodeChildProps: NodeChildProps = {\n    height,\n    width,\n    x,\n    y,\n    node: properties,\n    nodes,\n    edges\n  };\n\n  const onClickCallback = useCallback(\n    (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n      if (!isDisabled && canSelect) {\n        onClick?.(event, properties);\n      }\n    },\n    [canSelect, isDisabled, onClick, properties]\n  );\n\n  const onKeyDownCallback = useCallback(\n    (event) => {\n      event.preventDefault();\n      if (!isDisabled) {\n        onKeyDown?.(event, properties);\n      }\n    },\n    [isDisabled, onKeyDown, properties]\n  );\n\n  const onTouchStartCallback = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  }, []);\n\n  const onMouseEnterCallback = useCallback(\n    (event) => {\n      event.stopPropagation();\n      canvas.onEnter(event, properties);\n      if (!isDisabled) {\n        onEnter?.(event, properties);\n      }\n    },\n    [canvas, isDisabled, onEnter, properties]\n  );\n\n  const onMouseLeaveCallback = useCallback(\n    (event) => {\n      event.stopPropagation();\n      canvas.onLeave(event, properties);\n      if (!isDisabled) {\n        onLeave?.(event, properties);\n      }\n    },\n    [canvas, isDisabled, onLeave, properties]\n  );\n\n  const onDragStartCallback = useCallback(\n    (event: DragEvent, initial: Position, data: PortData) => {\n      if (!isDisabled && linkable) {\n        // @ts-ignore\n        event.dragType = getDragType(true);\n        // @ts-ignore\n        setDragCursor(event.dragType);\n\n        canvas.onDragStart(event, initial, properties, data);\n        onDragStart?.(event, initial, properties, data);\n        setDragging(true);\n      }\n    },\n    [canvas, getDragType, isDisabled, linkable, onDragStart, properties, setDragCursor]\n  );\n\n  const onDragCallback = useCallback(\n    (event: DragEvent, initial: Position, data: PortData) => {\n      if (!isDisabled && linkable) {\n        canvas.onDrag(event, initial, properties, data);\n        onDrag?.(event, initial, properties, data);\n      }\n    },\n    [canvas, isDisabled, linkable, onDrag, properties]\n  );\n\n  const onDragEndCallback = useCallback(\n    (event: DragEvent, initial: Position, data: PortData) => {\n      if (!isDisabled && linkable) {\n        // @ts-ignore\n        event.dragType = getDragType(true);\n        setDragCursor(null);\n\n        canvas.onDragEnd(event, initial, properties, data);\n        onDragEnd?.(event, initial, properties, data);\n        setDragging(false);\n      }\n    },\n    [canvas, getDragType, isDisabled, linkable, onDragEnd, properties, setDragCursor]\n  );\n\n  return (\n    <motion.g\n      id={id}\n      initial={{\n        cursor: 'initial',\n        opacity: 0,\n        translateX: x,\n        translateY: y\n      }}\n      animate={controls}\n    >\n      <motion.rect\n        {...bind()}\n        ref={nodeRef}\n        tabIndex={-1}\n        onKeyDown={onKeyDownCallback}\n        onClick={onClickCallback}\n        onTouchStart={onTouchStartCallback}\n        onMouseEnter={onMouseEnterCallback}\n        onMouseLeave={onMouseLeaveCallback}\n        className={classNames(css.rect, className, properties?.className, {\n          [css.active]: isActive,\n          [css.disabled]: isDisabled,\n          [css.unlinkable]: isLinkable === false && !isNodeDrag,\n          [css.dragging]: dragging,\n          [css.children]: nodes?.length > 0,\n          [css.deleteHovered]: deleteHovered,\n          [css.selectionDisabled]: !canSelect\n        })}\n        style={style}\n        height={height}\n        width={width}\n        rx={rx}\n        ry={ry}\n        initial={{\n          opacity: 0\n        }}\n        animate={{\n          opacity: 1,\n          transition: !animated ? { type: false, duration: 0 } : {}\n        }}\n      />\n      {children && <Fragment>{typeof children === 'function' ? (children as NodeChildrenAsFunction)(nodeChildProps) : children}</Fragment>}\n      {icon && properties.icon && <CloneElement<IconProps> element={icon} {...properties.icon} />}\n      {label && labels?.length > 0 && labels.map((l, index) => <CloneElement<LabelProps> element={label} key={index} {...(l as LabelProps)} />)}\n      {port && ports?.length > 0 && ports.map((p) => <CloneElement<PortProps> element={port} key={p.id} active={!isMultiPort && dragging} disabled={isDisabled || !linkable} offsetX={newX} offsetY={newY} onDragStart={onDragStartCallback} onDrag={onDragCallback} onDragEnd={onDragEndCallback} {...(p as PortProps)} id={`${id}-port-${p.id}`} />)}\n      {!isDisabled && isActive && !readonly && remove && removable && (\n        <CloneElement<RemoveProps>\n          element={remove}\n          y={height / 2}\n          x={width}\n          onClick={(event: React.MouseEvent<SVGGElement, MouseEvent>) => {\n            event.preventDefault();\n            event.stopPropagation();\n            onRemove?.(event, properties);\n            setDeleteHovered(false);\n          }}\n          onEnter={() => setDeleteHovered(true)}\n          onLeave={() => setDeleteHovered(false)}\n        />\n      )}\n      <g>\n        {edges?.length > 0 &&\n          edges.map((e: any) => {\n            const element = typeof childEdge === 'function' ? childEdge(e) : childEdge;\n            return (\n              <CloneElement<EdgeProps>\n                key={e.id}\n                element={element}\n                id={`${id}-edge-${e.id}`}\n                disabled={isDisabled}\n                {...e}\n                properties={{\n                  ...e.properties,\n                  ...(e.data ? { data: e.data } : {})\n                }}\n              />\n            );\n          })}\n        {nodes?.length > 0 &&\n          nodes.map(({ children, ...n }: any) => {\n            const element = typeof childNode === 'function' ? childNode(n) : childNode;\n            const elementDisabled = element.props?.disabled != null ? element.props.disabled : disabled;\n            const elementAnimated = element.props?.animated != null ? element.props.animated : animated;\n            const elementDraggable = element.props?.draggable != null ? element.props.draggable : draggable;\n            const elementLinkable = element.props?.linkable != null ? element.props.linkable : linkable;\n            const elementSelectable = element.props?.selectable != null ? element.props.selectable : selectable;\n            const elementRemovable = element.props?.removable != null ? element.props.removable : removable;\n            return <CloneElement<NodeProps> key={n.id} element={element} id={`${id}-node-${n.id}`} disabled={elementDisabled} nodes={children} offsetX={newX} offsetY={newY} animated={elementAnimated} children={element.props.children} childNode={childNode} dragCursor={dragCursor} dragType={dragType} childEdge={childEdge} draggable={elementDraggable} linkable={elementLinkable} selectable={elementSelectable} removable={elementRemovable} onDragStart={onDragStart} onDrag={onDrag} onDragEnd={onDragEnd} onClick={onClick} onEnter={onEnter} onLeave={onLeave} onKeyDown={onKeyDown} onRemove={onRemove} {...n} />;\n          })}\n      </g>\n    </motion.g>\n  );\n};\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport css from './Arrow.module.css';\n\nexport interface ArrowProps {\n  size?: number;\n  x?: number;\n  y?: number;\n  angle?: number;\n  className?: string;\n  style?: any;\n}\n\nexport const Arrow: FC<ArrowProps> = ({\n  size = 8,\n  y = 0,\n  x = 0,\n  angle = 0,\n  className,\n  style\n}) => (\n  <path\n    style={style}\n    transform={`translate(${x}, ${y}) rotate(${angle})`}\n    className={classNames(css.arrow, className)}\n    d={`M0,-${size / 2}L${size},0L0,${size / 2}`}\n  />\n);\n","import React, { FC } from 'react';\nimport { Arrow } from './Arrow';\n\nexport interface MarkerArrowProps {\n  size?: number;\n  style?: any;\n  className?: string;\n}\n\nexport const MarkerArrow: FC<Partial<MarkerArrowProps>> = ({\n  size = 8,\n  className,\n  style\n}) => (\n  <marker\n    id=\"end-arrow\"\n    key=\"end-arrow\"\n    viewBox={`0 -${size / 2} ${size} ${size}`}\n    refX={`${size}`}\n    markerWidth={`${size}`}\n    markerHeight={`${size}`}\n    orient=\"auto\"\n  >\n    <Arrow size={size} style={style} className={className} />\n  </marker>\n);\n","import React, { FC, ReactElement, Ref, useImperativeHandle, forwardRef, useLayoutEffect, useRef, Fragment, useMemo, useState, useCallback, useEffect } from 'react';\nimport { useId, CloneElement } from 'reablocks';\nimport { useGesture } from 'react-use-gesture';\nimport { Node, NodeDragType, NodeProps } from './symbols/Node';\nimport { Edge, EdgeProps } from './symbols/Edge';\nimport { ElkRoot, CanvasDirection, LayoutResult, ElkCanvasLayoutOptions } from './layout';\nimport { MarkerArrow, MarkerArrowProps } from './symbols/Arrow';\nimport { CanvasPosition, EdgeData, NodeData, PortData } from './types';\nimport classNames from 'classnames';\nimport { CanvasProvider, useCanvas } from './utils/CanvasProvider';\nimport { getDragNodeData } from './utils/helpers';\nimport { motion } from 'motion/react';\nimport { ZoomResult } from './utils/useZoom';\nimport css from './Canvas.module.css';\n\nexport interface CanvasContainerProps extends CanvasProps {\n  /**\n   * Nodes to render on the canvas.\n   */\n  nodes?: NodeData[];\n\n  /**\n   * Edges to render on the canvas.\n   */\n  edges?: EdgeData[];\n\n  /**\n   * Key of node/edge ids for selection.\n   */\n  selections?: string[];\n\n  /**\n   * Direction of the canvas layout.\n   */\n  direction?: CanvasDirection;\n\n  /**\n   * Whether the canvas is pannable or not.\n   */\n  pannable?: boolean;\n\n  /**\n   * Type of interaction to use for panning.\n   */\n  panType?: 'scroll' | 'drag';\n\n  /**\n   * Whether the canvas is zoomable or not.\n   */\n  zoomable?: boolean;\n\n  /**\n   * Where to position the canvas on load (if at all)\n   */\n  defaultPosition?: CanvasPosition;\n\n  /**\n   * Fit the canvas on load.\n   */\n  fit?: boolean;\n\n  /**\n   * Max height of the canvas scrollable area.\n   */\n  maxHeight?: number;\n\n  /**\n   * Max width of the canvas scrollable area.\n   */\n  maxWidth?: number;\n\n  /**\n   * Zoom factor.\n   */\n  zoom?: number;\n\n  /**\n   * Min zoom factor.\n   */\n  minZoom?: number;\n\n  /**\n   * Max zoom factor.\n   */\n  maxZoom?: number;\n\n  /**\n   * ELKJS Layout Options\n   */\n  layoutOptions?: ElkCanvasLayoutOptions;\n\n  /**\n   * Callback when a node is linked.\n   */\n  onNodeLink?: (event: any, fromNode: NodeData, toNode: NodeData, fromPort?: PortData) => void;\n\n  /**\n   * Callback to check if a node is linkable or not.\n   */\n  onNodeLinkCheck?: (event: any, fromNode: NodeData, toNode: NodeData, fromPort?: PortData) => undefined | boolean;\n\n  /**\n   * When the zoom changes.\n   */\n  onZoomChange?: (zoom: number) => void;\n\n  /**\n   * When the layout changes.\n   */\n  onLayoutChange?: (layout: ElkRoot) => void;\n}\n\nexport interface CanvasProps {\n  /**\n   * CSS classname for the container.\n   */\n  className?: string;\n\n  /**\n   * Disable all events or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the nodes / edges are animated or not.\n   */\n  animated?: boolean;\n\n  /**\n   * Static height of the canvas.\n   */\n  height?: number;\n\n  /**\n   * Static width of the canvas.\n   */\n  width?: number;\n\n  /**\n   * Whether you can drag connections or not.\n   */\n  readonly?: boolean;\n\n  /**\n   * Element of the drag edge.\n   */\n  dragEdge?: ReactElement<EdgeProps, typeof Edge> | ((edge: EdgeProps) => ReactElement<EdgeProps, typeof Edge>) | null;\n\n  /**\n   * Element of the drag node.\n   */\n  dragNode?: ReactElement<NodeProps, typeof Node> | ((node: NodeProps) => ReactElement<NodeProps, typeof Node>) | null;\n\n  /**\n   * Arrow shown on the edges.\n   */\n  arrow?: ReactElement<MarkerArrowProps, typeof MarkerArrow> | null;\n\n  /**\n   * Node or node callback to return element.\n   */\n  node?: ReactElement<NodeProps, typeof Node> | ((node: NodeProps) => ReactElement<NodeProps, typeof Node>);\n\n  /**\n   * Edge or edge callback to return element.\n   */\n  edge?: ReactElement<EdgeProps, typeof Edge> | ((edge: EdgeProps) => ReactElement<NodeProps, typeof Edge>);\n\n  /**\n   * When the canvas had a mouse enter.\n   */\n  onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n\n  /**\n   * When the canvas had a mouse leave.\n   */\n  onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n\n  /**\n   * When the canvas was clicked.\n   */\n  onCanvasClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n}\n\nexport type CanvasRef = LayoutResult & ZoomResult;\n\nconst InternalCanvas: FC<CanvasProps & { ref?: Ref<CanvasRef> }> = forwardRef(({ className, height = '100%', width = '100%', readonly, disabled = false, animated = true, arrow = <MarkerArrow />, node = <Node />, edge = <Edge />, dragNode = <Node />, dragEdge = <Edge />, onMouseEnter = () => undefined, onMouseLeave = () => undefined, onCanvasClick = () => undefined }, ref: Ref<CanvasRef>) => {\n  const id = useId();\n  const { pannable, dragCoords, dragNode: canvasDragNode, layout, containerRef, svgRef, canvasHeight, canvasWidth, xy, zoom, setZoom, observe, zoomIn, zoomOut, positionCanvas, fitCanvas, setScrollXY, panType, ...rest } = useCanvas();\n  const [dragType, setDragType] = useState<null | NodeDragType>(null);\n\n  useImperativeHandle(ref, () => ({\n    ...rest,\n    observe,\n    zoom,\n    xy,\n    layout,\n    canvasHeight,\n    containerRef,\n    canvasWidth,\n    svgRef,\n    positionCanvas,\n    setZoom,\n    zoomIn,\n    zoomOut,\n    fitCanvas,\n    setScrollXY\n  }));\n\n  const mount = useRef<boolean>(false);\n  const panStartScrollPosition = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n\n  const dragNodeData = useMemo(() => getDragNodeData(canvasDragNode, layout?.children), [canvasDragNode, layout?.children]);\n  const [dragNodeDataWithChildren, setDragNodeDataWithChildren] = useState<{\n    [key: string]: any;\n  }>(dragNodeData);\n  const dragNodeElement = useMemo(() => (typeof dragNode === 'function' ? dragNode(dragNodeData as NodeProps) : dragNode), [dragNode, dragNodeData]);\n  useLayoutEffect(() => {\n    if (!mount.current && layout !== null && xy[0] > 0 && xy[1] > 0) {\n      mount.current = true;\n    }\n  }, [layout, xy]);\n\n  useGesture(\n    {\n      onDrag: ({ movement: [mx, my] }) => {\n        // Update container scroll position during drag\n        if (containerRef.current && !canvasDragNode) {\n          containerRef.current.scrollLeft = panStartScrollPosition.current.x - mx;\n          containerRef.current.scrollTop = panStartScrollPosition.current.y - my;\n        }\n      },\n      onDragStart: () => {\n        // Store the initial scroll position of the container when drag starts\n        panStartScrollPosition.current = {\n          x: containerRef.current?.scrollLeft || 0,\n          y: containerRef.current?.scrollTop || 0\n        };\n      },\n      onWheel: ({ event, delta, last }) => {\n        !last && event.preventDefault();\n\n        const zoomFactor = delta[1] * -0.02;\n\n        if (delta[1] > 0) {\n          zoomOut(zoomFactor);\n        } else {\n          zoomIn(zoomFactor);\n        }\n      }\n    },\n    {\n      enabled: pannable && panType === 'drag',\n      eventOptions: { passive: false },\n      domTarget: containerRef\n    }\n  );\n\n  const onDragStart = useCallback((event) => {\n    setDragType(event.dragType);\n  }, []);\n\n  const createDragNodeChildren = useCallback(\n    (children: any) => {\n      if (!children || !Array.isArray(children)) {\n        return [];\n      }\n\n      return children.map(({ children, ...n }) => {\n        const element = typeof dragNode === 'function' ? dragNode(n as NodeProps) : dragNode;\n        return <CloneElement<NodeProps> key={`${id}-node-${n.id}-node-drag`} element={element} disabled children={element.props.children} animated={animated} nodes={children} childEdge={dragEdge} childNode={dragNode} {...n} onDragStart={onDragStart} id={`${id}-node-${n.id}-node-drag`} />;\n      });\n    },\n    // Passing in dragEdge (JSX) will cause the function to be recalculated constantly,\n    // triggering the below useEffect. Since dragEdge and dragNode are passed in props\n    // on Canvas, they are unlikely to change and can be ignored\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [animated, id]\n  );\n\n  useEffect(() => {\n    if (dragNodeData && Object.keys(dragNodeData).length > 0) {\n      const nodeCopy = { ...dragNodeData };\n      // Node children is expecting a list of React Elements, need to create a list of elements\n      nodeCopy.children = createDragNodeChildren(nodeCopy.children);\n      setDragNodeDataWithChildren(nodeCopy);\n    }\n  }, [createDragNodeChildren, dragNodeData, layout?.children]);\n\n  return (\n    <div\n      style={{ height, width }}\n      className={classNames(css.container, className, {\n        [css.pannable]: pannable,\n        [css.draggable]: panType === 'drag'\n      })}\n      ref={(el) => {\n        // Really not a fan of this API change...\n        // https://github.com/wellyshen/react-cool-dimensions#how-to-share-a-ref\n        observe(el);\n\n        // @ts-ignore\n        containerRef.current = el;\n      }}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      <svg xmlns=\"http://www.w3.org/2000/svg\" id={id} ref={svgRef} height={canvasHeight} width={canvasWidth} onClick={onCanvasClick}>\n        {arrow !== null && (\n          <defs>\n            <CloneElement<MarkerArrowProps> element={arrow} {...(arrow as MarkerArrowProps)} />\n          </defs>\n        )}\n        <motion.g\n          initial={{\n            opacity: 0,\n            scale: 0,\n            transition: {\n              translateX: false,\n              translateY: false\n            }\n          }}\n          animate={{\n            opacity: 1,\n            translateX: xy[0],\n            translateY: xy[1],\n            scale: zoom,\n            transition: animated\n              ? {\n                velocity: 100,\n                translateX: { duration: mount.current ? 0.3 : 0 },\n                translateY: { duration: mount.current ? 0.3 : 0 },\n                opacity: { duration: 0.8 },\n                when: 'beforeChildren'\n              }\n              : {\n                type: false,\n                duration: 0,\n                when: 'beforeChildren'\n              }\n          }}\n        >\n          {layout?.children?.map(({ children, ...n }) => {\n            const element = typeof node === 'function' ? node(n) : node;\n            return <CloneElement<NodeProps> key={n.id} element={element} disabled={disabled} children={element.props.children} animated={animated} nodes={children} childEdge={edge} childNode={node} {...n} onDragStart={onDragStart} id={`${id}-node-${n.id}`} />;\n          })}\n          {layout?.edges?.map((e) => {\n            const element = typeof edge === 'function' ? edge(e) : edge;\n            return (\n              <CloneElement<EdgeProps>\n                key={e.id}\n                element={element}\n                disabled={disabled}\n                children={element.props.children}\n                {...e}\n                properties={{\n                  ...e.properties,\n                  ...(e.data ? { data: e.data } : {})\n                }}\n                id={`${id}-edge-${e.id}`}\n              />\n            );\n          })}\n          {dragCoords !== null && dragEdge && dragType === 'port' && !readonly && <CloneElement<EdgeProps> element={dragEdge} id={`${id}-edge-drag`} disabled sections={dragCoords} />}\n          {layout?.children?.map(({ children, ports, ...n }) => (\n            <Fragment key={n.id}>\n              {ports?.length > 0 && (\n                <motion.g\n                  key={n.id}\n                  initial={{\n                    translateX: n.x,\n                    translateY: n.y\n                  }}\n                  animate={{\n                    translateX: n.x,\n                    translateY: n.y\n                  }}\n                  transition={{ duration: 0 }}\n                >\n                  {ports.map((port, index) => (\n                    <use key={index} xlinkHref={`#${id}-node-${n.id}-port-${port.id}`} style={{ pointerEvents: 'none' }} />\n                  ))}\n                </motion.g>\n              )}\n            </Fragment>\n          ))}\n          {dragCoords !== null && dragNodeDataWithChildren && dragType === 'node' && !readonly && <CloneElement<NodeProps> {...dragNodeDataWithChildren} element={dragNodeElement} height={dragNodeDataWithChildren?.props?.height || dragNodeDataWithChildren?.height} width={dragNodeDataWithChildren?.props?.width || dragNodeDataWithChildren?.width} id={`${id}-node-drag`} animated={animated} className={css.dragNode} disabled x={dragCoords[0].endPoint.x} y={dragCoords[0].endPoint.y} />}\n        </motion.g>\n      </svg>\n    </div>\n  );\n});\n\nexport const Canvas: FC<CanvasContainerProps & { ref?: Ref<CanvasRef> }> = forwardRef(({ selections = [], readonly = false, fit = false, nodes = [], edges = [], maxHeight = 2000, maxWidth = 2000, direction = 'DOWN', pannable = true, panType = 'scroll', zoom = 1, defaultPosition = CanvasPosition.CENTER, zoomable = true, minZoom = -0.5, maxZoom = 1, onNodeLink = () => undefined, onNodeLinkCheck = () => undefined, onLayoutChange = () => undefined, onZoomChange = () => undefined, layoutOptions, ...rest }, ref: Ref<CanvasRef>) => (\n  <CanvasProvider layoutOptions={layoutOptions} nodes={nodes} edges={edges} zoom={zoom} defaultPosition={defaultPosition} minZoom={minZoom} maxZoom={maxZoom} fit={fit} maxHeight={maxHeight} maxWidth={maxWidth} direction={direction} pannable={pannable} panType={panType} zoomable={zoomable} readonly={readonly} onLayoutChange={onLayoutChange} selections={selections} onZoomChange={onZoomChange} onNodeLink={onNodeLink} onNodeLinkCheck={onNodeLinkCheck}>\n    <InternalCanvas ref={ref} {...rest} />\n  </CanvasProvider>\n));\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport css from './Icon.module.css';\n\nexport interface IconProps {\n  x: number;\n  y: number;\n  url: string;\n  height: number;\n  width: number;\n  style?: any;\n  className?: string;\n}\n\nexport const Icon: FC<Partial<IconProps>> = ({\n  x,\n  y,\n  url,\n  style,\n  className,\n  height = 40,\n  width = 40\n}) => (\n  <g\n    className={classNames(css.icon, className)}\n    transform={`translate(${x - width / 2}, ${y - height / 2})`}\n  >\n    <image style={style} xlinkHref={url} width={width} height={height} />\n  </g>\n);\n","import { EdgeData, NodeData, PortData } from '../types';\n\n/**\n * Helper function for upserting a node in a edge.\n */\nexport function upsertNode(\n  nodes: NodeData[],\n  edges: EdgeData[],\n  edge: EdgeData,\n  newNode: NodeData\n) {\n  const oldEdgeIndex = edges.findIndex((e) => e.id === edge.id);\n  const edgeBeforeNewNode = {\n    ...edge,\n    id: `${edge.from}-${newNode.id}`,\n    to: newNode.id\n  };\n  const edgeAfterNewNode = {\n    ...edge,\n    id: `${newNode.id}-${edge.to}`,\n    from: newNode.id\n  };\n\n  if (edge.fromPort && edge.toPort) {\n    edgeBeforeNewNode.fromPort = edge.fromPort;\n    edgeBeforeNewNode.toPort = `${newNode.id}-to`;\n\n    edgeAfterNewNode.fromPort = `${newNode.id}-from`;\n    edgeAfterNewNode.toPort = edge.toPort;\n  }\n\n  edges.splice(oldEdgeIndex, 1, edgeBeforeNewNode, edgeAfterNewNode);\n\n  return {\n    nodes: [...nodes, newNode],\n    edges: [...edges]\n  };\n}\n\n/**\n * Helper function for removing a node between edges and\n * linking the children.\n */\nexport function removeAndUpsertNodes(\n  nodes: NodeData[],\n  edges: EdgeData[],\n  removeNodes: NodeData | NodeData[],\n  onNodeLinkCheck?: (\n    newNodes: NodeData[],\n    newEdges: EdgeData[],\n    from: NodeData,\n    to: NodeData,\n    port?: PortData\n  ) => undefined | boolean\n) {\n  if (!Array.isArray(removeNodes)) {\n    removeNodes = [removeNodes];\n  }\n\n  const nodeIds = removeNodes.map((n) => n.id);\n  const newNodes = nodes.filter((n) => !nodeIds.includes(n.id));\n  const newEdges = edges.filter(\n    (e) => !nodeIds.includes(e.from) && !nodeIds.includes(e.to)\n  );\n\n  for (const nodeId of nodeIds) {\n    const sourceEdges = edges.filter((e) => e.to === nodeId);\n    const targetEdges = edges.filter((e) => e.from === nodeId);\n\n    for (const sourceEdge of sourceEdges) {\n      for (const targetEdge of targetEdges) {\n        const sourceNode = nodes.find((n) => n.id === sourceEdge.from);\n        const targetNode = nodes.find((n) => n.id === targetEdge.to);\n        if (sourceNode && targetNode) {\n          const canLink = onNodeLinkCheck?.(\n            newNodes,\n            newEdges,\n            sourceNode,\n            targetNode\n          );\n          if (canLink === undefined || canLink) {\n            newEdges.push({\n              id: `${sourceNode.id}-${targetNode.id}`,\n              from: sourceNode.id,\n              to: targetNode.id,\n              parent: sourceNode?.parent\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    edges: newEdges,\n    nodes: newNodes\n  };\n}\n\n/**\n * Helper function to remove a node and its related edges.\n */\nexport function removeNode(\n  nodes: NodeData[],\n  edges: EdgeData[],\n  removeNodes: string | string[]\n) {\n  if (!Array.isArray(removeNodes)) {\n    removeNodes = [removeNodes];\n  }\n\n  const newNodes = [];\n  const newEdges = [];\n\n  for (const node of nodes) {\n    const has = removeNodes.some((n) => n === node.id);\n    if (!has) {\n      newNodes.push(node);\n    }\n  }\n\n  for (const edge of edges) {\n    const has = removeNodes.some((n) => n === edge.from || n === edge.to);\n    if (!has) {\n      newEdges.push(edge);\n    }\n  }\n\n  return {\n    nodes: newNodes,\n    edges: newEdges\n  };\n}\n\n/**\n * Helper function to remove a node's related edges.\n */\nexport function removeEdgesFromNode(nodeId: string, edges: EdgeData[]) {\n  return edges.filter((edge) => !(edge.to === nodeId || edge.from === nodeId));\n}\n\n/**\n * Remove edge(s)\n */\nexport function removeEdge(edges: EdgeData[], edge: EdgeData | EdgeData[]) {\n  const deletions: EdgeData[] = !Array.isArray(edge) ? [edge] : edge;\n  const edgeIds = deletions.map((e) => e.id);\n  return edges.filter((e) => !edgeIds.includes(e.id));\n}\n\n/**\n * Create an edge given 2 nodes.\n */\nexport function createEdgeFromNodes(fromNode: NodeData, toNode: NodeData) {\n  return {\n    id: `${fromNode.id}-${toNode.id}`,\n    from: fromNode.id,\n    to: toNode.id,\n    parent: toNode.parent\n  };\n}\n\n/**\n * Add a node and optional edge.\n */\nexport function addNodeAndEdge(\n  nodes: NodeData[],\n  edges: EdgeData[],\n  node: NodeData,\n  toNode?: NodeData\n) {\n  return {\n    nodes: [...nodes, node],\n    edges: [...edges, ...(toNode ? [createEdgeFromNodes(toNode, node)] : [])]\n  };\n}\n","import React, { useState } from 'react';\nimport { useHotkeys } from 'reakeys';\nimport { EdgeData, NodeData } from '../types';\nimport { removeNode } from './crudHelpers';\n\nexport type HotkeyTypes = 'selectAll' | 'deselect' | 'delete';\n\nexport interface SelectionProps {\n  /**\n   * Current selections.\n   *\n   * Contains both nodes and edges ids.\n   */\n  selections?: string[];\n\n  /**\n   * Node datas.\n   */\n  nodes?: NodeData[];\n\n  /**\n   * Edge datas.\n   */\n  edges?: EdgeData[];\n\n  /**\n   * Disabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Hotkey types\n   */\n  hotkeys?: HotkeyTypes[];\n\n  /**\n   * On selection change.\n   */\n  onSelection?: (newSelectedIds: string[]) => void;\n\n  /**\n   * On data change.\n   */\n  onDataChange?: (nodes: NodeData[], edges: EdgeData[]) => void;\n}\n\nexport interface SelectionResult {\n  /**\n   * Selections id array (of nodes and edges).\n   */\n  selections: string[];\n\n  /**\n   * Clear selections method.\n   */\n  clearSelections: (value?: string[]) => void;\n\n  /**\n   * A selection method.\n   */\n  addSelection: (value: string) => void;\n\n  /**\n   * Remove selection method.\n   */\n  removeSelection: (value: string) => void;\n\n  /**\n   * Toggle existing selection on/off method.\n   */\n  toggleSelection: (value: string) => void;\n\n  /**\n   * Set internal selections.\n   */\n  setSelections: (value: string[]) => void;\n\n  /**\n   * On click event pass through.\n   */\n  onClick?: (\n    event: React.MouseEvent<SVGGElement, MouseEvent>,\n    data: any\n  ) => void;\n\n  /**\n   * On canvas click event pass through.\n   */\n  onCanvasClick?: (event?: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n\n  /**\n   * On keydown event pass through.\n   */\n  onKeyDown?: (event: React.KeyboardEvent<SVGGElement>) => void;\n}\n\nexport const useSelection = ({\n  selections = [],\n  nodes = [],\n  edges = [],\n  hotkeys = ['selectAll', 'deselect', 'delete'],\n  disabled,\n  onSelection,\n  onDataChange\n}: SelectionProps): SelectionResult => {\n  const [internalSelections, setInternalSelections] =\n    useState<string[]>(selections);\n  const [metaKeyDown, setMetaKeyDown] = useState<boolean>(false);\n\n  const addSelection = (item: string) => {\n    if (!disabled) {\n      const has = internalSelections.includes(item);\n      if (!has) {\n        const next = [...internalSelections, item];\n        onSelection?.(next);\n        setInternalSelections(next);\n      }\n    }\n  };\n\n  const removeSelection = (item: string) => {\n    if (!disabled) {\n      const has = internalSelections.includes(item);\n      if (has) {\n        const next = internalSelections.filter((i) => i !== item);\n        onSelection?.(next);\n        setInternalSelections(next);\n      }\n    }\n  };\n\n  const toggleSelection = (item: string) => {\n    const has = internalSelections.includes(item);\n    if (has) {\n      removeSelection(item);\n    } else {\n      addSelection(item);\n    }\n  };\n\n  const clearSelections = (next = []) => {\n    if (!disabled) {\n      setInternalSelections(next);\n      onSelection?.(next);\n    }\n  };\n\n  const onClick = (event, data) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (!metaKeyDown) {\n      clearSelections([data.id]);\n    } else {\n      toggleSelection(data.id);\n    }\n\n    setMetaKeyDown(false);\n  };\n\n  const onKeyDown = (event) => {\n    event.preventDefault();\n    setMetaKeyDown(event.metaKey || event.ctrlKey);\n  };\n\n  const onCanvasClick = () => {\n    clearSelections();\n    setMetaKeyDown(false);\n  };\n\n  useHotkeys([\n    {\n      name: 'Select All',\n      keys: 'mod+a',\n      disabled: !hotkeys.includes('selectAll'),\n      category: 'Canvas',\n      description: 'Select all nodes and edges',\n      callback: (event) => {\n        event.preventDefault();\n\n        if (!disabled) {\n          const next = nodes.map((n) => n.id);\n          onDataChange?.(nodes, edges);\n          onSelection?.(next);\n          setInternalSelections(next);\n        }\n      }\n    },\n    {\n      name: 'Delete Selections',\n      category: 'Canvas',\n      disabled: !hotkeys.includes('delete'),\n      description: 'Delete selected nodes and edges',\n      keys: 'backspace',\n      callback: (event) => {\n        if (!disabled) {\n          event.preventDefault();\n          const result = removeNode(nodes, edges, internalSelections);\n          onDataChange?.(result.nodes, result.edges);\n          onSelection?.([]);\n          setInternalSelections([]);\n        }\n      }\n    },\n    {\n      name: 'Deselect Selections',\n      category: 'Canvas',\n      disabled: !hotkeys.includes('deselect'),\n      description: 'Deselect selected nodes and edges',\n      keys: 'escape',\n      callback: (event) => {\n        if (!disabled) {\n          event.preventDefault();\n          onSelection?.([]);\n          setInternalSelections([]);\n        }\n      }\n    }\n  ]);\n\n  return {\n    onClick,\n    onKeyDown,\n    onCanvasClick,\n    selections: internalSelections,\n    clearSelections,\n    addSelection,\n    removeSelection,\n    toggleSelection,\n    setSelections: setInternalSelections\n  };\n};\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useHotkeys } from 'reakeys';\nimport { EdgeData, NodeData } from '../types';\nimport Undoo from 'undoo';\n\nexport interface UndoRedoEvent {\n  /**\n   * Updated node datas.\n   */\n  nodes?: NodeData[];\n\n  /**\n   * Updated edge datas.\n   */\n  edges?: EdgeData[];\n\n  /**\n   * Type of change.\n   */\n  type: 'undo' | 'redo' | 'clear';\n\n  /**\n   * Whether you can undo now.\n   */\n  canUndo: boolean;\n\n  /**\n   * Whether you can redo now.\n   */\n  canRedo: boolean;\n}\n\nexport interface UndoProps {\n  /**\n   * Current node datas.\n   */\n  nodes: NodeData[];\n\n  /**\n   * Current edge datas.\n   */\n  edges: EdgeData[];\n\n  /**\n   * Max history count.\n   *\n   * @default 20\n   */\n  maxHistory?: number;\n\n  /**\n   * Disabled or not.\n   *\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * On undo/redo event handler.\n   */\n  onUndoRedo: (state: UndoRedoEvent) => void;\n}\n\nexport interface UndoResult {\n  /**\n   * Can undo or not.\n   */\n  canUndo: boolean;\n\n  /**\n   * Can redo or not.\n   */\n  canRedo: boolean;\n\n  /**\n   * Count of existing changes.\n   */\n  count: () => number;\n\n  /**\n   * Clear state.\n   */\n  clear: (nodes: NodeData[], edges: EdgeData[]) => void;\n\n  /**\n   * Get history of state.\n   */\n  history: () => { nodes: NodeData[]; edges: EdgeData[] }[];\n\n  /**\n   * Perform an redo.\n   */\n  redo: () => void;\n\n  /**\n   * Perform a undo.\n   */\n  undo: () => void;\n}\n\nexport const useUndo = ({\n  nodes,\n  edges,\n  disabled,\n  maxHistory = 20,\n  onUndoRedo\n}: UndoProps): UndoResult => {\n  const [canUndo, setCanUndo] = useState<boolean>(false);\n  const [canRedo, setCanRedo] = useState<boolean>(false);\n\n  const manager = useRef<Undoo>(\n    new Undoo({\n      maxLength: maxHistory\n    })\n  );\n\n  // Reference: https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n  const callbackRef = useRef(onUndoRedo);\n  useEffect(() => {\n    callbackRef.current = onUndoRedo;\n  }, [onUndoRedo]);\n\n  useEffect(() => {\n    manager.current.save({\n      nodes,\n      edges\n    });\n\n    setCanUndo(manager.current.canUndo());\n    setCanRedo(manager.current.canRedo());\n  }, [nodes, edges]);\n\n  const undo = useCallback(() => {\n    manager.current.undo((state) => {\n      const nextUndo = manager.current.canUndo();\n      const nextRedo = manager.current.canRedo();\n      setCanUndo(nextUndo);\n      setCanRedo(nextRedo);\n\n      callbackRef.current({\n        ...state,\n        type: 'undo',\n        canUndo: nextUndo,\n        canRedo: nextRedo\n      });\n    });\n  }, []);\n\n  const redo = useCallback(() => {\n    manager.current.redo((state) => {\n      const nextUndo = manager.current.canUndo();\n      const nextRedo = manager.current.canRedo();\n      setCanUndo(nextUndo);\n      setCanRedo(nextRedo);\n\n      callbackRef.current({\n        ...state,\n        type: 'redo',\n        canUndo: nextUndo,\n        canRedo: nextRedo\n      });\n    });\n  }, []);\n\n  const clear = useCallback((nodes: NodeData[], edges: EdgeData[]) => {\n    manager.current.clear();\n    setCanUndo(false);\n    setCanRedo(false);\n\n    callbackRef.current({\n      type: 'clear',\n      canUndo: false,\n      canRedo: false\n    });\n\n    manager.current.save({\n      nodes,\n      edges\n    });\n  }, []);\n\n  useHotkeys([\n    {\n      name: 'Undo',\n      keys: 'mod+z',\n      category: 'Canvas',\n      description: 'Undo changes',\n      callback: (event) => {\n        event.preventDefault();\n        if (!disabled && canUndo) {\n          undo();\n        }\n      }\n    },\n    {\n      name: 'Redo',\n      keys: 'mod+shift+z',\n      category: 'Canvas',\n      description: 'Redo changes',\n      callback: (event) => {\n        event.preventDefault();\n        if (!disabled && canRedo) {\n          redo();\n        }\n      }\n    }\n  ]);\n\n  return {\n    canUndo,\n    canRedo,\n    count: () => manager.current.count(),\n    history: () => manager.current.history(),\n    clear,\n    redo,\n    undo\n  } as UndoResult;\n};\n","import { RefObject, useCallback, useEffect, useRef, useState } from 'react';\nimport { CanvasRef } from '../Canvas';\nimport { getCoords } from '../utils/helpers';\nimport { Matrix2D, Point2D } from 'kld-affine';\nimport { IntersectionQuery } from 'kld-intersections';\nimport { LayoutNodeData } from '../types';\n\nexport interface ProximityProps {\n  /**\n   * Disable proximity or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Min distance required before match is made.\n   *\n   * @default 40\n   */\n  minDistance?: number;\n\n  /**\n   * Ref pointer to the canvas.\n   */\n  canvasRef?: RefObject<CanvasRef>;\n\n  /**\n   * Distance from the match.\n   */\n  onDistanceChange?: (distance: number | null) => void;\n\n  /**\n   * When a match state has changed.\n   */\n  onMatchChange?: (matche: string | null, distance: number | null) => void;\n\n  /**\n   * When the pointer intersects a node.\n   */\n  onIntersects?: (matche: string | null) => void;\n}\n\nexport interface ProximityResult {\n  /**\n   * The matched id of the node.\n   */\n  match: string | null;\n\n  /**\n   * Event for drag started.\n   */\n  onDragStart: (event: PointerEvent) => void;\n\n  /**\n   * Event for active dragging.\n   */\n  onDrag: (event: PointerEvent) => void;\n\n  /**\n   * Event for drag ended.\n   */\n  onDragEnd: (event: PointerEvent) => void;\n}\n\ninterface PointNode {\n  points: Point2D[];\n  node: LayoutNodeData;\n}\n\nconst buildPoints = (nodes: LayoutNodeData[], parent?: LayoutNodeData) => {\n  const results: PointNode[] = [];\n\n  if (nodes?.length) {\n    for (const node of nodes) {\n      let x = node.x;\n      let y = node.y;\n\n      // NOTE: If we have a parent, let's update the points\n      // to account for the parent's position\n      if (parent) {\n        x = parent.x + x;\n        y = parent.y + y;\n      }\n\n      const points = [\n        // top-left\n        new Point2D(x, y),\n        // bottom-right\n        new Point2D(x + node.width, y + node.height)\n      ];\n\n      results.push({\n        points,\n        node\n      });\n\n      if (node.children?.length) {\n        results.push(...buildPoints(node.children, node));\n      }\n    }\n  }\n\n  return results;\n};\n\nconst distanceFromNode = (mousePoint: Point2D, node: PointNode) => {\n  const [tl, br] = node.points;\n  let dx = 0;\n  let dy = 0;\n\n  // Compute distance to elem in X\n  if (mousePoint.x < tl.x) {\n    dx = tl.x - mousePoint.x;\n  } else if (mousePoint.x > br.x) {\n    dx = br.x - mousePoint.x;\n  }\n\n  // Compute distance to elem in Y\n  if (mousePoint.y < tl.y) {\n    dy = tl.y - mousePoint.y;\n  } else if (mousePoint.y > br.y) {\n    dy = br.y - mousePoint.y;\n  }\n\n  return Math.floor(Math.sqrt(dx * dx + dy * dy));\n};\n\nconst findNodeIntersection = (\n  event: PointerEvent,\n  matrix: Matrix2D,\n  points: PointNode[],\n  minDistance: number\n) => {\n  const cubes = [];\n  const mousePoint = new Point2D(event.x, event.y).transform(matrix);\n\n  for (const point of points) {\n    // TODO: Make this support other shape types...\n    const intersects = IntersectionQuery.pointInRectangle(\n      mousePoint,\n      point.points[0],\n      point.points[1]\n    );\n\n    // Calc the distances\n    // https://github.com/thelonious/kld-affine/issues/24\n    const minDist = distanceFromNode(mousePoint, point);\n\n    cubes.push({\n      node: point.node,\n      minDist,\n      intersects\n    });\n  }\n\n  let foundDist = minDistance;\n  let intersectedNodeId = null;\n  let foundNodeId = null;\n  for (const cube of cubes) {\n    if (cube.minDist < foundDist && !cube.intersects) {\n      foundNodeId = cube.node.id;\n      foundDist = cube.minDist;\n    }\n\n    if (cube.intersects) {\n      intersectedNodeId = cube.node.id;\n    }\n  }\n\n  if (intersectedNodeId) {\n    // We are are just inside a node already\n    // and there is no closer children ( nested case )\n    if (!foundNodeId || foundNodeId === intersectedNodeId) {\n      // If we are inside the intersected node and its the\n      // closest node, let's reset the distance to 0\n      foundNodeId = intersectedNodeId;\n      foundDist = 0;\n    }\n  }\n\n  return {\n    intersectedNodeId,\n    foundNodeId,\n    foundDist\n  };\n};\n\nexport const useProximity = ({\n  canvasRef,\n  disabled,\n  minDistance = 40,\n  ...rest\n}: ProximityProps) => {\n  const lastIntersectRef = useRef<string | null>(null);\n  const lastMatchRef = useRef<string | null>(null);\n  const lastDistance = useRef<number | null>(null);\n  const frame = useRef<number>(0);\n\n  // Reference: https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n  const eventRefs = useRef(rest);\n  useEffect(() => {\n    eventRefs.current = rest;\n  }, [rest]);\n\n  const [match, setMatch] = useState<string | null>(null);\n  const [matrix, setMatrix] = useState<Matrix2D | null>(null);\n  const [points, setPoints] = useState<PointNode[] | null>(null);\n\n  const onDragStart = useCallback(() => {\n    if (disabled) {\n      return;\n    }\n\n    const ref = canvasRef.current;\n\n    // @ts-ignore\n    setMatrix(\n      getCoords({\n        containerRef: ref.containerRef,\n        zoom: ref.zoom,\n        layoutXY: ref.xy\n      })\n    );\n    setPoints(buildPoints(ref.layout.children));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disabled]);\n\n  const onDrag = useCallback(\n    (event: PointerEvent) => {\n      if (!matrix || disabled) {\n        return;\n      }\n\n      const { onMatchChange, onIntersects, onDistanceChange } =\n        eventRefs.current;\n\n      const { intersectedNodeId, foundNodeId, foundDist } =\n        findNodeIntersection(event, matrix, points, minDistance);\n      const nextDist = foundDist !== minDistance ? foundDist : null;\n\n      if (foundNodeId !== lastMatchRef.current) {\n        onMatchChange?.(foundNodeId, foundDist);\n      }\n\n      if (intersectedNodeId !== lastIntersectRef.current) {\n        onIntersects?.(intersectedNodeId);\n      }\n\n      if (onDistanceChange && nextDist !== lastDistance.current) {\n        cancelAnimationFrame(frame.current);\n        frame.current = requestAnimationFrame(() => {\n          onDistanceChange(nextDist);\n        });\n      }\n\n      // Hold these in refs for race cases\n      lastIntersectRef.current = intersectedNodeId;\n      lastMatchRef.current = foundNodeId;\n      lastDistance.current = nextDist;\n\n      setMatch(foundNodeId);\n    },\n    [matrix, disabled, minDistance, points]\n  );\n\n  useEffect(() => {\n    return () => cancelAnimationFrame(frame.current);\n  });\n\n  const onDragEnd = useCallback(() => {\n    if (!disabled) {\n      setMatch(null);\n      setMatrix(null);\n      setPoints(null);\n    }\n  }, [disabled]);\n\n  return {\n    match,\n    onDragStart,\n    onDrag,\n    onDragEnd\n  } as ProximityResult;\n};\n","import { EdgeData, NodeData } from '../types';\n\n/**\n * Helper function to determine if edge already has a link.\n */\nexport function hasLink(edges: EdgeData[], from: NodeData, to: NodeData) {\n  return edges.some((e) => e.from === from.id && e.to === to.id);\n}\n\n/**\n * Get sources pointing to a node.\n */\nfunction getSourceNodesForTargetId(\n  nodes: NodeData[],\n  edges: EdgeData[],\n  nodeId: string\n) {\n  const sourceNodeIds = edges.reduce((acc, edge) => {\n    if (edge.to === nodeId) {\n      acc.push(edge.from);\n    }\n    return acc;\n  }, []);\n\n  const node = nodes.find((n) => n.id === nodeId);\n\n  if (node?.parent) {\n    sourceNodeIds.push(node.parent);\n  }\n\n  return nodes.filter((n) => sourceNodeIds.includes(n.id));\n}\n\n/**\n * Detect if there is a circular reference from the from to the source node.\n */\nexport function detectCircular(\n  nodes: NodeData[],\n  edges: EdgeData[],\n  fromNode: NodeData,\n  toNode: NodeData\n) {\n  let found = false;\n\n  const traverse = (nodeId: string) => {\n    const sourceNodes = getSourceNodesForTargetId(nodes, edges, nodeId);\n    for (const node of sourceNodes) {\n      if (node.id !== toNode.id) {\n        traverse(node.id);\n      } else {\n        found = true;\n        break;\n      }\n    }\n  };\n\n  traverse(fromNode.id);\n\n  return found;\n}\n\n/**\n * Given a node id, get all the parent nodes recursively.\n */\nexport const getParentsForNodeId = (\n  nodes: NodeData[],\n  edges: EdgeData[],\n  startId: string\n) => {\n  const result = [];\n\n  const traverse = (nodeId: string) => {\n    const sourceNodes = getSourceNodesForTargetId(nodes, edges, nodeId);\n    for (const node of sourceNodes) {\n      const has = result.find((n) => n.id === node.id);\n      if (!has) {\n        result.push(node);\n        traverse(node.id);\n      }\n    }\n  };\n\n  traverse(startId);\n\n  return result;\n};\n\n/**\n * Get edge data given a node.\n */\nexport function getEdgesByNode(edges: EdgeData[], node: NodeData) {\n  const to = [];\n  const from = [];\n\n  for (const edge of edges) {\n    if (edge.to === node.id) {\n      to.push(edge);\n    }\n    if (edge.from === node.id) {\n      from.push(edge);\n    }\n  }\n\n  return {\n    to,\n    from,\n    all: [...to, ...from]\n  };\n}\n"],"names":["CanvasPosition","text","children","port","edge","pannable","xy","nodes","dragNode","disabled","active","css","Fragment","path","deleteHovered","d","icon","draggable","dragging","dragType","arrow","_a","_b","edges"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"debugId":null}}]
}