{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/basic-languages/hcl/hcl.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/hcl/hcl.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"', notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".hcl\",\n  keywords: [\n    \"var\",\n    \"local\",\n    \"path\",\n    \"for_each\",\n    \"any\",\n    \"string\",\n    \"number\",\n    \"bool\",\n    \"true\",\n    \"false\",\n    \"null\",\n    \"if \",\n    \"else \",\n    \"endif \",\n    \"for \",\n    \"in\",\n    \"endfor\"\n  ],\n  operators: [\n    \"=\",\n    \">=\",\n    \"<=\",\n    \"==\",\n    \"!=\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"&&\",\n    \"||\",\n    \"!\",\n    \"<\",\n    \">\",\n    \"?\",\n    \"...\",\n    \":\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  terraformFunctions: /(abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)/,\n  terraformMainBlocks: /(module|data|terraform|resource|provider|variable|output|locals)/,\n  tokenizer: {\n    root: [\n      // highlight main blocks\n      [\n        /^@terraformMainBlocks([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\n        [\"type\", \"\", \"string\", \"\", \"string\", \"\", \"@brackets\"]\n      ],\n      // highlight all the remaining blocks\n      [\n        /(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\n        [\"identifier\", \"\", \"string\", \"\", \"string\", \"\", \"@brackets\"]\n      ],\n      // highlight block\n      [\n        /(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)(=)(\\{)/,\n        [\"identifier\", \"\", \"string\", \"\", \"operator\", \"\", \"@brackets\"]\n      ],\n      // terraform general highlight - shared with expressions\n      { include: \"@terraform\" }\n    ],\n    terraform: [\n      // highlight terraform functions\n      [/@terraformFunctions(\\()/, [\"type\", \"@brackets\"]],\n      // all other words are variables or keywords\n      [\n        /[a-zA-Z_]\\w*-*/,\n        // must work with variables such as foo-bar and also with negative numbers\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"variable\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      { include: \"@heredoc\" },\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      // numbers\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d[\\d']*/, \"number\"],\n      [/\\d/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      // delimiter: after number because of .\\d floats\n      // strings\n      [/\"/, \"string\", \"@string\"],\n      // this will include expressions\n      [/'/, \"invalid\"]\n    ],\n    heredoc: [\n      [/<<[-]*\\s*[\"]?([\\w\\-]+)[\"]?/, { token: \"string.heredoc.delimiter\", next: \"@heredocBody.$1\" }]\n    ],\n    heredocBody: [\n      [\n        /([\\w\\-]+)$/,\n        {\n          cases: {\n            \"$1==$S2\": [\n              {\n                token: \"string.heredoc.delimiter\",\n                next: \"@popall\"\n              }\n            ],\n            \"@default\": \"string.heredoc\"\n          }\n        }\n      ],\n      [/./, \"string.heredoc\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"],\n      [/#.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/\\$\\{/, { token: \"delimiter\", next: \"@stringExpression\" }],\n      [/[^\\\\\"\\$]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@popall\"]\n    ],\n    stringInsideExpression: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@pop\"]\n    ],\n    stringExpression: [\n      [/\\}/, { token: \"delimiter\", next: \"@pop\" }],\n      [/\"/, \"string\", \"@stringInsideExpression\"],\n      { include: \"@terraform\" }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}