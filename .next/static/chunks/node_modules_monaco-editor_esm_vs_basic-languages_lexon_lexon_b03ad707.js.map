{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/oscarthroedsson/Documents/code/myownprojects/JSONFloat/node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n    // blockComment: ['COMMENT', '.'],\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \":\", close: \".\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \":\", close: \".\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  // defaultToken: 'invalid',\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\n    \"lexon\",\n    \"lex\",\n    \"clause\",\n    \"terms\",\n    \"contracts\",\n    \"may\",\n    \"pay\",\n    \"pays\",\n    \"appoints\",\n    \"into\",\n    \"to\"\n  ],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\n    \"less\",\n    \"greater\",\n    \"equal\",\n    \"le\",\n    \"gt\",\n    \"or\",\n    \"and\",\n    \"add\",\n    \"added\",\n    \"subtract\",\n    \"subtracted\",\n    \"multiply\",\n    \"multiplied\",\n    \"times\",\n    \"divide\",\n    \"divided\",\n    \"is\",\n    \"be\",\n    \"certified\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // comment\n      [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\n      // special identifier cases\n      [\n        /\"/,\n        {\n          token: \"identifier.quote\",\n          bracket: \"@open\",\n          next: \"@quoted_identifier\"\n        }\n      ],\n      [\n        \"LEX$\",\n        {\n          token: \"keyword\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }],\n      [\n        \":\",\n        {\n          token: \"delimiter\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      // identifiers and keywords\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@typeKeywords\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      // numbers\n      [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"]\n    ],\n    quoted_identifier: [\n      [/[^\\\\\"]+/, \"identifier\"],\n      [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    space_identifier_until_period: [\n      [\":\", \"delimiter\"],\n      [\" \", { token: \"white\", next: \"@identifier_rest\" }]\n    ],\n    identifier_until_period: [\n      { include: \"@whitespace\" },\n      [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }],\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    identifier_rest: [\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    semver: [\n      { include: \"@whitespace\" },\n      [\":\", \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}