(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/monaco-editor/esm/vs/base/common/arrays.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Returns the last element of an array.
 * @param array The array.
 * @param n Which element from the end (default is zero).
 */ __turbopack_context__.s({
    "ArrayQueue": (()=>ArrayQueue),
    "CallbackIterable": (()=>CallbackIterable),
    "CompareResult": (()=>CompareResult),
    "Permutation": (()=>Permutation),
    "arrayInsert": (()=>arrayInsert),
    "asArray": (()=>asArray),
    "binarySearch": (()=>binarySearch),
    "binarySearch2": (()=>binarySearch2),
    "booleanComparator": (()=>booleanComparator),
    "coalesce": (()=>coalesce),
    "coalesceInPlace": (()=>coalesceInPlace),
    "compareBy": (()=>compareBy),
    "distinct": (()=>distinct),
    "equals": (()=>equals),
    "firstOrDefault": (()=>firstOrDefault),
    "forEachAdjacent": (()=>forEachAdjacent),
    "forEachWithNeighbors": (()=>forEachWithNeighbors),
    "groupAdjacentBy": (()=>groupAdjacentBy),
    "groupBy": (()=>groupBy),
    "insertInto": (()=>insertInto),
    "isFalsyOrEmpty": (()=>isFalsyOrEmpty),
    "isNonEmptyArray": (()=>isNonEmptyArray),
    "numberComparator": (()=>numberComparator),
    "pushMany": (()=>pushMany),
    "pushToEnd": (()=>pushToEnd),
    "pushToStart": (()=>pushToStart),
    "quickSelect": (()=>quickSelect),
    "range": (()=>range),
    "removeFastWithoutKeepingOrder": (()=>removeFastWithoutKeepingOrder),
    "reverseOrder": (()=>reverseOrder),
    "splice": (()=>splice),
    "tail": (()=>tail),
    "tail2": (()=>tail2),
    "tieBreakComparators": (()=>tieBreakComparators)
});
function tail(array, n = 0) {
    return array[array.length - (1 + n)];
}
function tail2(arr) {
    if (arr.length === 0) {
        throw new Error('Invalid tail call');
    }
    return [
        arr.slice(0, arr.length - 1),
        arr[arr.length - 1]
    ];
}
function equals(one, other, itemEquals = (a, b)=>a === b) {
    if (one === other) {
        return true;
    }
    if (!one || !other) {
        return false;
    }
    if (one.length !== other.length) {
        return false;
    }
    for(let i = 0, len = one.length; i < len; i++){
        if (!itemEquals(one[i], other[i])) {
            return false;
        }
    }
    return true;
}
function removeFastWithoutKeepingOrder(array, index) {
    const last = array.length - 1;
    if (index < last) {
        array[index] = array[last];
    }
    array.pop();
}
function binarySearch(array, key, comparator) {
    return binarySearch2(array.length, (i)=>comparator(array[i], key));
}
function binarySearch2(length, compareToKey) {
    let low = 0, high = length - 1;
    while(low <= high){
        const mid = (low + high) / 2 | 0;
        const comp = compareToKey(mid);
        if (comp < 0) {
            low = mid + 1;
        } else if (comp > 0) {
            high = mid - 1;
        } else {
            return mid;
        }
    }
    return -(low + 1);
}
function quickSelect(nth, data, compare) {
    nth = nth | 0;
    if (nth >= data.length) {
        throw new TypeError('invalid index');
    }
    const pivotValue = data[Math.floor(data.length * Math.random())];
    const lower = [];
    const higher = [];
    const pivots = [];
    for (const value of data){
        const val = compare(value, pivotValue);
        if (val < 0) {
            lower.push(value);
        } else if (val > 0) {
            higher.push(value);
        } else {
            pivots.push(value);
        }
    }
    if (nth < lower.length) {
        return quickSelect(nth, lower, compare);
    } else if (nth < lower.length + pivots.length) {
        return pivots[0];
    } else {
        return quickSelect(nth - (lower.length + pivots.length), higher, compare);
    }
}
function groupBy(data, compare) {
    const result = [];
    let currentGroup = undefined;
    for (const element of data.slice(0).sort(compare)){
        if (!currentGroup || compare(currentGroup[0], element) !== 0) {
            currentGroup = [
                element
            ];
            result.push(currentGroup);
        } else {
            currentGroup.push(element);
        }
    }
    return result;
}
function* groupAdjacentBy(items, shouldBeGrouped) {
    let currentGroup;
    let last;
    for (const item of items){
        if (last !== undefined && shouldBeGrouped(last, item)) {
            currentGroup.push(item);
        } else {
            if (currentGroup) {
                yield currentGroup;
            }
            currentGroup = [
                item
            ];
        }
        last = item;
    }
    if (currentGroup) {
        yield currentGroup;
    }
}
function forEachAdjacent(arr, f) {
    for(let i = 0; i <= arr.length; i++){
        f(i === 0 ? undefined : arr[i - 1], i === arr.length ? undefined : arr[i]);
    }
}
function forEachWithNeighbors(arr, f) {
    for(let i = 0; i < arr.length; i++){
        f(i === 0 ? undefined : arr[i - 1], arr[i], i + 1 === arr.length ? undefined : arr[i + 1]);
    }
}
function coalesce(array) {
    return array.filter((e)=>!!e);
}
function coalesceInPlace(array) {
    let to = 0;
    for(let i = 0; i < array.length; i++){
        if (!!array[i]) {
            array[to] = array[i];
            to += 1;
        }
    }
    array.length = to;
}
function isFalsyOrEmpty(obj) {
    return !Array.isArray(obj) || obj.length === 0;
}
function isNonEmptyArray(obj) {
    return Array.isArray(obj) && obj.length > 0;
}
function distinct(array, keyFn = (value)=>value) {
    const seen = new Set();
    return array.filter((element)=>{
        const key = keyFn(element);
        if (seen.has(key)) {
            return false;
        }
        seen.add(key);
        return true;
    });
}
function firstOrDefault(array, notFoundValue) {
    return array.length > 0 ? array[0] : notFoundValue;
}
function range(arg, to) {
    let from = typeof to === 'number' ? arg : 0;
    if (typeof to === 'number') {
        from = arg;
    } else {
        from = 0;
        to = arg;
    }
    const result = [];
    if (from <= to) {
        for(let i = from; i < to; i++){
            result.push(i);
        }
    } else {
        for(let i = from; i > to; i--){
            result.push(i);
        }
    }
    return result;
}
function arrayInsert(target, insertIndex, insertArr) {
    const before = target.slice(0, insertIndex);
    const after = target.slice(insertIndex);
    return before.concat(insertArr, after);
}
function pushToStart(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
        arr.unshift(value);
    }
}
function pushToEnd(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
        arr.push(value);
    }
}
function pushMany(arr, items) {
    for (const item of items){
        arr.push(item);
    }
}
function asArray(x) {
    return Array.isArray(x) ? x : [
        x
    ];
}
function insertInto(array, start, newItems) {
    const startIdx = getActualStartIndex(array, start);
    const originalLength = array.length;
    const newItemsLength = newItems.length;
    array.length = originalLength + newItemsLength;
    // Move the items after the start index, start from the end so that we don't overwrite any value.
    for(let i = originalLength - 1; i >= startIdx; i--){
        array[i + newItemsLength] = array[i];
    }
    for(let i = 0; i < newItemsLength; i++){
        array[i + startIdx] = newItems[i];
    }
}
function splice(array, start, deleteCount, newItems) {
    const index = getActualStartIndex(array, start);
    let result = array.splice(index, deleteCount);
    if (result === undefined) {
        // see https://bugs.webkit.org/show_bug.cgi?id=261140
        result = [];
    }
    insertInto(array, index, newItems);
    return result;
}
/**
 * Determine the actual start index (same logic as the native splice() or slice())
 * If greater than the length of the array, start will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.
 * If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.) If array.length + start is less than 0, it will begin from index 0.
 * @param array The target array.
 * @param start The operation index.
 */ function getActualStartIndex(array, start) {
    return start < 0 ? Math.max(start + array.length, 0) : Math.min(start, array.length);
}
var CompareResult;
(function(CompareResult) {
    function isLessThan(result) {
        return result < 0;
    }
    CompareResult.isLessThan = isLessThan;
    function isLessThanOrEqual(result) {
        return result <= 0;
    }
    CompareResult.isLessThanOrEqual = isLessThanOrEqual;
    function isGreaterThan(result) {
        return result > 0;
    }
    CompareResult.isGreaterThan = isGreaterThan;
    function isNeitherLessOrGreaterThan(result) {
        return result === 0;
    }
    CompareResult.isNeitherLessOrGreaterThan = isNeitherLessOrGreaterThan;
    CompareResult.greaterThan = 1;
    CompareResult.lessThan = -1;
    CompareResult.neitherLessOrGreaterThan = 0;
})(CompareResult || (CompareResult = {}));
function compareBy(selector, comparator) {
    return (a, b)=>comparator(selector(a), selector(b));
}
function tieBreakComparators(...comparators) {
    return (item1, item2)=>{
        for (const comparator of comparators){
            const result = comparator(item1, item2);
            if (!CompareResult.isNeitherLessOrGreaterThan(result)) {
                return result;
            }
        }
        return CompareResult.neitherLessOrGreaterThan;
    };
}
const numberComparator = (a, b)=>a - b;
const booleanComparator = (a, b)=>numberComparator(a ? 1 : 0, b ? 1 : 0);
function reverseOrder(comparator) {
    return (a, b)=>-comparator(a, b);
}
class ArrayQueue {
    /**
     * Constructs a queue that is backed by the given array. Runtime is O(1).
    */ constructor(items){
        this.items = items;
        this.firstIdx = 0;
        this.lastIdx = this.items.length - 1;
    }
    get length() {
        return this.lastIdx - this.firstIdx + 1;
    }
    /**
     * Consumes elements from the beginning of the queue as long as the predicate returns true.
     * If no elements were consumed, `null` is returned. Has a runtime of O(result.length).
    */ takeWhile(predicate) {
        // P(k) := k <= this.lastIdx && predicate(this.items[k])
        // Find s := min { k | k >= this.firstIdx && !P(k) } and return this.data[this.firstIdx...s)
        let startIdx = this.firstIdx;
        while(startIdx < this.items.length && predicate(this.items[startIdx])){
            startIdx++;
        }
        const result = startIdx === this.firstIdx ? null : this.items.slice(this.firstIdx, startIdx);
        this.firstIdx = startIdx;
        return result;
    }
    /**
     * Consumes elements from the end of the queue as long as the predicate returns true.
     * If no elements were consumed, `null` is returned.
     * The result has the same order as the underlying array!
    */ takeFromEndWhile(predicate) {
        // P(k) := this.firstIdx >= k && predicate(this.items[k])
        // Find s := max { k | k <= this.lastIdx && !P(k) } and return this.data(s...this.lastIdx]
        let endIdx = this.lastIdx;
        while(endIdx >= 0 && predicate(this.items[endIdx])){
            endIdx--;
        }
        const result = endIdx === this.lastIdx ? null : this.items.slice(endIdx + 1, this.lastIdx + 1);
        this.lastIdx = endIdx;
        return result;
    }
    peek() {
        if (this.length === 0) {
            return undefined;
        }
        return this.items[this.firstIdx];
    }
    dequeue() {
        const result = this.items[this.firstIdx];
        this.firstIdx++;
        return result;
    }
    takeCount(count) {
        const result = this.items.slice(this.firstIdx, this.firstIdx + count);
        this.firstIdx += count;
        return result;
    }
}
class CallbackIterable {
    static{
        this.empty = new CallbackIterable((_callback)=>{});
    }
    constructor(/**
     * Calls the callback for every item.
     * Stops when the callback returns false.
    */ iterate){
        this.iterate = iterate;
    }
    toArray() {
        const result = [];
        this.iterate((item)=>{
            result.push(item);
            return true;
        });
        return result;
    }
    filter(predicate) {
        return new CallbackIterable((cb)=>this.iterate((item)=>predicate(item) ? cb(item) : true));
    }
    map(mapFn) {
        return new CallbackIterable((cb)=>this.iterate((item)=>cb(mapFn(item))));
    }
    findLast(predicate) {
        let result;
        this.iterate((item)=>{
            if (predicate(item)) {
                result = item;
            }
            return true;
        });
        return result;
    }
    findLastMaxBy(comparator) {
        let result;
        let first = true;
        this.iterate((item)=>{
            if (first || CompareResult.isGreaterThan(comparator(item, result))) {
                first = false;
                result = item;
            }
            return true;
        });
        return result;
    }
}
class Permutation {
    constructor(_indexMap){
        this._indexMap = _indexMap;
    }
    /**
     * Returns a permutation that sorts the given array according to the given compare function.
     */ static createSortPermutation(arr, compareFn) {
        const sortIndices = Array.from(arr.keys()).sort((index1, index2)=>compareFn(arr[index1], arr[index2]));
        return new Permutation(sortIndices);
    }
    /**
     * Returns a new array with the elements of the given array re-arranged according to this permutation.
     */ apply(arr) {
        return arr.map((_, index)=>arr[this._indexMap[index]]);
    }
    /**
     * Returns a new permutation that undoes the re-arrangement of this permutation.
    */ inverse() {
        const inverseIndexMap = this._indexMap.slice();
        for(let i = 0; i < this._indexMap.length; i++){
            inverseIndexMap[this._indexMap[i]] = i;
        }
        return new Permutation(inverseIndexMap);
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/types.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ /**
 * @returns whether the provided parameter is a JavaScript String or not.
 */ __turbopack_context__.s({
    "assertIsDefined": (()=>assertIsDefined),
    "assertType": (()=>assertType),
    "isBoolean": (()=>isBoolean),
    "isDefined": (()=>isDefined),
    "isFunction": (()=>isFunction),
    "isIterable": (()=>isIterable),
    "isNumber": (()=>isNumber),
    "isObject": (()=>isObject),
    "isString": (()=>isString),
    "isTypedArray": (()=>isTypedArray),
    "isUndefined": (()=>isUndefined),
    "isUndefinedOrNull": (()=>isUndefinedOrNull),
    "validateConstraint": (()=>validateConstraint),
    "validateConstraints": (()=>validateConstraints)
});
function isString(str) {
    return typeof str === 'string';
}
function isObject(obj) {
    // The method can't do a type cast since there are type (like strings) which
    // are subclasses of any put not positvely matched by the function. Hence type
    // narrowing results in wrong results.
    return typeof obj === 'object' && obj !== null && !Array.isArray(obj) && !(obj instanceof RegExp) && !(obj instanceof Date);
}
function isTypedArray(obj) {
    const TypedArray = Object.getPrototypeOf(Uint8Array);
    return typeof obj === 'object' && obj instanceof TypedArray;
}
function isNumber(obj) {
    return typeof obj === 'number' && !isNaN(obj);
}
function isIterable(obj) {
    return !!obj && typeof obj[Symbol.iterator] === 'function';
}
function isBoolean(obj) {
    return obj === true || obj === false;
}
function isUndefined(obj) {
    return typeof obj === 'undefined';
}
function isDefined(arg) {
    return !isUndefinedOrNull(arg);
}
function isUndefinedOrNull(obj) {
    return isUndefined(obj) || obj === null;
}
function assertType(condition, type) {
    if (!condition) {
        throw new Error(type ? `Unexpected type, expected '${type}'` : 'Unexpected type');
    }
}
function assertIsDefined(arg) {
    if (isUndefinedOrNull(arg)) {
        throw new Error('Assertion Failed: argument is undefined or null');
    }
    return arg;
}
function isFunction(obj) {
    return typeof obj === 'function';
}
function validateConstraints(args, constraints) {
    const len = Math.min(args.length, constraints.length);
    for(let i = 0; i < len; i++){
        validateConstraint(args[i], constraints[i]);
    }
}
function validateConstraint(arg, constraint) {
    if (isString(constraint)) {
        if (typeof arg !== constraint) {
            throw new Error(`argument does not match constraint: typeof ${constraint}`);
        }
    } else if (isFunction(constraint)) {
        try {
            if (arg instanceof constraint) {
                return;
            }
        } catch  {
        // ignore
        }
        if (!isUndefinedOrNull(arg) && arg.constructor === constraint) {
            return;
        }
        if (constraint.length === 1 && constraint.call(undefined, arg) === true) {
            return;
        }
        throw new Error(`argument does not match one of these constraints: arg instanceof constraint, arg.constructor === constraint, nor constraint(arg) === true`);
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/objects.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "cloneAndChange": (()=>cloneAndChange),
    "createProxyObject": (()=>createProxyObject),
    "deepClone": (()=>deepClone),
    "deepFreeze": (()=>deepFreeze),
    "equals": (()=>equals),
    "getAllMethodNames": (()=>getAllMethodNames),
    "getAllPropertyNames": (()=>getAllPropertyNames),
    "mixin": (()=>mixin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/types.js [app-client] (ecmascript)");
;
function deepClone(obj) {
    if (!obj || typeof obj !== 'object') {
        return obj;
    }
    if (obj instanceof RegExp) {
        return obj;
    }
    const result = Array.isArray(obj) ? [] : {};
    Object.entries(obj).forEach(([key, value])=>{
        result[key] = value && typeof value === 'object' ? deepClone(value) : value;
    });
    return result;
}
function deepFreeze(obj) {
    if (!obj || typeof obj !== 'object') {
        return obj;
    }
    const stack = [
        obj
    ];
    while(stack.length > 0){
        const obj = stack.shift();
        Object.freeze(obj);
        for(const key in obj){
            if (_hasOwnProperty.call(obj, key)) {
                const prop = obj[key];
                if (typeof prop === 'object' && !Object.isFrozen(prop) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTypedArray"])(prop)) {
                    stack.push(prop);
                }
            }
        }
    }
    return obj;
}
const _hasOwnProperty = Object.prototype.hasOwnProperty;
function cloneAndChange(obj, changer) {
    return _cloneAndChange(obj, changer, new Set());
}
function _cloneAndChange(obj, changer, seen) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isUndefinedOrNull"])(obj)) {
        return obj;
    }
    const changed = changer(obj);
    if (typeof changed !== 'undefined') {
        return changed;
    }
    if (Array.isArray(obj)) {
        const r1 = [];
        for (const e of obj){
            r1.push(_cloneAndChange(e, changer, seen));
        }
        return r1;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(obj)) {
        if (seen.has(obj)) {
            throw new Error('Cannot clone recursive data-structure');
        }
        seen.add(obj);
        const r2 = {};
        for(const i2 in obj){
            if (_hasOwnProperty.call(obj, i2)) {
                r2[i2] = _cloneAndChange(obj[i2], changer, seen);
            }
        }
        seen.delete(obj);
        return r2;
    }
    return obj;
}
function mixin(destination, source, overwrite = true) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(destination)) {
        return source;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(source)) {
        Object.keys(source).forEach((key)=>{
            if (key in destination) {
                if (overwrite) {
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(destination[key]) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(source[key])) {
                        mixin(destination[key], source[key], overwrite);
                    } else {
                        destination[key] = source[key];
                    }
                }
            } else {
                destination[key] = source[key];
            }
        });
    }
    return destination;
}
function equals(one, other) {
    if (one === other) {
        return true;
    }
    if (one === null || one === undefined || other === null || other === undefined) {
        return false;
    }
    if (typeof one !== typeof other) {
        return false;
    }
    if (typeof one !== 'object') {
        return false;
    }
    if (Array.isArray(one) !== Array.isArray(other)) {
        return false;
    }
    let i;
    let key;
    if (Array.isArray(one)) {
        if (one.length !== other.length) {
            return false;
        }
        for(i = 0; i < one.length; i++){
            if (!equals(one[i], other[i])) {
                return false;
            }
        }
    } else {
        const oneKeys = [];
        for(key in one){
            oneKeys.push(key);
        }
        oneKeys.sort();
        const otherKeys = [];
        for(key in other){
            otherKeys.push(key);
        }
        otherKeys.sort();
        if (!equals(oneKeys, otherKeys)) {
            return false;
        }
        for(i = 0; i < oneKeys.length; i++){
            if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {
                return false;
            }
        }
    }
    return true;
}
function getAllPropertyNames(obj) {
    let res = [];
    while(Object.prototype !== obj){
        res = res.concat(Object.getOwnPropertyNames(obj));
        obj = Object.getPrototypeOf(obj);
    }
    return res;
}
function getAllMethodNames(obj) {
    const methods = [];
    for (const prop of getAllPropertyNames(obj)){
        if (typeof obj[prop] === 'function') {
            methods.push(prop);
        }
    }
    return methods;
}
function createProxyObject(methodNames, invoke) {
    const createProxyMethod = (method)=>{
        return function() {
            const args = Array.prototype.slice.call(arguments, 0);
            return invoke(method, args);
        };
    };
    const result = {};
    for (const methodName of methodNames){
        result[methodName] = createProxyMethod(methodName);
    }
    return result;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "LANGUAGE_DEFAULT": (()=>LANGUAGE_DEFAULT),
    "OS": (()=>OS),
    "isAndroid": (()=>isAndroid),
    "isChrome": (()=>isChrome),
    "isEdge": (()=>isEdge),
    "isFirefox": (()=>isFirefox),
    "isIOS": (()=>isIOS),
    "isLinux": (()=>isLinux),
    "isLittleEndian": (()=>isLittleEndian),
    "isMacintosh": (()=>isMacintosh),
    "isMobile": (()=>isMobile),
    "isNative": (()=>isNative),
    "isSafari": (()=>isSafari),
    "isWeb": (()=>isWeb),
    "isWebWorker": (()=>isWebWorker),
    "isWindows": (()=>isWindows),
    "language": (()=>language),
    "setTimeout0": (()=>setTimeout0),
    "setTimeout0IsFaster": (()=>setTimeout0IsFaster),
    "userAgent": (()=>userAgent),
    "webWorkerOrigin": (()=>webWorkerOrigin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/nls.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$messages$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/nls.messages.js [app-client] (ecmascript)");
;
const LANGUAGE_DEFAULT = 'en';
let _isWindows = false;
let _isMacintosh = false;
let _isLinux = false;
let _isLinuxSnap = false;
let _isNative = false;
let _isWeb = false;
let _isElectron = false;
let _isIOS = false;
let _isCI = false;
let _isMobile = false;
let _locale = undefined;
let _language = LANGUAGE_DEFAULT;
let _platformLocale = LANGUAGE_DEFAULT;
let _translationsConfigFile = undefined;
let _userAgent = undefined;
const $globalThis = globalThis;
let nodeProcess = undefined;
if (typeof $globalThis.vscode !== 'undefined' && typeof $globalThis.vscode.process !== 'undefined') {
    // Native environment (sandboxed)
    nodeProcess = $globalThis.vscode.process;
} else if (typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== 'undefined' && typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]?.versions?.node === 'string') {
    // Native environment (non-sandboxed)
    nodeProcess = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
}
const isElectronProcess = typeof nodeProcess?.versions?.electron === 'string';
const isElectronRenderer = isElectronProcess && nodeProcess?.type === 'renderer';
// Native environment
if (typeof nodeProcess === 'object') {
    _isWindows = nodeProcess.platform === 'win32';
    _isMacintosh = nodeProcess.platform === 'darwin';
    _isLinux = nodeProcess.platform === 'linux';
    _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];
    _isElectron = isElectronProcess;
    _isCI = !!nodeProcess.env['CI'] || !!nodeProcess.env['BUILD_ARTIFACTSTAGINGDIRECTORY'];
    _locale = LANGUAGE_DEFAULT;
    _language = LANGUAGE_DEFAULT;
    const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];
    if (rawNlsConfig) {
        try {
            const nlsConfig = JSON.parse(rawNlsConfig);
            _locale = nlsConfig.userLocale;
            _platformLocale = nlsConfig.osLocale;
            _language = nlsConfig.resolvedLanguage || LANGUAGE_DEFAULT;
            _translationsConfigFile = nlsConfig.languagePack?.translationsConfigFile;
        } catch (e) {}
    }
    _isNative = true;
} else if (typeof navigator === 'object' && !isElectronRenderer) {
    _userAgent = navigator.userAgent;
    _isWindows = _userAgent.indexOf('Windows') >= 0;
    _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;
    _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;
    _isLinux = _userAgent.indexOf('Linux') >= 0;
    _isMobile = _userAgent?.indexOf('Mobi') >= 0;
    _isWeb = true;
    _language = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$messages$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNLSLanguage"])() || LANGUAGE_DEFAULT;
    _locale = navigator.language.toLowerCase();
    _platformLocale = _locale;
} else {
    console.error('Unable to resolve platform.');
}
let _platform = 0 /* Platform.Web */ ;
if (_isMacintosh) {
    _platform = 1 /* Platform.Mac */ ;
} else if (_isWindows) {
    _platform = 3 /* Platform.Windows */ ;
} else if (_isLinux) {
    _platform = 2 /* Platform.Linux */ ;
}
const isWindows = _isWindows;
const isMacintosh = _isMacintosh;
const isLinux = _isLinux;
const isNative = _isNative;
const isWeb = _isWeb;
const isWebWorker = _isWeb && typeof $globalThis.importScripts === 'function';
const webWorkerOrigin = isWebWorker ? $globalThis.origin : undefined;
const isIOS = _isIOS;
const isMobile = _isMobile;
const userAgent = _userAgent;
const language = _language;
const setTimeout0IsFaster = typeof $globalThis.postMessage === 'function' && !$globalThis.importScripts;
const setTimeout0 = (()=>{
    if (setTimeout0IsFaster) {
        const pending = [];
        $globalThis.addEventListener('message', (e)=>{
            if (e.data && e.data.vscodeScheduleAsyncWork) {
                for(let i = 0, len = pending.length; i < len; i++){
                    const candidate = pending[i];
                    if (candidate.id === e.data.vscodeScheduleAsyncWork) {
                        pending.splice(i, 1);
                        candidate.callback();
                        return;
                    }
                }
            }
        });
        let lastId = 0;
        return (callback)=>{
            const myId = ++lastId;
            pending.push({
                id: myId,
                callback: callback
            });
            $globalThis.postMessage({
                vscodeScheduleAsyncWork: myId
            }, '*');
        };
    }
    return (callback)=>setTimeout(callback);
})();
const OS = _isMacintosh || _isIOS ? 2 /* OperatingSystem.Macintosh */  : _isWindows ? 1 /* OperatingSystem.Windows */  : 3 /* OperatingSystem.Linux */ ;
let _isLittleEndian = true;
let _isLittleEndianComputed = false;
function isLittleEndian() {
    if (!_isLittleEndianComputed) {
        _isLittleEndianComputed = true;
        const test = new Uint8Array(2);
        test[0] = 1;
        test[1] = 2;
        const view = new Uint16Array(test.buffer);
        _isLittleEndian = view[0] === (2 << 8) + 1;
    }
    return _isLittleEndian;
}
const isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);
const isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);
const isSafari = !!(!isChrome && userAgent && userAgent.indexOf('Safari') >= 0);
const isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);
const isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/iterator.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "Iterable": (()=>Iterable)
});
var Iterable;
(function(Iterable) {
    function is(thing) {
        return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';
    }
    Iterable.is = is;
    const _empty = Object.freeze([]);
    function empty() {
        return _empty;
    }
    Iterable.empty = empty;
    function* single(element) {
        yield element;
    }
    Iterable.single = single;
    function wrap(iterableOrElement) {
        if (is(iterableOrElement)) {
            return iterableOrElement;
        } else {
            return single(iterableOrElement);
        }
    }
    Iterable.wrap = wrap;
    function from(iterable) {
        return iterable || _empty;
    }
    Iterable.from = from;
    function* reverse(array) {
        for(let i = array.length - 1; i >= 0; i--){
            yield array[i];
        }
    }
    Iterable.reverse = reverse;
    function isEmpty(iterable) {
        return !iterable || iterable[Symbol.iterator]().next().done === true;
    }
    Iterable.isEmpty = isEmpty;
    function first(iterable) {
        return iterable[Symbol.iterator]().next().value;
    }
    Iterable.first = first;
    function some(iterable, predicate) {
        let i = 0;
        for (const element of iterable){
            if (predicate(element, i++)) {
                return true;
            }
        }
        return false;
    }
    Iterable.some = some;
    function find(iterable, predicate) {
        for (const element of iterable){
            if (predicate(element)) {
                return element;
            }
        }
        return undefined;
    }
    Iterable.find = find;
    function* filter(iterable, predicate) {
        for (const element of iterable){
            if (predicate(element)) {
                yield element;
            }
        }
    }
    Iterable.filter = filter;
    function* map(iterable, fn) {
        let index = 0;
        for (const element of iterable){
            yield fn(element, index++);
        }
    }
    Iterable.map = map;
    function* flatMap(iterable, fn) {
        let index = 0;
        for (const element of iterable){
            yield* fn(element, index++);
        }
    }
    Iterable.flatMap = flatMap;
    function* concat(...iterables) {
        for (const iterable of iterables){
            yield* iterable;
        }
    }
    Iterable.concat = concat;
    function reduce(iterable, reducer, initialValue) {
        let value = initialValue;
        for (const element of iterable){
            value = reducer(value, element);
        }
        return value;
    }
    Iterable.reduce = reduce;
    /**
     * Returns an iterable slice of the array, with the same semantics as `array.slice()`.
     */ function* slice(arr, from, to = arr.length) {
        if (from < 0) {
            from += arr.length;
        }
        if (to < 0) {
            to += arr.length;
        } else if (to > arr.length) {
            to = arr.length;
        }
        for(; from < to; from++){
            yield arr[from];
        }
    }
    Iterable.slice = slice;
    /**
     * Consumes `atMost` elements from iterable and returns the consumed elements,
     * and an iterable for the rest of the elements.
     */ function consume(iterable, atMost = Number.POSITIVE_INFINITY) {
        const consumed = [];
        if (atMost === 0) {
            return [
                consumed,
                iterable
            ];
        }
        const iterator = iterable[Symbol.iterator]();
        for(let i = 0; i < atMost; i++){
            const next = iterator.next();
            if (next.done) {
                return [
                    consumed,
                    Iterable.empty()
                ];
            }
            consumed.push(next.value);
        }
        return [
            consumed,
            {
                [Symbol.iterator] () {
                    return iterator;
                }
            }
        ];
    }
    Iterable.consume = consume;
    async function asyncToArray(iterable) {
        const result = [];
        for await (const item of iterable){
            result.push(item);
        }
        return Promise.resolve(result);
    }
    Iterable.asyncToArray = asyncToArray;
})(Iterable || (Iterable = {}));
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/linkedList.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "LinkedList": (()=>LinkedList)
});
class Node {
    static{
        this.Undefined = new Node(undefined);
    }
    constructor(element){
        this.element = element;
        this.next = Node.Undefined;
        this.prev = Node.Undefined;
    }
}
class LinkedList {
    constructor(){
        this._first = Node.Undefined;
        this._last = Node.Undefined;
        this._size = 0;
    }
    get size() {
        return this._size;
    }
    isEmpty() {
        return this._first === Node.Undefined;
    }
    clear() {
        let node = this._first;
        while(node !== Node.Undefined){
            const next = node.next;
            node.prev = Node.Undefined;
            node.next = Node.Undefined;
            node = next;
        }
        this._first = Node.Undefined;
        this._last = Node.Undefined;
        this._size = 0;
    }
    unshift(element) {
        return this._insert(element, false);
    }
    push(element) {
        return this._insert(element, true);
    }
    _insert(element, atTheEnd) {
        const newNode = new Node(element);
        if (this._first === Node.Undefined) {
            this._first = newNode;
            this._last = newNode;
        } else if (atTheEnd) {
            // push
            const oldLast = this._last;
            this._last = newNode;
            newNode.prev = oldLast;
            oldLast.next = newNode;
        } else {
            // unshift
            const oldFirst = this._first;
            this._first = newNode;
            newNode.next = oldFirst;
            oldFirst.prev = newNode;
        }
        this._size += 1;
        let didRemove = false;
        return ()=>{
            if (!didRemove) {
                didRemove = true;
                this._remove(newNode);
            }
        };
    }
    shift() {
        if (this._first === Node.Undefined) {
            return undefined;
        } else {
            const res = this._first.element;
            this._remove(this._first);
            return res;
        }
    }
    pop() {
        if (this._last === Node.Undefined) {
            return undefined;
        } else {
            const res = this._last.element;
            this._remove(this._last);
            return res;
        }
    }
    _remove(node) {
        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {
            // middle
            const anchor = node.prev;
            anchor.next = node.next;
            node.next.prev = anchor;
        } else if (node.prev === Node.Undefined && node.next === Node.Undefined) {
            // only node
            this._first = Node.Undefined;
            this._last = Node.Undefined;
        } else if (node.next === Node.Undefined) {
            // last
            this._last = this._last.prev;
            this._last.next = Node.Undefined;
        } else if (node.prev === Node.Undefined) {
            // first
            this._first = this._first.next;
            this._first.prev = Node.Undefined;
        }
        // done
        this._size -= 1;
    }
    *[Symbol.iterator]() {
        let node = this._first;
        while(node !== Node.Undefined){
            yield node.element;
            node = node.next;
        }
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/errors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ // Avoid circular dependency on EventEmitter by implementing a subset of the interface.
__turbopack_context__.s({
    "BugIndicatingError": (()=>BugIndicatingError),
    "CancellationError": (()=>CancellationError),
    "ErrorHandler": (()=>ErrorHandler),
    "ErrorNoTelemetry": (()=>ErrorNoTelemetry),
    "NotSupportedError": (()=>NotSupportedError),
    "canceled": (()=>canceled),
    "errorHandler": (()=>errorHandler),
    "illegalArgument": (()=>illegalArgument),
    "illegalState": (()=>illegalState),
    "isCancellationError": (()=>isCancellationError),
    "onUnexpectedError": (()=>onUnexpectedError),
    "onUnexpectedExternalError": (()=>onUnexpectedExternalError),
    "transformErrorForSerialization": (()=>transformErrorForSerialization)
});
class ErrorHandler {
    constructor(){
        this.listeners = [];
        this.unexpectedErrorHandler = function(e) {
            setTimeout(()=>{
                if (e.stack) {
                    if (ErrorNoTelemetry.isErrorNoTelemetry(e)) {
                        throw new ErrorNoTelemetry(e.message + '\n\n' + e.stack);
                    }
                    throw new Error(e.message + '\n\n' + e.stack);
                }
                throw e;
            }, 0);
        };
    }
    emit(e) {
        this.listeners.forEach((listener)=>{
            listener(e);
        });
    }
    onUnexpectedError(e) {
        this.unexpectedErrorHandler(e);
        this.emit(e);
    }
    // For external errors, we don't want the listeners to be called
    onUnexpectedExternalError(e) {
        this.unexpectedErrorHandler(e);
    }
}
const errorHandler = new ErrorHandler();
function onUnexpectedError(e) {
    // ignore errors from cancelled promises
    if (!isCancellationError(e)) {
        errorHandler.onUnexpectedError(e);
    }
    return undefined;
}
function onUnexpectedExternalError(e) {
    // ignore errors from cancelled promises
    if (!isCancellationError(e)) {
        errorHandler.onUnexpectedExternalError(e);
    }
    return undefined;
}
function transformErrorForSerialization(error) {
    if (error instanceof Error) {
        const { name, message } = error;
        const stack = error.stacktrace || error.stack;
        return {
            $isError: true,
            name,
            message,
            stack,
            noTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)
        };
    }
    // return as is
    return error;
}
const canceledName = 'Canceled';
function isCancellationError(error) {
    if (error instanceof CancellationError) {
        return true;
    }
    return error instanceof Error && error.name === canceledName && error.message === canceledName;
}
class CancellationError extends Error {
    constructor(){
        super(canceledName);
        this.name = this.message;
    }
}
function canceled() {
    const error = new Error(canceledName);
    error.name = error.message;
    return error;
}
function illegalArgument(name) {
    if (name) {
        return new Error(`Illegal argument: ${name}`);
    } else {
        return new Error('Illegal argument');
    }
}
function illegalState(name) {
    if (name) {
        return new Error(`Illegal state: ${name}`);
    } else {
        return new Error('Illegal state');
    }
}
class NotSupportedError extends Error {
    constructor(message){
        super('NotSupported');
        if (message) {
            this.message = message;
        }
    }
}
class ErrorNoTelemetry extends Error {
    constructor(msg){
        super(msg);
        this.name = 'CodeExpectedError';
    }
    static fromError(err) {
        if (err instanceof ErrorNoTelemetry) {
            return err;
        }
        const result = new ErrorNoTelemetry();
        result.message = err.message;
        result.stack = err.stack;
        return result;
    }
    static isErrorNoTelemetry(err) {
        return err.name === 'CodeExpectedError';
    }
}
class BugIndicatingError extends Error {
    constructor(message){
        super(message || 'An unexpected bug occurred.');
        Object.setPrototypeOf(this, BugIndicatingError.prototype);
    // Because we know for sure only buggy code throws this,
    // we definitely want to break here and fix the bug.
    // eslint-disable-next-line no-debugger
    // debugger;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/functional.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ /**
 * Given a function, returns a function that is only calling that function once.
 */ __turbopack_context__.s({
    "createSingleCallFunction": (()=>createSingleCallFunction)
});
function createSingleCallFunction(fn, fnDidRunCallback) {
    const _this = this;
    let didCall = false;
    let result;
    return function() {
        if (didCall) {
            return result;
        }
        didCall = true;
        if (fnDidRunCallback) {
            try {
                result = fn.apply(_this, arguments);
            } finally{
                fnDidRunCallback();
            }
        } else {
            result = fn.apply(_this, arguments);
        }
        return result;
    };
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/lifecycle.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Disposable": (()=>Disposable),
    "DisposableMap": (()=>DisposableMap),
    "DisposableStore": (()=>DisposableStore),
    "ImmortalReference": (()=>ImmortalReference),
    "MutableDisposable": (()=>MutableDisposable),
    "RefCountedDisposable": (()=>RefCountedDisposable),
    "combinedDisposable": (()=>combinedDisposable),
    "dispose": (()=>dispose),
    "isDisposable": (()=>isDisposable),
    "markAsDisposed": (()=>markAsDisposed),
    "markAsSingleton": (()=>markAsSingleton),
    "setDisposableTracker": (()=>setDisposableTracker),
    "toDisposable": (()=>toDisposable),
    "trackDisposable": (()=>trackDisposable)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$functional$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/functional.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$iterator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/iterator.js [app-client] (ecmascript)");
;
;
// #region Disposable Tracking
/**
 * Enables logging of potentially leaked disposables.
 *
 * A disposable is considered leaked if it is not disposed or not registered as the child of
 * another disposable. This tracking is very simple an only works for classes that either
 * extend Disposable or use a DisposableStore. This means there are a lot of false positives.
 */ const TRACK_DISPOSABLES = false;
let disposableTracker = null;
function setDisposableTracker(tracker) {
    disposableTracker = tracker;
}
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
}
function trackDisposable(x) {
    disposableTracker?.trackDisposable(x);
    return x;
}
function markAsDisposed(disposable) {
    disposableTracker?.markAsDisposed(disposable);
}
function setParentOfDisposable(child, parent) {
    disposableTracker?.setParent(child, parent);
}
function setParentOfDisposables(children, parent) {
    if (!disposableTracker) {
        return;
    }
    for (const child of children){
        disposableTracker.setParent(child, parent);
    }
}
function markAsSingleton(singleton) {
    disposableTracker?.markAsSingleton(singleton);
    return singleton;
}
function isDisposable(thing) {
    return typeof thing === 'object' && thing !== null && typeof thing.dispose === 'function' && thing.dispose.length === 0;
}
function dispose(arg) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$iterator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Iterable"].is(arg)) {
        const errors = [];
        for (const d of arg){
            if (d) {
                try {
                    d.dispose();
                } catch (e) {
                    errors.push(e);
                }
            }
        }
        if (errors.length === 1) {
            throw errors[0];
        } else if (errors.length > 1) {
            throw new AggregateError(errors, 'Encountered errors while disposing of store');
        }
        return Array.isArray(arg) ? [] : arg;
    } else if (arg) {
        arg.dispose();
        return arg;
    }
}
function combinedDisposable(...disposables) {
    const parent = toDisposable(()=>dispose(disposables));
    setParentOfDisposables(disposables, parent);
    return parent;
}
function toDisposable(fn) {
    const self = trackDisposable({
        dispose: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$functional$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSingleCallFunction"])(()=>{
            markAsDisposed(self);
            fn();
        })
    });
    return self;
}
class DisposableStore {
    static{
        this.DISABLE_DISPOSED_WARNING = false;
    }
    constructor(){
        this._toDispose = new Set();
        this._isDisposed = false;
        trackDisposable(this);
    }
    /**
     * Dispose of all registered disposables and mark this object as disposed.
     *
     * Any future disposables added to this object will be disposed of on `add`.
     */ dispose() {
        if (this._isDisposed) {
            return;
        }
        markAsDisposed(this);
        this._isDisposed = true;
        this.clear();
    }
    /**
     * @return `true` if this object has been disposed of.
     */ get isDisposed() {
        return this._isDisposed;
    }
    /**
     * Dispose of all registered disposables but do not mark this object as disposed.
     */ clear() {
        if (this._toDispose.size === 0) {
            return;
        }
        try {
            dispose(this._toDispose);
        } finally{
            this._toDispose.clear();
        }
    }
    /**
     * Add a new {@link IDisposable disposable} to the collection.
     */ add(o) {
        if (!o) {
            return o;
        }
        if (o === this) {
            throw new Error('Cannot register a disposable on itself!');
        }
        setParentOfDisposable(o, this);
        if (this._isDisposed) {
            if (!DisposableStore.DISABLE_DISPOSED_WARNING) {
                console.warn(new Error('Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!').stack);
            }
        } else {
            this._toDispose.add(o);
        }
        return o;
    }
    /**
     * Deletes the value from the store, but does not dispose it.
     */ deleteAndLeak(o) {
        if (!o) {
            return;
        }
        if (this._toDispose.has(o)) {
            this._toDispose.delete(o);
            setParentOfDisposable(o, null);
        }
    }
}
class Disposable {
    /**
     * A disposable that does nothing when it is disposed of.
     *
     * TODO: This should not be a static property.
     */ static{
        this.None = Object.freeze({
            dispose () {}
        });
    }
    constructor(){
        this._store = new DisposableStore();
        trackDisposable(this);
        setParentOfDisposable(this._store, this);
    }
    dispose() {
        markAsDisposed(this);
        this._store.dispose();
    }
    /**
     * Adds `o` to the collection of disposables managed by this object.
     */ _register(o) {
        if (o === this) {
            throw new Error('Cannot register a disposable on itself!');
        }
        return this._store.add(o);
    }
}
class MutableDisposable {
    constructor(){
        this._isDisposed = false;
        trackDisposable(this);
    }
    get value() {
        return this._isDisposed ? undefined : this._value;
    }
    set value(value) {
        if (this._isDisposed || value === this._value) {
            return;
        }
        this._value?.dispose();
        if (value) {
            setParentOfDisposable(value, this);
        }
        this._value = value;
    }
    /**
     * Resets the stored value and disposed of the previously stored value.
     */ clear() {
        this.value = undefined;
    }
    dispose() {
        this._isDisposed = true;
        markAsDisposed(this);
        this._value?.dispose();
        this._value = undefined;
    }
}
class RefCountedDisposable {
    constructor(_disposable){
        this._disposable = _disposable;
        this._counter = 1;
    }
    acquire() {
        this._counter++;
        return this;
    }
    release() {
        if (--this._counter === 0) {
            this._disposable.dispose();
        }
        return this;
    }
}
class ImmortalReference {
    constructor(object){
        this.object = object;
    }
    dispose() {}
}
class DisposableMap {
    constructor(){
        this._store = new Map();
        this._isDisposed = false;
        trackDisposable(this);
    }
    /**
     * Disposes of all stored values and mark this object as disposed.
     *
     * Trying to use this object after it has been disposed of is an error.
     */ dispose() {
        markAsDisposed(this);
        this._isDisposed = true;
        this.clearAndDisposeAll();
    }
    /**
     * Disposes of all stored values and clear the map, but DO NOT mark this object as disposed.
     */ clearAndDisposeAll() {
        if (!this._store.size) {
            return;
        }
        try {
            dispose(this._store.values());
        } finally{
            this._store.clear();
        }
    }
    get(key) {
        return this._store.get(key);
    }
    set(key, value, skipDisposeOnOverwrite = false) {
        if (this._isDisposed) {
            console.warn(new Error('Trying to add a disposable to a DisposableMap that has already been disposed of. The added object will be leaked!').stack);
        }
        if (!skipDisposeOnOverwrite) {
            this._store.get(key)?.dispose();
        }
        this._store.set(key, value);
    }
    /**
     * Delete the value stored for `key` from this map and also dispose of it.
     */ deleteAndDispose(key) {
        this._store.get(key)?.dispose();
        this._store.delete(key);
    }
    [Symbol.iterator]() {
        return this._store[Symbol.iterator]();
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/stopwatch.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "StopWatch": (()=>StopWatch)
});
const hasPerformanceNow = globalThis.performance && typeof globalThis.performance.now === 'function';
class StopWatch {
    static create(highResolution) {
        return new StopWatch(highResolution);
    }
    constructor(highResolution){
        this._now = hasPerformanceNow && highResolution === false ? Date.now : globalThis.performance.now.bind(globalThis.performance);
        this._startTime = this._now();
        this._stopTime = -1;
    }
    stop() {
        this._stopTime = this._now();
    }
    reset() {
        this._startTime = this._now();
        this._stopTime = -1;
    }
    elapsed() {
        if (this._stopTime !== -1) {
            return this._stopTime - this._startTime;
        }
        return this._now() - this._startTime;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/event.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DebounceEmitter": (()=>DebounceEmitter),
    "Emitter": (()=>Emitter),
    "Event": (()=>Event),
    "EventBufferer": (()=>EventBufferer),
    "EventMultiplexer": (()=>EventMultiplexer),
    "EventProfiling": (()=>EventProfiling),
    "ListenerLeakError": (()=>ListenerLeakError),
    "ListenerRefusalError": (()=>ListenerRefusalError),
    "MicrotaskEmitter": (()=>MicrotaskEmitter),
    "PauseableEmitter": (()=>PauseableEmitter),
    "Relay": (()=>Relay),
    "createEventDeliveryQueue": (()=>createEventDeliveryQueue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/errors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$functional$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/functional.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lifecycle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$linkedList$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/linkedList.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$stopwatch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/stopwatch.js [app-client] (ecmascript)");
;
;
;
;
;
// -----------------------------------------------------------------------------------------------------------------------
// Uncomment the next line to print warnings whenever a listener is GC'ed without having been disposed. This is a LEAK.
// -----------------------------------------------------------------------------------------------------------------------
const _enableListenerGCedWarning = false;
// -----------------------------------------------------------------------------------------------------------------------
// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.
// -----------------------------------------------------------------------------------------------------------------------
const _enableDisposeWithListenerWarning = false;
// -----------------------------------------------------------------------------------------------------------------------
// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.
// See https://github.com/microsoft/vscode/issues/142851
// -----------------------------------------------------------------------------------------------------------------------
const _enableSnapshotPotentialLeakWarning = false;
var Event;
(function(Event) {
    Event.None = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Disposable"].None;
    function _addLeakageTraceLogic(options) {
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
    }
    /**
     * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared
     * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a
     * result of merging events and to try prevent race conditions that could arise when using related deferred and
     * non-deferred events.
     *
     * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work
     * (eg. latency of keypress to text rendered).
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @param event The event source for the new event.
     * @param disposable A disposable store to add the new EventEmitter to.
     */ function defer(event, disposable) {
        return debounce(event, ()=>void 0, 0, undefined, true, undefined, disposable);
    }
    Event.defer = defer;
    /**
     * Given an event, returns another event which only fires once.
     *
     * @param event The event source for the new event.
     */ function once(event) {
        return (listener, thisArgs = null, disposables)=>{
            // we need this, in case the event fires during the listener call
            let didFire = false;
            let result = undefined;
            result = event((e)=>{
                if (didFire) {
                    return;
                } else if (result) {
                    result.dispose();
                } else {
                    didFire = true;
                }
                return listener.call(thisArgs, e);
            }, null, disposables);
            if (didFire) {
                result.dispose();
            }
            return result;
        };
    }
    Event.once = once;
    /**
     * Given an event, returns another event which only fires once, and only when the condition is met.
     *
     * @param event The event source for the new event.
     */ function onceIf(event, condition) {
        return Event.once(Event.filter(event, condition));
    }
    Event.onceIf = onceIf;
    /**
     * Maps an event of one type into an event of another type using a mapping function, similar to how
     * `Array.prototype.map` works.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @param event The event source for the new event.
     * @param map The mapping function.
     * @param disposable A disposable store to add the new EventEmitter to.
     */ function map(event, map, disposable) {
        return snapshot((listener, thisArgs = null, disposables)=>event((i)=>listener.call(thisArgs, map(i)), null, disposables), disposable);
    }
    Event.map = map;
    /**
     * Wraps an event in another event that performs some function on the event object before firing.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @param event The event source for the new event.
     * @param each The function to perform on the event object.
     * @param disposable A disposable store to add the new EventEmitter to.
     */ function forEach(event, each, disposable) {
        return snapshot((listener, thisArgs = null, disposables)=>event((i)=>{
                each(i);
                listener.call(thisArgs, i);
            }, null, disposables), disposable);
    }
    Event.forEach = forEach;
    function filter(event, filter, disposable) {
        return snapshot((listener, thisArgs = null, disposables)=>event((e)=>filter(e) && listener.call(thisArgs, e), null, disposables), disposable);
    }
    Event.filter = filter;
    /**
     * Given an event, returns the same event but typed as `Event<void>`.
     */ function signal(event) {
        return event;
    }
    Event.signal = signal;
    function any(...events) {
        return (listener, thisArgs = null, disposables)=>{
            const disposable = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combinedDisposable"])(...events.map((event)=>event((e)=>listener.call(thisArgs, e))));
            return addAndReturnDisposable(disposable, disposables);
        };
    }
    Event.any = any;
    /**
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     */ function reduce(event, merge, initial, disposable) {
        let output = initial;
        return map(event, (e)=>{
            output = merge(output, e);
            return output;
        }, disposable);
    }
    Event.reduce = reduce;
    function snapshot(event, disposable) {
        let listener;
        const options = {
            onWillAddFirstListener () {
                listener = event(emitter.fire, emitter);
            },
            onDidRemoveLastListener () {
                listener?.dispose();
            }
        };
        if (!disposable) {
            _addLeakageTraceLogic(options);
        }
        const emitter = new Emitter(options);
        disposable?.add(emitter);
        return emitter.event;
    }
    /**
     * Adds the IDisposable to the store if it's set, and returns it. Useful to
     * Event function implementation.
     */ function addAndReturnDisposable(d, store) {
        if (store instanceof Array) {
            store.push(d);
        } else if (store) {
            store.add(d);
        }
        return d;
    }
    function debounce(event, merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold, disposable) {
        let subscription;
        let output = undefined;
        let handle = undefined;
        let numDebouncedCalls = 0;
        let doFire;
        const options = {
            leakWarningThreshold,
            onWillAddFirstListener () {
                subscription = event((cur)=>{
                    numDebouncedCalls++;
                    output = merge(output, cur);
                    if (leading && !handle) {
                        emitter.fire(output);
                        output = undefined;
                    }
                    doFire = ()=>{
                        const _output = output;
                        output = undefined;
                        handle = undefined;
                        if (!leading || numDebouncedCalls > 1) {
                            emitter.fire(_output);
                        }
                        numDebouncedCalls = 0;
                    };
                    if (typeof delay === 'number') {
                        clearTimeout(handle);
                        handle = setTimeout(doFire, delay);
                    } else {
                        if (handle === undefined) {
                            handle = 0;
                            queueMicrotask(doFire);
                        }
                    }
                });
            },
            onWillRemoveListener () {
                if (flushOnListenerRemove && numDebouncedCalls > 0) {
                    doFire?.();
                }
            },
            onDidRemoveLastListener () {
                doFire = undefined;
                subscription.dispose();
            }
        };
        if (!disposable) {
            _addLeakageTraceLogic(options);
        }
        const emitter = new Emitter(options);
        disposable?.add(emitter);
        return emitter.event;
    }
    Event.debounce = debounce;
    /**
     * Debounces an event, firing after some delay (default=0) with an array of all event original objects.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     */ function accumulate(event, delay = 0, disposable) {
        return Event.debounce(event, (last, e)=>{
            if (!last) {
                return [
                    e
                ];
            }
            last.push(e);
            return last;
        }, delay, undefined, true, undefined, disposable);
    }
    Event.accumulate = accumulate;
    /**
     * Filters an event such that some condition is _not_ met more than once in a row, effectively ensuring duplicate
     * event objects from different sources do not fire the same event object.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @param event The event source for the new event.
     * @param equals The equality condition.
     * @param disposable A disposable store to add the new EventEmitter to.
     *
     * @example
     * ```
     * // Fire only one time when a single window is opened or focused
     * Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow))
     * ```
     */ function latch(event, equals = (a, b)=>a === b, disposable) {
        let firstCall = true;
        let cache;
        return filter(event, (value)=>{
            const shouldEmit = firstCall || !equals(value, cache);
            firstCall = false;
            cache = value;
            return shouldEmit;
        }, disposable);
    }
    Event.latch = latch;
    /**
     * Splits an event whose parameter is a union type into 2 separate events for each type in the union.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @example
     * ```
     * const event = new EventEmitter<number | undefined>().event;
     * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);
     * ```
     *
     * @param event The event source for the new event.
     * @param isT A function that determines what event is of the first type.
     * @param disposable A disposable store to add the new EventEmitter to.
     */ function split(event, isT, disposable) {
        return [
            Event.filter(event, isT, disposable),
            Event.filter(event, (e)=>!isT(e), disposable)
        ];
    }
    Event.split = split;
    /**
     * Buffers an event until it has a listener attached.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @param event The event source for the new event.
     * @param flushAfterTimeout Determines whether to flush the buffer after a timeout immediately or after a
     * `setTimeout` when the first event listener is added.
     * @param _buffer Internal: A source event array used for tests.
     *
     * @example
     * ```
     * // Start accumulating events, when the first listener is attached, flush
     * // the event after a timeout such that multiple listeners attached before
     * // the timeout would receive the event
     * this.onInstallExtension = Event.buffer(service.onInstallExtension, true);
     * ```
     */ function buffer(event, flushAfterTimeout = false, _buffer = [], disposable) {
        let buffer1 = _buffer.slice();
        let listener = event((e)=>{
            if (buffer1) {
                buffer1.push(e);
            } else {
                emitter.fire(e);
            }
        });
        if (disposable) {
            disposable.add(listener);
        }
        const flush = ()=>{
            buffer1?.forEach((e)=>emitter.fire(e));
            buffer1 = null;
        };
        const emitter = new Emitter({
            onWillAddFirstListener () {
                if (!listener) {
                    listener = event((e)=>emitter.fire(e));
                    if (disposable) {
                        disposable.add(listener);
                    }
                }
            },
            onDidAddFirstListener () {
                if (buffer1) {
                    if (flushAfterTimeout) {
                        setTimeout(flush);
                    } else {
                        flush();
                    }
                }
            },
            onDidRemoveLastListener () {
                if (listener) {
                    listener.dispose();
                }
                listener = null;
            }
        });
        if (disposable) {
            disposable.add(emitter);
        }
        return emitter.event;
    }
    Event.buffer = buffer;
    /**
     * Wraps the event in an {@link IChainableEvent}, allowing a more functional programming style.
     *
     * @example
     * ```
     * // Normal
     * const onEnterPressNormal = Event.filter(
     *   Event.map(onKeyPress.event, e => new StandardKeyboardEvent(e)),
     *   e.keyCode === KeyCode.Enter
     * ).event;
     *
     * // Using chain
     * const onEnterPressChain = Event.chain(onKeyPress.event, $ => $
     *   .map(e => new StandardKeyboardEvent(e))
     *   .filter(e => e.keyCode === KeyCode.Enter)
     * );
     * ```
     */ function chain(event, sythensize) {
        const fn = (listener, thisArgs, disposables)=>{
            const cs = sythensize(new ChainableSynthesis());
            return event(function(value) {
                const result = cs.evaluate(value);
                if (result !== HaltChainable) {
                    listener.call(thisArgs, result);
                }
            }, undefined, disposables);
        };
        return fn;
    }
    Event.chain = chain;
    const HaltChainable = Symbol('HaltChainable');
    class ChainableSynthesis {
        constructor(){
            this.steps = [];
        }
        map(fn) {
            this.steps.push(fn);
            return this;
        }
        forEach(fn) {
            this.steps.push((v)=>{
                fn(v);
                return v;
            });
            return this;
        }
        filter(fn) {
            this.steps.push((v)=>fn(v) ? v : HaltChainable);
            return this;
        }
        reduce(merge, initial) {
            let last = initial;
            this.steps.push((v)=>{
                last = merge(last, v);
                return last;
            });
            return this;
        }
        latch(equals = (a, b)=>a === b) {
            let firstCall = true;
            let cache;
            this.steps.push((value)=>{
                const shouldEmit = firstCall || !equals(value, cache);
                firstCall = false;
                cache = value;
                return shouldEmit ? value : HaltChainable;
            });
            return this;
        }
        evaluate(value) {
            for (const step of this.steps){
                value = step(value);
                if (value === HaltChainable) {
                    break;
                }
            }
            return value;
        }
    }
    /**
     * Creates an {@link Event} from a node event emitter.
     */ function fromNodeEventEmitter(emitter, eventName, map = (id)=>id) {
        const fn = (...args)=>result.fire(map(...args));
        const onFirstListenerAdd = ()=>emitter.on(eventName, fn);
        const onLastListenerRemove = ()=>emitter.removeListener(eventName, fn);
        const result = new Emitter({
            onWillAddFirstListener: onFirstListenerAdd,
            onDidRemoveLastListener: onLastListenerRemove
        });
        return result.event;
    }
    Event.fromNodeEventEmitter = fromNodeEventEmitter;
    /**
     * Creates an {@link Event} from a DOM event emitter.
     */ function fromDOMEventEmitter(emitter, eventName, map = (id)=>id) {
        const fn = (...args)=>result.fire(map(...args));
        const onFirstListenerAdd = ()=>emitter.addEventListener(eventName, fn);
        const onLastListenerRemove = ()=>emitter.removeEventListener(eventName, fn);
        const result = new Emitter({
            onWillAddFirstListener: onFirstListenerAdd,
            onDidRemoveLastListener: onLastListenerRemove
        });
        return result.event;
    }
    Event.fromDOMEventEmitter = fromDOMEventEmitter;
    /**
     * Creates a promise out of an event, using the {@link Event.once} helper.
     */ function toPromise(event) {
        return new Promise((resolve)=>once(event)(resolve));
    }
    Event.toPromise = toPromise;
    /**
     * Creates an event out of a promise that fires once when the promise is
     * resolved with the result of the promise or `undefined`.
     */ function fromPromise(promise) {
        const result = new Emitter();
        promise.then((res)=>{
            result.fire(res);
        }, ()=>{
            result.fire(undefined);
        }).finally(()=>{
            result.dispose();
        });
        return result.event;
    }
    Event.fromPromise = fromPromise;
    /**
     * A convenience function for forwarding an event to another emitter which
     * improves readability.
     *
     * This is similar to {@link Relay} but allows instantiating and forwarding
     * on a single line and also allows for multiple source events.
     * @param from The event to forward.
     * @param to The emitter to forward the event to.
     * @example
     * Event.forward(event, emitter);
     * // equivalent to
     * event(e => emitter.fire(e));
     * // equivalent to
     * event(emitter.fire, emitter);
     */ function forward(from, to) {
        return from((e)=>to.fire(e));
    }
    Event.forward = forward;
    function runAndSubscribe(event, handler, initial) {
        handler(initial);
        return event((e)=>handler(e));
    }
    Event.runAndSubscribe = runAndSubscribe;
    class EmitterObserver {
        constructor(_observable, store){
            this._observable = _observable;
            this._counter = 0;
            this._hasChanged = false;
            const options = {
                onWillAddFirstListener: ()=>{
                    _observable.addObserver(this);
                    // Communicate to the observable that we received its current value and would like to be notified about future changes.
                    this._observable.reportChanges();
                },
                onDidRemoveLastListener: ()=>{
                    _observable.removeObserver(this);
                }
            };
            if (!store) {
                _addLeakageTraceLogic(options);
            }
            this.emitter = new Emitter(options);
            if (store) {
                store.add(this.emitter);
            }
        }
        beginUpdate(_observable) {
            // assert(_observable === this.obs);
            this._counter++;
        }
        handlePossibleChange(_observable) {
        // assert(_observable === this.obs);
        }
        handleChange(_observable, _change) {
            // assert(_observable === this.obs);
            this._hasChanged = true;
        }
        endUpdate(_observable) {
            // assert(_observable === this.obs);
            this._counter--;
            if (this._counter === 0) {
                this._observable.reportChanges();
                if (this._hasChanged) {
                    this._hasChanged = false;
                    this.emitter.fire(this._observable.get());
                }
            }
        }
    }
    /**
     * Creates an event emitter that is fired when the observable changes.
     * Each listeners subscribes to the emitter.
     */ function fromObservable(obs, store) {
        const observer = new EmitterObserver(obs, store);
        return observer.emitter.event;
    }
    Event.fromObservable = fromObservable;
    /**
     * Each listener is attached to the observable directly.
     */ function fromObservableLight(observable) {
        return (listener, thisArgs, disposables)=>{
            let count = 0;
            let didChange = false;
            const observer = {
                beginUpdate () {
                    count++;
                },
                endUpdate () {
                    count--;
                    if (count === 0) {
                        observable.reportChanges();
                        if (didChange) {
                            didChange = false;
                            listener.call(thisArgs);
                        }
                    }
                },
                handlePossibleChange () {
                // noop
                },
                handleChange () {
                    didChange = true;
                }
            };
            observable.addObserver(observer);
            observable.reportChanges();
            const disposable = {
                dispose () {
                    observable.removeObserver(observer);
                }
            };
            if (disposables instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DisposableStore"]) {
                disposables.add(disposable);
            } else if (Array.isArray(disposables)) {
                disposables.push(disposable);
            }
            return disposable;
        };
    }
    Event.fromObservableLight = fromObservableLight;
})(Event || (Event = {}));
class EventProfiling {
    static{
        this.all = new Set();
    }
    static{
        this._idPool = 0;
    }
    constructor(name){
        this.listenerCount = 0;
        this.invocationCount = 0;
        this.elapsedOverall = 0;
        this.durations = [];
        this.name = `${name}_${EventProfiling._idPool++}`;
        EventProfiling.all.add(this);
    }
    start(listenerCount) {
        this._stopWatch = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$stopwatch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["StopWatch"]();
        this.listenerCount = listenerCount;
    }
    stop() {
        if (this._stopWatch) {
            const elapsed = this._stopWatch.elapsed();
            this.durations.push(elapsed);
            this.elapsedOverall += elapsed;
            this.invocationCount += 1;
            this._stopWatch = undefined;
        }
    }
}
let _globalLeakWarningThreshold = -1;
class LeakageMonitor {
    static{
        this._idPool = 1;
    }
    constructor(_errorHandler, threshold, name = (LeakageMonitor._idPool++).toString(16).padStart(3, '0')){
        this._errorHandler = _errorHandler;
        this.threshold = threshold;
        this.name = name;
        this._warnCountdown = 0;
    }
    dispose() {
        this._stacks?.clear();
    }
    check(stack, listenerCount) {
        const threshold = this.threshold;
        if (threshold <= 0 || listenerCount < threshold) {
            return undefined;
        }
        if (!this._stacks) {
            this._stacks = new Map();
        }
        const count = this._stacks.get(stack.value) || 0;
        this._stacks.set(stack.value, count + 1);
        this._warnCountdown -= 1;
        if (this._warnCountdown <= 0) {
            // only warn on first exceed and then every time the limit
            // is exceeded by 50% again
            this._warnCountdown = threshold * 0.5;
            const [topStack, topCount] = this.getMostFrequentStack();
            const message = `[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`;
            console.warn(message);
            console.warn(topStack);
            const error = new ListenerLeakError(message, topStack);
            this._errorHandler(error);
        }
        return ()=>{
            const count = this._stacks.get(stack.value) || 0;
            this._stacks.set(stack.value, count - 1);
        };
    }
    getMostFrequentStack() {
        if (!this._stacks) {
            return undefined;
        }
        let topStack;
        let topCount = 0;
        for (const [stack, count] of this._stacks){
            if (!topStack || topCount < count) {
                topStack = [
                    stack,
                    count
                ];
                topCount = count;
            }
        }
        return topStack;
    }
}
class Stacktrace {
    static create() {
        const err = new Error();
        return new Stacktrace(err.stack ?? '');
    }
    constructor(value){
        this.value = value;
    }
    print() {
        console.warn(this.value.split('\n').slice(2).join('\n'));
    }
}
class ListenerLeakError extends Error {
    constructor(message, stack){
        super(message);
        this.name = 'ListenerLeakError';
        this.stack = stack;
    }
}
class ListenerRefusalError extends Error {
    constructor(message, stack){
        super(message);
        this.name = 'ListenerRefusalError';
        this.stack = stack;
    }
}
class UniqueContainer {
    constructor(value){
        this.value = value;
    }
}
const compactionThreshold = 2;
const forEachListener = (listeners, fn)=>{
    if (listeners instanceof UniqueContainer) {
        fn(listeners);
    } else {
        for(let i = 0; i < listeners.length; i++){
            const l = listeners[i];
            if (l) {
                fn(l);
            }
        }
    }
};
let _listenerFinalizers;
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
}
class Emitter {
    constructor(options){
        this._size = 0;
        this._options = options;
        this._leakageMon = _globalLeakWarningThreshold > 0 || this._options?.leakWarningThreshold ? new LeakageMonitor(options?.onListenerError ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["onUnexpectedError"], this._options?.leakWarningThreshold ?? _globalLeakWarningThreshold) : undefined;
        this._perfMon = this._options?._profName ? new EventProfiling(this._options._profName) : undefined;
        this._deliveryQueue = this._options?.deliveryQueue;
    }
    dispose() {
        if (!this._disposed) {
            this._disposed = true;
            // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter
            // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and
            // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the
            // the following programming pattern is very popular:
            //
            // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model
            // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener
            // ...later...
            // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the "overall dispose" is done
            if (this._deliveryQueue?.current === this) {
                this._deliveryQueue.reset();
            }
            if (this._listeners) {
                if ("TURBOPACK compile-time falsy", 0) {
                    "TURBOPACK unreachable";
                }
                this._listeners = undefined;
                this._size = 0;
            }
            this._options?.onDidRemoveLastListener?.();
            this._leakageMon?.dispose();
        }
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */ get event() {
        this._event ??= (callback, thisArgs, disposables)=>{
            if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {
                const message = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;
                console.warn(message);
                const tuple = this._leakageMon.getMostFrequentStack() ?? [
                    'UNKNOWN stack',
                    -1
                ];
                const error = new ListenerRefusalError(`${message}. HINT: Stack shows most frequent listener (${tuple[1]}-times)`, tuple[0]);
                const errorHandler = this._options?.onListenerError || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["onUnexpectedError"];
                errorHandler(error);
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Disposable"].None;
            }
            if (this._disposed) {
                // todo: should we warn if a listener is added to a disposed emitter? This happens often
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Disposable"].None;
            }
            if (thisArgs) {
                callback = callback.bind(thisArgs);
            }
            const contained = new UniqueContainer(callback);
            let removeMonitor;
            let stack;
            if (this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2)) {
                // check and record this emitter for potential leakage
                contained.stack = Stacktrace.create();
                removeMonitor = this._leakageMon.check(contained.stack, this._size + 1);
            }
            if ("TURBOPACK compile-time falsy", 0) {
                "TURBOPACK unreachable";
            }
            if (!this._listeners) {
                this._options?.onWillAddFirstListener?.(this);
                this._listeners = contained;
                this._options?.onDidAddFirstListener?.(this);
            } else if (this._listeners instanceof UniqueContainer) {
                this._deliveryQueue ??= new EventDeliveryQueuePrivate();
                this._listeners = [
                    this._listeners,
                    contained
                ];
            } else {
                this._listeners.push(contained);
            }
            this._size++;
            const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toDisposable"])(()=>{
                _listenerFinalizers?.unregister(result);
                removeMonitor?.();
                this._removeListener(contained);
            });
            if (disposables instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DisposableStore"]) {
                disposables.add(result);
            } else if (Array.isArray(disposables)) {
                disposables.push(result);
            }
            if (_listenerFinalizers) {
                const stack = new Error().stack.split('\n').slice(2, 3).join('\n').trim();
                const match = /(file:|vscode-file:\/\/vscode-app)?(\/[^:]*:\d+:\d+)/.exec(stack);
                _listenerFinalizers.register(result, match?.[2] ?? stack, result);
            }
            return result;
        };
        return this._event;
    }
    _removeListener(listener) {
        this._options?.onWillRemoveListener?.(this);
        if (!this._listeners) {
            return; // expected if a listener gets disposed
        }
        if (this._size === 1) {
            this._listeners = undefined;
            this._options?.onDidRemoveLastListener?.(this);
            this._size = 0;
            return;
        }
        // size > 1 which requires that listeners be a list:
        const listeners = this._listeners;
        const index = listeners.indexOf(listener);
        if (index === -1) {
            console.log('disposed?', this._disposed);
            console.log('size?', this._size);
            console.log('arr?', JSON.stringify(this._listeners));
            throw new Error('Attempted to dispose unknown listener');
        }
        this._size--;
        listeners[index] = undefined;
        const adjustDeliveryQueue = this._deliveryQueue.current === this;
        if (this._size * compactionThreshold <= listeners.length) {
            let n = 0;
            for(let i = 0; i < listeners.length; i++){
                if (listeners[i]) {
                    listeners[n++] = listeners[i];
                } else if (adjustDeliveryQueue) {
                    this._deliveryQueue.end--;
                    if (n < this._deliveryQueue.i) {
                        this._deliveryQueue.i--;
                    }
                }
            }
            listeners.length = n;
        }
    }
    _deliver(listener, value) {
        if (!listener) {
            return;
        }
        const errorHandler = this._options?.onListenerError || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["onUnexpectedError"];
        if (!errorHandler) {
            listener.value(value);
            return;
        }
        try {
            listener.value(value);
        } catch (e) {
            errorHandler(e);
        }
    }
    /** Delivers items in the queue. Assumes the queue is ready to go. */ _deliverQueue(dq) {
        const listeners = dq.current._listeners;
        while(dq.i < dq.end){
            // important: dq.i is incremented before calling deliver() because it might reenter deliverQueue()
            this._deliver(listeners[dq.i++], dq.value);
        }
        dq.reset();
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */ fire(event) {
        if (this._deliveryQueue?.current) {
            this._deliverQueue(this._deliveryQueue);
            this._perfMon?.stop(); // last fire() will have starting perfmon, stop it before starting the next dispatch
        }
        this._perfMon?.start(this._size);
        if (!this._listeners) {
        // no-op
        } else if (this._listeners instanceof UniqueContainer) {
            this._deliver(this._listeners, event);
        } else {
            const dq = this._deliveryQueue;
            dq.enqueue(this, event, this._listeners.length);
            this._deliverQueue(dq);
        }
        this._perfMon?.stop();
    }
    hasListeners() {
        return this._size > 0;
    }
}
const createEventDeliveryQueue = ()=>new EventDeliveryQueuePrivate();
class EventDeliveryQueuePrivate {
    constructor(){
        /**
         * Index in current's listener list.
         */ this.i = -1;
        /**
         * The last index in the listener's list to deliver.
         */ this.end = 0;
    }
    enqueue(emitter, value, end) {
        this.i = 0;
        this.end = end;
        this.current = emitter;
        this.value = value;
    }
    reset() {
        this.i = this.end; // force any current emission loop to stop, mainly for during dispose
        this.current = undefined;
        this.value = undefined;
    }
}
class PauseableEmitter extends Emitter {
    constructor(options){
        super(options);
        this._isPaused = 0;
        this._eventQueue = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$linkedList$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LinkedList"]();
        this._mergeFn = options?.merge;
    }
    pause() {
        this._isPaused++;
    }
    resume() {
        if (this._isPaused !== 0 && --this._isPaused === 0) {
            if (this._mergeFn) {
                // use the merge function to create a single composite
                // event. make a copy in case firing pauses this emitter
                if (this._eventQueue.size > 0) {
                    const events = Array.from(this._eventQueue);
                    this._eventQueue.clear();
                    super.fire(this._mergeFn(events));
                }
            } else {
                // no merging, fire each event individually and test
                // that this emitter isn't paused halfway through
                while(!this._isPaused && this._eventQueue.size !== 0){
                    super.fire(this._eventQueue.shift());
                }
            }
        }
    }
    fire(event) {
        if (this._size) {
            if (this._isPaused !== 0) {
                this._eventQueue.push(event);
            } else {
                super.fire(event);
            }
        }
    }
}
class DebounceEmitter extends PauseableEmitter {
    constructor(options){
        super(options);
        this._delay = options.delay ?? 100;
    }
    fire(event) {
        if (!this._handle) {
            this.pause();
            this._handle = setTimeout(()=>{
                this._handle = undefined;
                this.resume();
            }, this._delay);
        }
        super.fire(event);
    }
}
class MicrotaskEmitter extends Emitter {
    constructor(options){
        super(options);
        this._queuedEvents = [];
        this._mergeFn = options?.merge;
    }
    fire(event) {
        if (!this.hasListeners()) {
            return;
        }
        this._queuedEvents.push(event);
        if (this._queuedEvents.length === 1) {
            queueMicrotask(()=>{
                if (this._mergeFn) {
                    super.fire(this._mergeFn(this._queuedEvents));
                } else {
                    this._queuedEvents.forEach((e)=>super.fire(e));
                }
                this._queuedEvents = [];
            });
        }
    }
}
class EventMultiplexer {
    constructor(){
        this.hasListeners = false;
        this.events = [];
        this.emitter = new Emitter({
            onWillAddFirstListener: ()=>this.onFirstListenerAdd(),
            onDidRemoveLastListener: ()=>this.onLastListenerRemove()
        });
    }
    get event() {
        return this.emitter.event;
    }
    add(event) {
        const e = {
            event: event,
            listener: null
        };
        this.events.push(e);
        if (this.hasListeners) {
            this.hook(e);
        }
        const dispose = ()=>{
            if (this.hasListeners) {
                this.unhook(e);
            }
            const idx = this.events.indexOf(e);
            this.events.splice(idx, 1);
        };
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toDisposable"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$functional$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSingleCallFunction"])(dispose));
    }
    onFirstListenerAdd() {
        this.hasListeners = true;
        this.events.forEach((e)=>this.hook(e));
    }
    onLastListenerRemove() {
        this.hasListeners = false;
        this.events.forEach((e)=>this.unhook(e));
    }
    hook(e) {
        e.listener = e.event((r)=>this.emitter.fire(r));
    }
    unhook(e) {
        e.listener?.dispose();
        e.listener = null;
    }
    dispose() {
        this.emitter.dispose();
        for (const e of this.events){
            e.listener?.dispose();
        }
        this.events = [];
    }
}
class EventBufferer {
    constructor(){
        this.data = [];
    }
    wrapEvent(event, reduce, initial) {
        return (listener, thisArgs, disposables)=>{
            return event((i)=>{
                const data = this.data[this.data.length - 1];
                // Non-reduce scenario
                if (!reduce) {
                    // Buffering case
                    if (data) {
                        data.buffers.push(()=>listener.call(thisArgs, i));
                    } else {
                        // Not buffering case
                        listener.call(thisArgs, i);
                    }
                    return;
                }
                // Reduce scenario
                const reduceData = data;
                // Not buffering case
                if (!reduceData) {
                    // TODO: Is there a way to cache this reduce call for all listeners?
                    listener.call(thisArgs, reduce(initial, i));
                    return;
                }
                // Buffering case
                reduceData.items ??= [];
                reduceData.items.push(i);
                if (reduceData.buffers.length === 0) {
                    // Include a single buffered function that will reduce all events when we're done buffering events
                    data.buffers.push(()=>{
                        // cache the reduced result so that the value can be shared across all listeners
                        reduceData.reducedResult ??= initial ? reduceData.items.reduce(reduce, initial) : reduceData.items.reduce(reduce);
                        listener.call(thisArgs, reduceData.reducedResult);
                    });
                }
            }, undefined, disposables);
        };
    }
    bufferEvents(fn) {
        const data = {
            buffers: new Array()
        };
        this.data.push(data);
        const r = fn();
        this.data.pop();
        data.buffers.forEach((flush)=>flush());
        return r;
    }
}
class Relay {
    constructor(){
        this.listening = false;
        this.inputEvent = Event.None;
        this.inputEventListener = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Disposable"].None;
        this.emitter = new Emitter({
            onDidAddFirstListener: ()=>{
                this.listening = true;
                this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);
            },
            onDidRemoveLastListener: ()=>{
                this.listening = false;
                this.inputEventListener.dispose();
            }
        });
        this.event = this.emitter.event;
    }
    set input(event) {
        this.inputEvent = event;
        if (this.listening) {
            this.inputEventListener.dispose();
            this.inputEventListener = event(this.emitter.fire, this.emitter);
        }
    }
    dispose() {
        this.inputEventListener.dispose();
        this.emitter.dispose();
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/cancellation.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "CancellationToken": (()=>CancellationToken),
    "CancellationTokenSource": (()=>CancellationTokenSource),
    "cancelOnDispose": (()=>cancelOnDispose)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/event.js [app-client] (ecmascript)");
;
const shortcutEvent = Object.freeze(function(callback, context) {
    const handle = setTimeout(callback.bind(context), 0);
    return {
        dispose () {
            clearTimeout(handle);
        }
    };
});
var CancellationToken;
(function(CancellationToken) {
    function isCancellationToken(thing) {
        if (thing === CancellationToken.None || thing === CancellationToken.Cancelled) {
            return true;
        }
        if (thing instanceof MutableToken) {
            return true;
        }
        if (!thing || typeof thing !== 'object') {
            return false;
        }
        return typeof thing.isCancellationRequested === 'boolean' && typeof thing.onCancellationRequested === 'function';
    }
    CancellationToken.isCancellationToken = isCancellationToken;
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Event"].None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: shortcutEvent
    });
})(CancellationToken || (CancellationToken = {}));
class MutableToken {
    constructor(){
        this._isCancelled = false;
        this._emitter = null;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this.dispose();
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Emitter"]();
        }
        return this._emitter.event;
    }
    dispose() {
        if (this._emitter) {
            this._emitter.dispose();
            this._emitter = null;
        }
    }
}
class CancellationTokenSource {
    constructor(parent){
        this._token = undefined;
        this._parentListener = undefined;
        this._parentListener = parent && parent.onCancellationRequested(this.cancel, this);
    }
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        } else if (this._token instanceof MutableToken) {
            // actually cancel
            this._token.cancel();
        }
    }
    dispose(cancel = false) {
        if (cancel) {
            this.cancel();
        }
        this._parentListener?.dispose();
        if (!this._token) {
            // ensure to initialize with an empty token if we had none
            this._token = CancellationToken.None;
        } else if (this._token instanceof MutableToken) {
            // actually dispose
            this._token.dispose();
        }
    }
}
function cancelOnDispose(store) {
    const source = new CancellationTokenSource();
    store.add({
        dispose () {
            source.cancel();
        }
    });
    return source.token;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/keyCodes.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "EVENT_KEY_CODE_MAP": (()=>EVENT_KEY_CODE_MAP),
    "IMMUTABLE_CODE_TO_KEY_CODE": (()=>IMMUTABLE_CODE_TO_KEY_CODE),
    "IMMUTABLE_KEY_CODE_TO_CODE": (()=>IMMUTABLE_KEY_CODE_TO_CODE),
    "KeyChord": (()=>KeyChord),
    "KeyCodeUtils": (()=>KeyCodeUtils),
    "NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE": (()=>NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE)
});
class KeyCodeStrMap {
    constructor(){
        this._keyCodeToStr = [];
        this._strToKeyCode = Object.create(null);
    }
    define(keyCode, str) {
        this._keyCodeToStr[keyCode] = str;
        this._strToKeyCode[str.toLowerCase()] = keyCode;
    }
    keyCodeToStr(keyCode) {
        return this._keyCodeToStr[keyCode];
    }
    strToKeyCode(str) {
        return this._strToKeyCode[str.toLowerCase()] || 0 /* KeyCode.Unknown */ ;
    }
}
const uiMap = new KeyCodeStrMap();
const userSettingsUSMap = new KeyCodeStrMap();
const userSettingsGeneralMap = new KeyCodeStrMap();
const EVENT_KEY_CODE_MAP = new Array(230);
const NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE = {};
const scanCodeIntToStr = [];
const scanCodeStrToInt = Object.create(null);
const scanCodeLowerCaseStrToInt = Object.create(null);
const IMMUTABLE_CODE_TO_KEY_CODE = [];
const IMMUTABLE_KEY_CODE_TO_CODE = [];
for(let i = 0; i <= 193 /* ScanCode.MAX_VALUE */ ; i++){
    IMMUTABLE_CODE_TO_KEY_CODE[i] = -1 /* KeyCode.DependsOnKbLayout */ ;
}
for(let i = 0; i <= 132 /* KeyCode.MAX_VALUE */ ; i++){
    IMMUTABLE_KEY_CODE_TO_CODE[i] = -1 /* ScanCode.DependsOnKbLayout */ ;
}
(function() {
    // See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
    // See https://github.com/microsoft/node-native-keymap/blob/88c0b0e5/deps/chromium/keyboard_codes_win.h
    const empty = '';
    const mappings = [
        // immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel
        [
            1,
            0 /* ScanCode.None */ ,
            'None',
            0 /* KeyCode.Unknown */ ,
            'unknown',
            0,
            'VK_UNKNOWN',
            empty,
            empty
        ],
        [
            1,
            1 /* ScanCode.Hyper */ ,
            'Hyper',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            2 /* ScanCode.Super */ ,
            'Super',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            3 /* ScanCode.Fn */ ,
            'Fn',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            4 /* ScanCode.FnLock */ ,
            'FnLock',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            5 /* ScanCode.Suspend */ ,
            'Suspend',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            6 /* ScanCode.Resume */ ,
            'Resume',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            7 /* ScanCode.Turbo */ ,
            'Turbo',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            8 /* ScanCode.Sleep */ ,
            'Sleep',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_SLEEP',
            empty,
            empty
        ],
        [
            1,
            9 /* ScanCode.WakeUp */ ,
            'WakeUp',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            0,
            10 /* ScanCode.KeyA */ ,
            'KeyA',
            31 /* KeyCode.KeyA */ ,
            'A',
            65,
            'VK_A',
            empty,
            empty
        ],
        [
            0,
            11 /* ScanCode.KeyB */ ,
            'KeyB',
            32 /* KeyCode.KeyB */ ,
            'B',
            66,
            'VK_B',
            empty,
            empty
        ],
        [
            0,
            12 /* ScanCode.KeyC */ ,
            'KeyC',
            33 /* KeyCode.KeyC */ ,
            'C',
            67,
            'VK_C',
            empty,
            empty
        ],
        [
            0,
            13 /* ScanCode.KeyD */ ,
            'KeyD',
            34 /* KeyCode.KeyD */ ,
            'D',
            68,
            'VK_D',
            empty,
            empty
        ],
        [
            0,
            14 /* ScanCode.KeyE */ ,
            'KeyE',
            35 /* KeyCode.KeyE */ ,
            'E',
            69,
            'VK_E',
            empty,
            empty
        ],
        [
            0,
            15 /* ScanCode.KeyF */ ,
            'KeyF',
            36 /* KeyCode.KeyF */ ,
            'F',
            70,
            'VK_F',
            empty,
            empty
        ],
        [
            0,
            16 /* ScanCode.KeyG */ ,
            'KeyG',
            37 /* KeyCode.KeyG */ ,
            'G',
            71,
            'VK_G',
            empty,
            empty
        ],
        [
            0,
            17 /* ScanCode.KeyH */ ,
            'KeyH',
            38 /* KeyCode.KeyH */ ,
            'H',
            72,
            'VK_H',
            empty,
            empty
        ],
        [
            0,
            18 /* ScanCode.KeyI */ ,
            'KeyI',
            39 /* KeyCode.KeyI */ ,
            'I',
            73,
            'VK_I',
            empty,
            empty
        ],
        [
            0,
            19 /* ScanCode.KeyJ */ ,
            'KeyJ',
            40 /* KeyCode.KeyJ */ ,
            'J',
            74,
            'VK_J',
            empty,
            empty
        ],
        [
            0,
            20 /* ScanCode.KeyK */ ,
            'KeyK',
            41 /* KeyCode.KeyK */ ,
            'K',
            75,
            'VK_K',
            empty,
            empty
        ],
        [
            0,
            21 /* ScanCode.KeyL */ ,
            'KeyL',
            42 /* KeyCode.KeyL */ ,
            'L',
            76,
            'VK_L',
            empty,
            empty
        ],
        [
            0,
            22 /* ScanCode.KeyM */ ,
            'KeyM',
            43 /* KeyCode.KeyM */ ,
            'M',
            77,
            'VK_M',
            empty,
            empty
        ],
        [
            0,
            23 /* ScanCode.KeyN */ ,
            'KeyN',
            44 /* KeyCode.KeyN */ ,
            'N',
            78,
            'VK_N',
            empty,
            empty
        ],
        [
            0,
            24 /* ScanCode.KeyO */ ,
            'KeyO',
            45 /* KeyCode.KeyO */ ,
            'O',
            79,
            'VK_O',
            empty,
            empty
        ],
        [
            0,
            25 /* ScanCode.KeyP */ ,
            'KeyP',
            46 /* KeyCode.KeyP */ ,
            'P',
            80,
            'VK_P',
            empty,
            empty
        ],
        [
            0,
            26 /* ScanCode.KeyQ */ ,
            'KeyQ',
            47 /* KeyCode.KeyQ */ ,
            'Q',
            81,
            'VK_Q',
            empty,
            empty
        ],
        [
            0,
            27 /* ScanCode.KeyR */ ,
            'KeyR',
            48 /* KeyCode.KeyR */ ,
            'R',
            82,
            'VK_R',
            empty,
            empty
        ],
        [
            0,
            28 /* ScanCode.KeyS */ ,
            'KeyS',
            49 /* KeyCode.KeyS */ ,
            'S',
            83,
            'VK_S',
            empty,
            empty
        ],
        [
            0,
            29 /* ScanCode.KeyT */ ,
            'KeyT',
            50 /* KeyCode.KeyT */ ,
            'T',
            84,
            'VK_T',
            empty,
            empty
        ],
        [
            0,
            30 /* ScanCode.KeyU */ ,
            'KeyU',
            51 /* KeyCode.KeyU */ ,
            'U',
            85,
            'VK_U',
            empty,
            empty
        ],
        [
            0,
            31 /* ScanCode.KeyV */ ,
            'KeyV',
            52 /* KeyCode.KeyV */ ,
            'V',
            86,
            'VK_V',
            empty,
            empty
        ],
        [
            0,
            32 /* ScanCode.KeyW */ ,
            'KeyW',
            53 /* KeyCode.KeyW */ ,
            'W',
            87,
            'VK_W',
            empty,
            empty
        ],
        [
            0,
            33 /* ScanCode.KeyX */ ,
            'KeyX',
            54 /* KeyCode.KeyX */ ,
            'X',
            88,
            'VK_X',
            empty,
            empty
        ],
        [
            0,
            34 /* ScanCode.KeyY */ ,
            'KeyY',
            55 /* KeyCode.KeyY */ ,
            'Y',
            89,
            'VK_Y',
            empty,
            empty
        ],
        [
            0,
            35 /* ScanCode.KeyZ */ ,
            'KeyZ',
            56 /* KeyCode.KeyZ */ ,
            'Z',
            90,
            'VK_Z',
            empty,
            empty
        ],
        [
            0,
            36 /* ScanCode.Digit1 */ ,
            'Digit1',
            22 /* KeyCode.Digit1 */ ,
            '1',
            49,
            'VK_1',
            empty,
            empty
        ],
        [
            0,
            37 /* ScanCode.Digit2 */ ,
            'Digit2',
            23 /* KeyCode.Digit2 */ ,
            '2',
            50,
            'VK_2',
            empty,
            empty
        ],
        [
            0,
            38 /* ScanCode.Digit3 */ ,
            'Digit3',
            24 /* KeyCode.Digit3 */ ,
            '3',
            51,
            'VK_3',
            empty,
            empty
        ],
        [
            0,
            39 /* ScanCode.Digit4 */ ,
            'Digit4',
            25 /* KeyCode.Digit4 */ ,
            '4',
            52,
            'VK_4',
            empty,
            empty
        ],
        [
            0,
            40 /* ScanCode.Digit5 */ ,
            'Digit5',
            26 /* KeyCode.Digit5 */ ,
            '5',
            53,
            'VK_5',
            empty,
            empty
        ],
        [
            0,
            41 /* ScanCode.Digit6 */ ,
            'Digit6',
            27 /* KeyCode.Digit6 */ ,
            '6',
            54,
            'VK_6',
            empty,
            empty
        ],
        [
            0,
            42 /* ScanCode.Digit7 */ ,
            'Digit7',
            28 /* KeyCode.Digit7 */ ,
            '7',
            55,
            'VK_7',
            empty,
            empty
        ],
        [
            0,
            43 /* ScanCode.Digit8 */ ,
            'Digit8',
            29 /* KeyCode.Digit8 */ ,
            '8',
            56,
            'VK_8',
            empty,
            empty
        ],
        [
            0,
            44 /* ScanCode.Digit9 */ ,
            'Digit9',
            30 /* KeyCode.Digit9 */ ,
            '9',
            57,
            'VK_9',
            empty,
            empty
        ],
        [
            0,
            45 /* ScanCode.Digit0 */ ,
            'Digit0',
            21 /* KeyCode.Digit0 */ ,
            '0',
            48,
            'VK_0',
            empty,
            empty
        ],
        [
            1,
            46 /* ScanCode.Enter */ ,
            'Enter',
            3 /* KeyCode.Enter */ ,
            'Enter',
            13,
            'VK_RETURN',
            empty,
            empty
        ],
        [
            1,
            47 /* ScanCode.Escape */ ,
            'Escape',
            9 /* KeyCode.Escape */ ,
            'Escape',
            27,
            'VK_ESCAPE',
            empty,
            empty
        ],
        [
            1,
            48 /* ScanCode.Backspace */ ,
            'Backspace',
            1 /* KeyCode.Backspace */ ,
            'Backspace',
            8,
            'VK_BACK',
            empty,
            empty
        ],
        [
            1,
            49 /* ScanCode.Tab */ ,
            'Tab',
            2 /* KeyCode.Tab */ ,
            'Tab',
            9,
            'VK_TAB',
            empty,
            empty
        ],
        [
            1,
            50 /* ScanCode.Space */ ,
            'Space',
            10 /* KeyCode.Space */ ,
            'Space',
            32,
            'VK_SPACE',
            empty,
            empty
        ],
        [
            0,
            51 /* ScanCode.Minus */ ,
            'Minus',
            88 /* KeyCode.Minus */ ,
            '-',
            189,
            'VK_OEM_MINUS',
            '-',
            'OEM_MINUS'
        ],
        [
            0,
            52 /* ScanCode.Equal */ ,
            'Equal',
            86 /* KeyCode.Equal */ ,
            '=',
            187,
            'VK_OEM_PLUS',
            '=',
            'OEM_PLUS'
        ],
        [
            0,
            53 /* ScanCode.BracketLeft */ ,
            'BracketLeft',
            92 /* KeyCode.BracketLeft */ ,
            '[',
            219,
            'VK_OEM_4',
            '[',
            'OEM_4'
        ],
        [
            0,
            54 /* ScanCode.BracketRight */ ,
            'BracketRight',
            94 /* KeyCode.BracketRight */ ,
            ']',
            221,
            'VK_OEM_6',
            ']',
            'OEM_6'
        ],
        [
            0,
            55 /* ScanCode.Backslash */ ,
            'Backslash',
            93 /* KeyCode.Backslash */ ,
            '\\',
            220,
            'VK_OEM_5',
            '\\',
            'OEM_5'
        ],
        [
            0,
            56 /* ScanCode.IntlHash */ ,
            'IntlHash',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            0,
            57 /* ScanCode.Semicolon */ ,
            'Semicolon',
            85 /* KeyCode.Semicolon */ ,
            ';',
            186,
            'VK_OEM_1',
            ';',
            'OEM_1'
        ],
        [
            0,
            58 /* ScanCode.Quote */ ,
            'Quote',
            95 /* KeyCode.Quote */ ,
            '\'',
            222,
            'VK_OEM_7',
            '\'',
            'OEM_7'
        ],
        [
            0,
            59 /* ScanCode.Backquote */ ,
            'Backquote',
            91 /* KeyCode.Backquote */ ,
            '`',
            192,
            'VK_OEM_3',
            '`',
            'OEM_3'
        ],
        [
            0,
            60 /* ScanCode.Comma */ ,
            'Comma',
            87 /* KeyCode.Comma */ ,
            ',',
            188,
            'VK_OEM_COMMA',
            ',',
            'OEM_COMMA'
        ],
        [
            0,
            61 /* ScanCode.Period */ ,
            'Period',
            89 /* KeyCode.Period */ ,
            '.',
            190,
            'VK_OEM_PERIOD',
            '.',
            'OEM_PERIOD'
        ],
        [
            0,
            62 /* ScanCode.Slash */ ,
            'Slash',
            90 /* KeyCode.Slash */ ,
            '/',
            191,
            'VK_OEM_2',
            '/',
            'OEM_2'
        ],
        [
            1,
            63 /* ScanCode.CapsLock */ ,
            'CapsLock',
            8 /* KeyCode.CapsLock */ ,
            'CapsLock',
            20,
            'VK_CAPITAL',
            empty,
            empty
        ],
        [
            1,
            64 /* ScanCode.F1 */ ,
            'F1',
            59 /* KeyCode.F1 */ ,
            'F1',
            112,
            'VK_F1',
            empty,
            empty
        ],
        [
            1,
            65 /* ScanCode.F2 */ ,
            'F2',
            60 /* KeyCode.F2 */ ,
            'F2',
            113,
            'VK_F2',
            empty,
            empty
        ],
        [
            1,
            66 /* ScanCode.F3 */ ,
            'F3',
            61 /* KeyCode.F3 */ ,
            'F3',
            114,
            'VK_F3',
            empty,
            empty
        ],
        [
            1,
            67 /* ScanCode.F4 */ ,
            'F4',
            62 /* KeyCode.F4 */ ,
            'F4',
            115,
            'VK_F4',
            empty,
            empty
        ],
        [
            1,
            68 /* ScanCode.F5 */ ,
            'F5',
            63 /* KeyCode.F5 */ ,
            'F5',
            116,
            'VK_F5',
            empty,
            empty
        ],
        [
            1,
            69 /* ScanCode.F6 */ ,
            'F6',
            64 /* KeyCode.F6 */ ,
            'F6',
            117,
            'VK_F6',
            empty,
            empty
        ],
        [
            1,
            70 /* ScanCode.F7 */ ,
            'F7',
            65 /* KeyCode.F7 */ ,
            'F7',
            118,
            'VK_F7',
            empty,
            empty
        ],
        [
            1,
            71 /* ScanCode.F8 */ ,
            'F8',
            66 /* KeyCode.F8 */ ,
            'F8',
            119,
            'VK_F8',
            empty,
            empty
        ],
        [
            1,
            72 /* ScanCode.F9 */ ,
            'F9',
            67 /* KeyCode.F9 */ ,
            'F9',
            120,
            'VK_F9',
            empty,
            empty
        ],
        [
            1,
            73 /* ScanCode.F10 */ ,
            'F10',
            68 /* KeyCode.F10 */ ,
            'F10',
            121,
            'VK_F10',
            empty,
            empty
        ],
        [
            1,
            74 /* ScanCode.F11 */ ,
            'F11',
            69 /* KeyCode.F11 */ ,
            'F11',
            122,
            'VK_F11',
            empty,
            empty
        ],
        [
            1,
            75 /* ScanCode.F12 */ ,
            'F12',
            70 /* KeyCode.F12 */ ,
            'F12',
            123,
            'VK_F12',
            empty,
            empty
        ],
        [
            1,
            76 /* ScanCode.PrintScreen */ ,
            'PrintScreen',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            77 /* ScanCode.ScrollLock */ ,
            'ScrollLock',
            84 /* KeyCode.ScrollLock */ ,
            'ScrollLock',
            145,
            'VK_SCROLL',
            empty,
            empty
        ],
        [
            1,
            78 /* ScanCode.Pause */ ,
            'Pause',
            7 /* KeyCode.PauseBreak */ ,
            'PauseBreak',
            19,
            'VK_PAUSE',
            empty,
            empty
        ],
        [
            1,
            79 /* ScanCode.Insert */ ,
            'Insert',
            19 /* KeyCode.Insert */ ,
            'Insert',
            45,
            'VK_INSERT',
            empty,
            empty
        ],
        [
            1,
            80 /* ScanCode.Home */ ,
            'Home',
            14 /* KeyCode.Home */ ,
            'Home',
            36,
            'VK_HOME',
            empty,
            empty
        ],
        [
            1,
            81 /* ScanCode.PageUp */ ,
            'PageUp',
            11 /* KeyCode.PageUp */ ,
            'PageUp',
            33,
            'VK_PRIOR',
            empty,
            empty
        ],
        [
            1,
            82 /* ScanCode.Delete */ ,
            'Delete',
            20 /* KeyCode.Delete */ ,
            'Delete',
            46,
            'VK_DELETE',
            empty,
            empty
        ],
        [
            1,
            83 /* ScanCode.End */ ,
            'End',
            13 /* KeyCode.End */ ,
            'End',
            35,
            'VK_END',
            empty,
            empty
        ],
        [
            1,
            84 /* ScanCode.PageDown */ ,
            'PageDown',
            12 /* KeyCode.PageDown */ ,
            'PageDown',
            34,
            'VK_NEXT',
            empty,
            empty
        ],
        [
            1,
            85 /* ScanCode.ArrowRight */ ,
            'ArrowRight',
            17 /* KeyCode.RightArrow */ ,
            'RightArrow',
            39,
            'VK_RIGHT',
            'Right',
            empty
        ],
        [
            1,
            86 /* ScanCode.ArrowLeft */ ,
            'ArrowLeft',
            15 /* KeyCode.LeftArrow */ ,
            'LeftArrow',
            37,
            'VK_LEFT',
            'Left',
            empty
        ],
        [
            1,
            87 /* ScanCode.ArrowDown */ ,
            'ArrowDown',
            18 /* KeyCode.DownArrow */ ,
            'DownArrow',
            40,
            'VK_DOWN',
            'Down',
            empty
        ],
        [
            1,
            88 /* ScanCode.ArrowUp */ ,
            'ArrowUp',
            16 /* KeyCode.UpArrow */ ,
            'UpArrow',
            38,
            'VK_UP',
            'Up',
            empty
        ],
        [
            1,
            89 /* ScanCode.NumLock */ ,
            'NumLock',
            83 /* KeyCode.NumLock */ ,
            'NumLock',
            144,
            'VK_NUMLOCK',
            empty,
            empty
        ],
        [
            1,
            90 /* ScanCode.NumpadDivide */ ,
            'NumpadDivide',
            113 /* KeyCode.NumpadDivide */ ,
            'NumPad_Divide',
            111,
            'VK_DIVIDE',
            empty,
            empty
        ],
        [
            1,
            91 /* ScanCode.NumpadMultiply */ ,
            'NumpadMultiply',
            108 /* KeyCode.NumpadMultiply */ ,
            'NumPad_Multiply',
            106,
            'VK_MULTIPLY',
            empty,
            empty
        ],
        [
            1,
            92 /* ScanCode.NumpadSubtract */ ,
            'NumpadSubtract',
            111 /* KeyCode.NumpadSubtract */ ,
            'NumPad_Subtract',
            109,
            'VK_SUBTRACT',
            empty,
            empty
        ],
        [
            1,
            93 /* ScanCode.NumpadAdd */ ,
            'NumpadAdd',
            109 /* KeyCode.NumpadAdd */ ,
            'NumPad_Add',
            107,
            'VK_ADD',
            empty,
            empty
        ],
        [
            1,
            94 /* ScanCode.NumpadEnter */ ,
            'NumpadEnter',
            3 /* KeyCode.Enter */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            95 /* ScanCode.Numpad1 */ ,
            'Numpad1',
            99 /* KeyCode.Numpad1 */ ,
            'NumPad1',
            97,
            'VK_NUMPAD1',
            empty,
            empty
        ],
        [
            1,
            96 /* ScanCode.Numpad2 */ ,
            'Numpad2',
            100 /* KeyCode.Numpad2 */ ,
            'NumPad2',
            98,
            'VK_NUMPAD2',
            empty,
            empty
        ],
        [
            1,
            97 /* ScanCode.Numpad3 */ ,
            'Numpad3',
            101 /* KeyCode.Numpad3 */ ,
            'NumPad3',
            99,
            'VK_NUMPAD3',
            empty,
            empty
        ],
        [
            1,
            98 /* ScanCode.Numpad4 */ ,
            'Numpad4',
            102 /* KeyCode.Numpad4 */ ,
            'NumPad4',
            100,
            'VK_NUMPAD4',
            empty,
            empty
        ],
        [
            1,
            99 /* ScanCode.Numpad5 */ ,
            'Numpad5',
            103 /* KeyCode.Numpad5 */ ,
            'NumPad5',
            101,
            'VK_NUMPAD5',
            empty,
            empty
        ],
        [
            1,
            100 /* ScanCode.Numpad6 */ ,
            'Numpad6',
            104 /* KeyCode.Numpad6 */ ,
            'NumPad6',
            102,
            'VK_NUMPAD6',
            empty,
            empty
        ],
        [
            1,
            101 /* ScanCode.Numpad7 */ ,
            'Numpad7',
            105 /* KeyCode.Numpad7 */ ,
            'NumPad7',
            103,
            'VK_NUMPAD7',
            empty,
            empty
        ],
        [
            1,
            102 /* ScanCode.Numpad8 */ ,
            'Numpad8',
            106 /* KeyCode.Numpad8 */ ,
            'NumPad8',
            104,
            'VK_NUMPAD8',
            empty,
            empty
        ],
        [
            1,
            103 /* ScanCode.Numpad9 */ ,
            'Numpad9',
            107 /* KeyCode.Numpad9 */ ,
            'NumPad9',
            105,
            'VK_NUMPAD9',
            empty,
            empty
        ],
        [
            1,
            104 /* ScanCode.Numpad0 */ ,
            'Numpad0',
            98 /* KeyCode.Numpad0 */ ,
            'NumPad0',
            96,
            'VK_NUMPAD0',
            empty,
            empty
        ],
        [
            1,
            105 /* ScanCode.NumpadDecimal */ ,
            'NumpadDecimal',
            112 /* KeyCode.NumpadDecimal */ ,
            'NumPad_Decimal',
            110,
            'VK_DECIMAL',
            empty,
            empty
        ],
        [
            0,
            106 /* ScanCode.IntlBackslash */ ,
            'IntlBackslash',
            97 /* KeyCode.IntlBackslash */ ,
            'OEM_102',
            226,
            'VK_OEM_102',
            empty,
            empty
        ],
        [
            1,
            107 /* ScanCode.ContextMenu */ ,
            'ContextMenu',
            58 /* KeyCode.ContextMenu */ ,
            'ContextMenu',
            93,
            empty,
            empty,
            empty
        ],
        [
            1,
            108 /* ScanCode.Power */ ,
            'Power',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            109 /* ScanCode.NumpadEqual */ ,
            'NumpadEqual',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            110 /* ScanCode.F13 */ ,
            'F13',
            71 /* KeyCode.F13 */ ,
            'F13',
            124,
            'VK_F13',
            empty,
            empty
        ],
        [
            1,
            111 /* ScanCode.F14 */ ,
            'F14',
            72 /* KeyCode.F14 */ ,
            'F14',
            125,
            'VK_F14',
            empty,
            empty
        ],
        [
            1,
            112 /* ScanCode.F15 */ ,
            'F15',
            73 /* KeyCode.F15 */ ,
            'F15',
            126,
            'VK_F15',
            empty,
            empty
        ],
        [
            1,
            113 /* ScanCode.F16 */ ,
            'F16',
            74 /* KeyCode.F16 */ ,
            'F16',
            127,
            'VK_F16',
            empty,
            empty
        ],
        [
            1,
            114 /* ScanCode.F17 */ ,
            'F17',
            75 /* KeyCode.F17 */ ,
            'F17',
            128,
            'VK_F17',
            empty,
            empty
        ],
        [
            1,
            115 /* ScanCode.F18 */ ,
            'F18',
            76 /* KeyCode.F18 */ ,
            'F18',
            129,
            'VK_F18',
            empty,
            empty
        ],
        [
            1,
            116 /* ScanCode.F19 */ ,
            'F19',
            77 /* KeyCode.F19 */ ,
            'F19',
            130,
            'VK_F19',
            empty,
            empty
        ],
        [
            1,
            117 /* ScanCode.F20 */ ,
            'F20',
            78 /* KeyCode.F20 */ ,
            'F20',
            131,
            'VK_F20',
            empty,
            empty
        ],
        [
            1,
            118 /* ScanCode.F21 */ ,
            'F21',
            79 /* KeyCode.F21 */ ,
            'F21',
            132,
            'VK_F21',
            empty,
            empty
        ],
        [
            1,
            119 /* ScanCode.F22 */ ,
            'F22',
            80 /* KeyCode.F22 */ ,
            'F22',
            133,
            'VK_F22',
            empty,
            empty
        ],
        [
            1,
            120 /* ScanCode.F23 */ ,
            'F23',
            81 /* KeyCode.F23 */ ,
            'F23',
            134,
            'VK_F23',
            empty,
            empty
        ],
        [
            1,
            121 /* ScanCode.F24 */ ,
            'F24',
            82 /* KeyCode.F24 */ ,
            'F24',
            135,
            'VK_F24',
            empty,
            empty
        ],
        [
            1,
            122 /* ScanCode.Open */ ,
            'Open',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            123 /* ScanCode.Help */ ,
            'Help',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            124 /* ScanCode.Select */ ,
            'Select',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            125 /* ScanCode.Again */ ,
            'Again',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            126 /* ScanCode.Undo */ ,
            'Undo',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            127 /* ScanCode.Cut */ ,
            'Cut',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            128 /* ScanCode.Copy */ ,
            'Copy',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            129 /* ScanCode.Paste */ ,
            'Paste',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            130 /* ScanCode.Find */ ,
            'Find',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            131 /* ScanCode.AudioVolumeMute */ ,
            'AudioVolumeMute',
            117 /* KeyCode.AudioVolumeMute */ ,
            'AudioVolumeMute',
            173,
            'VK_VOLUME_MUTE',
            empty,
            empty
        ],
        [
            1,
            132 /* ScanCode.AudioVolumeUp */ ,
            'AudioVolumeUp',
            118 /* KeyCode.AudioVolumeUp */ ,
            'AudioVolumeUp',
            175,
            'VK_VOLUME_UP',
            empty,
            empty
        ],
        [
            1,
            133 /* ScanCode.AudioVolumeDown */ ,
            'AudioVolumeDown',
            119 /* KeyCode.AudioVolumeDown */ ,
            'AudioVolumeDown',
            174,
            'VK_VOLUME_DOWN',
            empty,
            empty
        ],
        [
            1,
            134 /* ScanCode.NumpadComma */ ,
            'NumpadComma',
            110 /* KeyCode.NUMPAD_SEPARATOR */ ,
            'NumPad_Separator',
            108,
            'VK_SEPARATOR',
            empty,
            empty
        ],
        [
            0,
            135 /* ScanCode.IntlRo */ ,
            'IntlRo',
            115 /* KeyCode.ABNT_C1 */ ,
            'ABNT_C1',
            193,
            'VK_ABNT_C1',
            empty,
            empty
        ],
        [
            1,
            136 /* ScanCode.KanaMode */ ,
            'KanaMode',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            0,
            137 /* ScanCode.IntlYen */ ,
            'IntlYen',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            138 /* ScanCode.Convert */ ,
            'Convert',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            139 /* ScanCode.NonConvert */ ,
            'NonConvert',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            140 /* ScanCode.Lang1 */ ,
            'Lang1',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            141 /* ScanCode.Lang2 */ ,
            'Lang2',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            142 /* ScanCode.Lang3 */ ,
            'Lang3',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            143 /* ScanCode.Lang4 */ ,
            'Lang4',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            144 /* ScanCode.Lang5 */ ,
            'Lang5',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            145 /* ScanCode.Abort */ ,
            'Abort',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            146 /* ScanCode.Props */ ,
            'Props',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            147 /* ScanCode.NumpadParenLeft */ ,
            'NumpadParenLeft',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            148 /* ScanCode.NumpadParenRight */ ,
            'NumpadParenRight',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            149 /* ScanCode.NumpadBackspace */ ,
            'NumpadBackspace',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            150 /* ScanCode.NumpadMemoryStore */ ,
            'NumpadMemoryStore',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            151 /* ScanCode.NumpadMemoryRecall */ ,
            'NumpadMemoryRecall',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            152 /* ScanCode.NumpadMemoryClear */ ,
            'NumpadMemoryClear',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            153 /* ScanCode.NumpadMemoryAdd */ ,
            'NumpadMemoryAdd',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            154 /* ScanCode.NumpadMemorySubtract */ ,
            'NumpadMemorySubtract',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            155 /* ScanCode.NumpadClear */ ,
            'NumpadClear',
            131 /* KeyCode.Clear */ ,
            'Clear',
            12,
            'VK_CLEAR',
            empty,
            empty
        ],
        [
            1,
            156 /* ScanCode.NumpadClearEntry */ ,
            'NumpadClearEntry',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            5 /* KeyCode.Ctrl */ ,
            'Ctrl',
            17,
            'VK_CONTROL',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            4 /* KeyCode.Shift */ ,
            'Shift',
            16,
            'VK_SHIFT',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            6 /* KeyCode.Alt */ ,
            'Alt',
            18,
            'VK_MENU',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            57 /* KeyCode.Meta */ ,
            'Meta',
            91,
            'VK_COMMAND',
            empty,
            empty
        ],
        [
            1,
            157 /* ScanCode.ControlLeft */ ,
            'ControlLeft',
            5 /* KeyCode.Ctrl */ ,
            empty,
            0,
            'VK_LCONTROL',
            empty,
            empty
        ],
        [
            1,
            158 /* ScanCode.ShiftLeft */ ,
            'ShiftLeft',
            4 /* KeyCode.Shift */ ,
            empty,
            0,
            'VK_LSHIFT',
            empty,
            empty
        ],
        [
            1,
            159 /* ScanCode.AltLeft */ ,
            'AltLeft',
            6 /* KeyCode.Alt */ ,
            empty,
            0,
            'VK_LMENU',
            empty,
            empty
        ],
        [
            1,
            160 /* ScanCode.MetaLeft */ ,
            'MetaLeft',
            57 /* KeyCode.Meta */ ,
            empty,
            0,
            'VK_LWIN',
            empty,
            empty
        ],
        [
            1,
            161 /* ScanCode.ControlRight */ ,
            'ControlRight',
            5 /* KeyCode.Ctrl */ ,
            empty,
            0,
            'VK_RCONTROL',
            empty,
            empty
        ],
        [
            1,
            162 /* ScanCode.ShiftRight */ ,
            'ShiftRight',
            4 /* KeyCode.Shift */ ,
            empty,
            0,
            'VK_RSHIFT',
            empty,
            empty
        ],
        [
            1,
            163 /* ScanCode.AltRight */ ,
            'AltRight',
            6 /* KeyCode.Alt */ ,
            empty,
            0,
            'VK_RMENU',
            empty,
            empty
        ],
        [
            1,
            164 /* ScanCode.MetaRight */ ,
            'MetaRight',
            57 /* KeyCode.Meta */ ,
            empty,
            0,
            'VK_RWIN',
            empty,
            empty
        ],
        [
            1,
            165 /* ScanCode.BrightnessUp */ ,
            'BrightnessUp',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            166 /* ScanCode.BrightnessDown */ ,
            'BrightnessDown',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            167 /* ScanCode.MediaPlay */ ,
            'MediaPlay',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            168 /* ScanCode.MediaRecord */ ,
            'MediaRecord',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            169 /* ScanCode.MediaFastForward */ ,
            'MediaFastForward',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            170 /* ScanCode.MediaRewind */ ,
            'MediaRewind',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            171 /* ScanCode.MediaTrackNext */ ,
            'MediaTrackNext',
            124 /* KeyCode.MediaTrackNext */ ,
            'MediaTrackNext',
            176,
            'VK_MEDIA_NEXT_TRACK',
            empty,
            empty
        ],
        [
            1,
            172 /* ScanCode.MediaTrackPrevious */ ,
            'MediaTrackPrevious',
            125 /* KeyCode.MediaTrackPrevious */ ,
            'MediaTrackPrevious',
            177,
            'VK_MEDIA_PREV_TRACK',
            empty,
            empty
        ],
        [
            1,
            173 /* ScanCode.MediaStop */ ,
            'MediaStop',
            126 /* KeyCode.MediaStop */ ,
            'MediaStop',
            178,
            'VK_MEDIA_STOP',
            empty,
            empty
        ],
        [
            1,
            174 /* ScanCode.Eject */ ,
            'Eject',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            175 /* ScanCode.MediaPlayPause */ ,
            'MediaPlayPause',
            127 /* KeyCode.MediaPlayPause */ ,
            'MediaPlayPause',
            179,
            'VK_MEDIA_PLAY_PAUSE',
            empty,
            empty
        ],
        [
            1,
            176 /* ScanCode.MediaSelect */ ,
            'MediaSelect',
            128 /* KeyCode.LaunchMediaPlayer */ ,
            'LaunchMediaPlayer',
            181,
            'VK_MEDIA_LAUNCH_MEDIA_SELECT',
            empty,
            empty
        ],
        [
            1,
            177 /* ScanCode.LaunchMail */ ,
            'LaunchMail',
            129 /* KeyCode.LaunchMail */ ,
            'LaunchMail',
            180,
            'VK_MEDIA_LAUNCH_MAIL',
            empty,
            empty
        ],
        [
            1,
            178 /* ScanCode.LaunchApp2 */ ,
            'LaunchApp2',
            130 /* KeyCode.LaunchApp2 */ ,
            'LaunchApp2',
            183,
            'VK_MEDIA_LAUNCH_APP2',
            empty,
            empty
        ],
        [
            1,
            179 /* ScanCode.LaunchApp1 */ ,
            'LaunchApp1',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_MEDIA_LAUNCH_APP1',
            empty,
            empty
        ],
        [
            1,
            180 /* ScanCode.SelectTask */ ,
            'SelectTask',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            181 /* ScanCode.LaunchScreenSaver */ ,
            'LaunchScreenSaver',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            182 /* ScanCode.BrowserSearch */ ,
            'BrowserSearch',
            120 /* KeyCode.BrowserSearch */ ,
            'BrowserSearch',
            170,
            'VK_BROWSER_SEARCH',
            empty,
            empty
        ],
        [
            1,
            183 /* ScanCode.BrowserHome */ ,
            'BrowserHome',
            121 /* KeyCode.BrowserHome */ ,
            'BrowserHome',
            172,
            'VK_BROWSER_HOME',
            empty,
            empty
        ],
        [
            1,
            184 /* ScanCode.BrowserBack */ ,
            'BrowserBack',
            122 /* KeyCode.BrowserBack */ ,
            'BrowserBack',
            166,
            'VK_BROWSER_BACK',
            empty,
            empty
        ],
        [
            1,
            185 /* ScanCode.BrowserForward */ ,
            'BrowserForward',
            123 /* KeyCode.BrowserForward */ ,
            'BrowserForward',
            167,
            'VK_BROWSER_FORWARD',
            empty,
            empty
        ],
        [
            1,
            186 /* ScanCode.BrowserStop */ ,
            'BrowserStop',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_BROWSER_STOP',
            empty,
            empty
        ],
        [
            1,
            187 /* ScanCode.BrowserRefresh */ ,
            'BrowserRefresh',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_BROWSER_REFRESH',
            empty,
            empty
        ],
        [
            1,
            188 /* ScanCode.BrowserFavorites */ ,
            'BrowserFavorites',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_BROWSER_FAVORITES',
            empty,
            empty
        ],
        [
            1,
            189 /* ScanCode.ZoomToggle */ ,
            'ZoomToggle',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            190 /* ScanCode.MailReply */ ,
            'MailReply',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            191 /* ScanCode.MailForward */ ,
            'MailForward',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        [
            1,
            192 /* ScanCode.MailSend */ ,
            'MailSend',
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            empty,
            empty,
            empty
        ],
        // See https://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html
        // If an Input Method Editor is processing key input and the event is keydown, return 229.
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            114 /* KeyCode.KEY_IN_COMPOSITION */ ,
            'KeyInComposition',
            229,
            empty,
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            116 /* KeyCode.ABNT_C2 */ ,
            'ABNT_C2',
            194,
            'VK_ABNT_C2',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            96 /* KeyCode.OEM_8 */ ,
            'OEM_8',
            223,
            'VK_OEM_8',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_KANA',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_HANGUL',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_JUNJA',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_FINAL',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_HANJA',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_KANJI',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_CONVERT',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_NONCONVERT',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_ACCEPT',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_MODECHANGE',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_SELECT',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_PRINT',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_EXECUTE',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_SNAPSHOT',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_HELP',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_APPS',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_PROCESSKEY',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_PACKET',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_DBE_SBCSCHAR',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_DBE_DBCSCHAR',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_ATTN',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_CRSEL',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_EXSEL',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_EREOF',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_PLAY',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_ZOOM',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_NONAME',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_PA1',
            empty,
            empty
        ],
        [
            1,
            0 /* ScanCode.None */ ,
            empty,
            0 /* KeyCode.Unknown */ ,
            empty,
            0,
            'VK_OEM_CLEAR',
            empty,
            empty
        ]
    ];
    const seenKeyCode = [];
    const seenScanCode = [];
    for (const mapping of mappings){
        const [immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel] = mapping;
        if (!seenScanCode[scanCode]) {
            seenScanCode[scanCode] = true;
            scanCodeIntToStr[scanCode] = scanCodeStr;
            scanCodeStrToInt[scanCodeStr] = scanCode;
            scanCodeLowerCaseStrToInt[scanCodeStr.toLowerCase()] = scanCode;
            if (immutable) {
                IMMUTABLE_CODE_TO_KEY_CODE[scanCode] = keyCode;
                if (keyCode !== 0 /* KeyCode.Unknown */  && keyCode !== 3 /* KeyCode.Enter */  && keyCode !== 5 /* KeyCode.Ctrl */  && keyCode !== 4 /* KeyCode.Shift */  && keyCode !== 6 /* KeyCode.Alt */  && keyCode !== 57 /* KeyCode.Meta */ ) {
                    IMMUTABLE_KEY_CODE_TO_CODE[keyCode] = scanCode;
                }
            }
        }
        if (!seenKeyCode[keyCode]) {
            seenKeyCode[keyCode] = true;
            if (!keyCodeStr) {
                throw new Error(`String representation missing for key code ${keyCode} around scan code ${scanCodeStr}`);
            }
            uiMap.define(keyCode, keyCodeStr);
            userSettingsUSMap.define(keyCode, usUserSettingsLabel || keyCodeStr);
            userSettingsGeneralMap.define(keyCode, generalUserSettingsLabel || usUserSettingsLabel || keyCodeStr);
        }
        if (eventKeyCode) {
            EVENT_KEY_CODE_MAP[eventKeyCode] = keyCode;
        }
        if (vkey) {
            NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[vkey] = keyCode;
        }
    }
    // Manually added due to the exclusion above (due to duplication with NumpadEnter)
    IMMUTABLE_KEY_CODE_TO_CODE[3 /* KeyCode.Enter */ ] = 46 /* ScanCode.Enter */ ;
})();
var KeyCodeUtils;
(function(KeyCodeUtils) {
    function toString(keyCode) {
        return uiMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils.toString = toString;
    function fromString(key) {
        return uiMap.strToKeyCode(key);
    }
    KeyCodeUtils.fromString = fromString;
    function toUserSettingsUS(keyCode) {
        return userSettingsUSMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils.toUserSettingsUS = toUserSettingsUS;
    function toUserSettingsGeneral(keyCode) {
        return userSettingsGeneralMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils.toUserSettingsGeneral = toUserSettingsGeneral;
    function fromUserSettings(key) {
        return userSettingsUSMap.strToKeyCode(key) || userSettingsGeneralMap.strToKeyCode(key);
    }
    KeyCodeUtils.fromUserSettings = fromUserSettings;
    function toElectronAccelerator(keyCode) {
        if (keyCode >= 98 /* KeyCode.Numpad0 */  && keyCode <= 113 /* KeyCode.NumpadDivide */ ) {
            // [Electron Accelerators] Electron is able to parse numpad keys, but unfortunately it
            // renders them just as regular keys in menus. For example, num0 is rendered as "0",
            // numdiv is rendered as "/", numsub is rendered as "-".
            //
            // This can lead to incredible confusion, as it makes numpad based keybindings indistinguishable
            // from keybindings based on regular keys.
            //
            // We therefore need to fall back to custom rendering for numpad keys.
            return null;
        }
        switch(keyCode){
            case 16 /* KeyCode.UpArrow */ :
                return 'Up';
            case 18 /* KeyCode.DownArrow */ :
                return 'Down';
            case 15 /* KeyCode.LeftArrow */ :
                return 'Left';
            case 17 /* KeyCode.RightArrow */ :
                return 'Right';
        }
        return uiMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils.toElectronAccelerator = toElectronAccelerator;
})(KeyCodeUtils || (KeyCodeUtils = {}));
function KeyChord(firstPart, secondPart) {
    const chordPart = (secondPart & 0x0000FFFF) << 16 >>> 0;
    return (firstPart | chordPart) >>> 0;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/process.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "cwd": (()=>cwd),
    "env": (()=>env),
    "platform": (()=>platform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)");
;
let safeProcess;
// Native sandbox environment
const vscodeGlobal = globalThis.vscode;
if (typeof vscodeGlobal !== 'undefined' && typeof vscodeGlobal.process !== 'undefined') {
    const sandboxProcess = vscodeGlobal.process;
    safeProcess = {
        get platform () {
            return sandboxProcess.platform;
        },
        get arch () {
            return sandboxProcess.arch;
        },
        get env () {
            return sandboxProcess.env;
        },
        cwd () {
            return sandboxProcess.cwd();
        }
    };
} else if (typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== 'undefined' && typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]?.versions?.node === 'string') {
    safeProcess = {
        get platform () {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].platform;
        },
        get arch () {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].arch;
        },
        get env () {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env;
        },
        cwd () {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env['VSCODE_CWD'] || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cwd();
        }
    };
} else {
    safeProcess = {
        // Supported
        get platform () {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWindows"] ? 'win32' : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isMacintosh"] ? 'darwin' : 'linux';
        },
        get arch () {
            return undefined; /* arch is undefined in web */ 
        },
        // Unsupported
        get env () {
            return {};
        },
        cwd () {
            return '/';
        }
    };
}
const cwd = safeProcess.cwd;
const env = safeProcess.env;
const platform = safeProcess.platform;
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/path.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ // NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace
// Copied from: https://github.com/nodejs/node/commits/v20.9.0/lib/path.js
// Excluding: the change that adds primordials
// (https://github.com/nodejs/node/commit/187a862d221dec42fa9a5c4214e7034d9092792f and others)
/**
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ __turbopack_context__.s({
    "basename": (()=>basename),
    "dirname": (()=>dirname),
    "extname": (()=>extname),
    "join": (()=>join),
    "normalize": (()=>normalize),
    "posix": (()=>posix),
    "relative": (()=>relative),
    "resolve": (()=>resolve),
    "sep": (()=>sep),
    "win32": (()=>win32)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/process.js [app-client] (ecmascript)");
;
const CHAR_UPPERCASE_A = 65; /* A */ 
const CHAR_LOWERCASE_A = 97; /* a */ 
const CHAR_UPPERCASE_Z = 90; /* Z */ 
const CHAR_LOWERCASE_Z = 122; /* z */ 
const CHAR_DOT = 46; /* . */ 
const CHAR_FORWARD_SLASH = 47; /* / */ 
const CHAR_BACKWARD_SLASH = 92; /* \ */ 
const CHAR_COLON = 58; /* : */ 
const CHAR_QUESTION_MARK = 63; /* ? */ 
class ErrorInvalidArgType extends Error {
    constructor(name, expected, actual){
        // determiner: 'must be' or 'must not be'
        let determiner;
        if (typeof expected === 'string' && expected.indexOf('not ') === 0) {
            determiner = 'must not be';
            expected = expected.replace(/^not /, '');
        } else {
            determiner = 'must be';
        }
        const type = name.indexOf('.') !== -1 ? 'property' : 'argument';
        let msg = `The "${name}" ${type} ${determiner} of type ${expected}`;
        msg += `. Received type ${typeof actual}`;
        super(msg);
        this.code = 'ERR_INVALID_ARG_TYPE';
    }
}
function validateObject(pathObject, name) {
    if (pathObject === null || typeof pathObject !== 'object') {
        throw new ErrorInvalidArgType(name, 'Object', pathObject);
    }
}
function validateString(value, name) {
    if (typeof value !== 'string') {
        throw new ErrorInvalidArgType(name, 'string', value);
    }
}
const platformIsWin32 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["platform"] === 'win32';
function isPathSeparator(code) {
    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
}
function isPosixPathSeparator(code) {
    return code === CHAR_FORWARD_SLASH;
}
function isWindowsDeviceRoot(code) {
    return code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z || code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z;
}
// Resolves . and .. elements in a path with directory names
function normalizeString(path, allowAboveRoot, separator, isPathSeparator) {
    let res = '';
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code = 0;
    for(let i = 0; i <= path.length; ++i){
        if (i < path.length) {
            code = path.charCodeAt(i);
        } else if (isPathSeparator(code)) {
            break;
        } else {
            code = CHAR_FORWARD_SLASH;
        }
        if (isPathSeparator(code)) {
            if (lastSlash === i - 1 || dots === 1) {
            // NOOP
            } else if (dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = '';
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i;
                        dots = 0;
                        continue;
                    } else if (res.length !== 0) {
                        res = '';
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    res += res.length > 0 ? `${separator}..` : '..';
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) {
                    res += `${separator}${path.slice(lastSlash + 1, i)}`;
                } else {
                    res = path.slice(lastSlash + 1, i);
                }
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === CHAR_DOT && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function formatExt(ext) {
    return ext ? `${ext[0] === '.' ? '' : '.'}${ext}` : '';
}
function _format(sep, pathObject) {
    validateObject(pathObject, 'pathObject');
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || `${pathObject.name || ''}${formatExt(pathObject.ext)}`;
    if (!dir) {
        return base;
    }
    return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;
}
const win32 = {
    // path.resolve([from ...], to)
    resolve (...pathSegments) {
        let resolvedDevice = '';
        let resolvedTail = '';
        let resolvedAbsolute = false;
        for(let i = pathSegments.length - 1; i >= -1; i--){
            let path;
            if (i >= 0) {
                path = pathSegments[i];
                validateString(path, `paths[${i}]`);
                // Skip empty entries
                if (path.length === 0) {
                    continue;
                }
            } else if (resolvedDevice.length === 0) {
                path = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cwd"])();
            } else {
                // Windows has the concept of drive-specific current working
                // directories. If we've resolved a drive letter but not yet an
                // absolute path, get cwd for that drive, or the process cwd if
                // the drive cwd is not available. We're sure the device is not
                // a UNC path at this points, because UNC paths are always absolute.
                path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["env"][`=${resolvedDevice}`] || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cwd"])();
                // Verify that a cwd was found and that it actually points
                // to our drive. If not, default to the drive's root.
                if (path === undefined || path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() && path.charCodeAt(2) === CHAR_BACKWARD_SLASH) {
                    path = `${resolvedDevice}\\`;
                }
            }
            const len = path.length;
            let rootEnd = 0;
            let device = '';
            let isAbsolute = false;
            const code = path.charCodeAt(0);
            // Try to match a root
            if (len === 1) {
                if (isPathSeparator(code)) {
                    // `path` contains just a path separator
                    rootEnd = 1;
                    isAbsolute = true;
                }
            } else if (isPathSeparator(code)) {
                // Possible UNC root
                // If we started with a separator, we know we at least have an
                // absolute path of some kind (UNC or otherwise)
                isAbsolute = true;
                if (isPathSeparator(path.charCodeAt(1))) {
                    // Matched double path separator at beginning
                    let j = 2;
                    let last = j;
                    // Match 1 or more non-path separators
                    while(j < len && !isPathSeparator(path.charCodeAt(j))){
                        j++;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path.slice(last, j);
                        // Matched!
                        last = j;
                        // Match 1 or more path separators
                        while(j < len && isPathSeparator(path.charCodeAt(j))){
                            j++;
                        }
                        if (j < len && j !== last) {
                            // Matched!
                            last = j;
                            // Match 1 or more non-path separators
                            while(j < len && !isPathSeparator(path.charCodeAt(j))){
                                j++;
                            }
                            if (j === len || j !== last) {
                                // We matched a UNC root
                                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
                // Possible device root
                device = path.slice(0, 2);
                rootEnd = 2;
                if (len > 2 && isPathSeparator(path.charCodeAt(2))) {
                    // Treat separator following drive name as an absolute path
                    // indicator
                    isAbsolute = true;
                    rootEnd = 3;
                }
            }
            if (device.length > 0) {
                if (resolvedDevice.length > 0) {
                    if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {
                        continue;
                    }
                } else {
                    resolvedDevice = device;
                }
            }
            if (resolvedAbsolute) {
                if (resolvedDevice.length > 0) {
                    break;
                }
            } else {
                resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
                resolvedAbsolute = isAbsolute;
                if (isAbsolute && resolvedDevice.length > 0) {
                    break;
                }
            }
        }
        // At this point the path should be resolved to a full absolute path,
        // but handle relative paths to be safe (might happen when process.cwd()
        // fails)
        // Normalize the tail path
        resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\', isPathSeparator);
        return resolvedAbsolute ? `${resolvedDevice}\\${resolvedTail}` : `${resolvedDevice}${resolvedTail}` || '.';
    },
    normalize (path) {
        validateString(path, 'path');
        const len = path.length;
        if (len === 0) {
            return '.';
        }
        let rootEnd = 0;
        let device;
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        // Try to match a root
        if (len === 1) {
            // `path` contains just a single char, exit early to avoid
            // unnecessary work
            return isPosixPathSeparator(code) ? '\\' : path;
        }
        if (isPathSeparator(code)) {
            // Possible UNC root
            // If we started with a separator, we know we at least have an absolute
            // path of some kind (UNC or otherwise)
            isAbsolute = true;
            if (isPathSeparator(path.charCodeAt(1))) {
                // Matched double path separator at beginning
                let j = 2;
                let last = j;
                // Match 1 or more non-path separators
                while(j < len && !isPathSeparator(path.charCodeAt(j))){
                    j++;
                }
                if (j < len && j !== last) {
                    const firstPart = path.slice(last, j);
                    // Matched!
                    last = j;
                    // Match 1 or more path separators
                    while(j < len && isPathSeparator(path.charCodeAt(j))){
                        j++;
                    }
                    if (j < len && j !== last) {
                        // Matched!
                        last = j;
                        // Match 1 or more non-path separators
                        while(j < len && !isPathSeparator(path.charCodeAt(j))){
                            j++;
                        }
                        if (j === len) {
                            // We matched a UNC root only
                            // Return the normalized version of the UNC root since there
                            // is nothing left to process
                            return `\\\\${firstPart}\\${path.slice(last)}\\`;
                        }
                        if (j !== last) {
                            // We matched a UNC root with leftovers
                            device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
            // Possible device root
            device = path.slice(0, 2);
            rootEnd = 2;
            if (len > 2 && isPathSeparator(path.charCodeAt(2))) {
                // Treat separator following drive name as an absolute path
                // indicator
                isAbsolute = true;
                rootEnd = 3;
            }
        }
        let tail = rootEnd < len ? normalizeString(path.slice(rootEnd), !isAbsolute, '\\', isPathSeparator) : '';
        if (tail.length === 0 && !isAbsolute) {
            tail = '.';
        }
        if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {
            tail += '\\';
        }
        if (device === undefined) {
            return isAbsolute ? `\\${tail}` : tail;
        }
        return isAbsolute ? `${device}\\${tail}` : `${device}${tail}`;
    },
    isAbsolute (path) {
        validateString(path, 'path');
        const len = path.length;
        if (len === 0) {
            return false;
        }
        const code = path.charCodeAt(0);
        return isPathSeparator(code) || len > 2 && isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON && isPathSeparator(path.charCodeAt(2));
    },
    join (...paths) {
        if (paths.length === 0) {
            return '.';
        }
        let joined;
        let firstPart;
        for(let i = 0; i < paths.length; ++i){
            const arg = paths[i];
            validateString(arg, 'path');
            if (arg.length > 0) {
                if (joined === undefined) {
                    joined = firstPart = arg;
                } else {
                    joined += `\\${arg}`;
                }
            }
        }
        if (joined === undefined) {
            return '.';
        }
        // Make sure that the joined path doesn't start with two slashes, because
        // normalize() will mistake it for a UNC path then.
        //
        // This step is skipped when it is very clear that the user actually
        // intended to point at a UNC path. This is assumed when the first
        // non-empty string arguments starts with exactly two slashes followed by
        // at least one more non-slash character.
        //
        // Note that for normalize() to treat a path as a UNC path it needs to
        // have at least 2 components, so we don't filter for that here.
        // This means that the user can use join to construct UNC paths from
        // a server name and a share name; for example:
        //   path.join('//server', 'share') -> '\\\\server\\share\\')
        let needsReplace = true;
        let slashCount = 0;
        if (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {
            ++slashCount;
            const firstLen = firstPart.length;
            if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator(firstPart.charCodeAt(2))) {
                        ++slashCount;
                    } else {
                        // We matched a UNC path in the first part
                        needsReplace = false;
                    }
                }
            }
        }
        if (needsReplace) {
            // Find any more consecutive slashes we need to replace
            while(slashCount < joined.length && isPathSeparator(joined.charCodeAt(slashCount))){
                slashCount++;
            }
            // Replace the slashes if needed
            if (slashCount >= 2) {
                joined = `\\${joined.slice(slashCount)}`;
            }
        }
        return win32.normalize(joined);
    },
    // It will solve the relative path from `from` to `to`, for instance:
    //  from = 'C:\\orandea\\test\\aaa'
    //  to = 'C:\\orandea\\impl\\bbb'
    // The output of the function should be: '..\\..\\impl\\bbb'
    relative (from, to) {
        validateString(from, 'from');
        validateString(to, 'to');
        if (from === to) {
            return '';
        }
        const fromOrig = win32.resolve(from);
        const toOrig = win32.resolve(to);
        if (fromOrig === toOrig) {
            return '';
        }
        from = fromOrig.toLowerCase();
        to = toOrig.toLowerCase();
        if (from === to) {
            return '';
        }
        // Trim any leading backslashes
        let fromStart = 0;
        while(fromStart < from.length && from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH){
            fromStart++;
        }
        // Trim trailing backslashes (applicable to UNC paths only)
        let fromEnd = from.length;
        while(fromEnd - 1 > fromStart && from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH){
            fromEnd--;
        }
        const fromLen = fromEnd - fromStart;
        // Trim any leading backslashes
        let toStart = 0;
        while(toStart < to.length && to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH){
            toStart++;
        }
        // Trim trailing backslashes (applicable to UNC paths only)
        let toEnd = to.length;
        while(toEnd - 1 > toStart && to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH){
            toEnd--;
        }
        const toLen = toEnd - toStart;
        // Compare paths to find the longest common path from root
        const length = fromLen < toLen ? fromLen : toLen;
        let lastCommonSep = -1;
        let i = 0;
        for(; i < length; i++){
            const fromCode = from.charCodeAt(fromStart + i);
            if (fromCode !== to.charCodeAt(toStart + i)) {
                break;
            } else if (fromCode === CHAR_BACKWARD_SLASH) {
                lastCommonSep = i;
            }
        }
        // We found a mismatch before the first common path separator was seen, so
        // return the original `to`.
        if (i !== length) {
            if (lastCommonSep === -1) {
                return toOrig;
            }
        } else {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {
                    // We get here if `from` is the exact base path for `to`.
                    // For example: from='C:\\foo\\bar'; to='C:\\foo\\bar\\baz'
                    return toOrig.slice(toStart + i + 1);
                }
                if (i === 2) {
                    // We get here if `from` is the device root.
                    // For example: from='C:\\'; to='C:\\foo'
                    return toOrig.slice(toStart + i);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {
                    // We get here if `to` is the exact base path for `from`.
                    // For example: from='C:\\foo\\bar'; to='C:\\foo'
                    lastCommonSep = i;
                } else if (i === 2) {
                    // We get here if `to` is the device root.
                    // For example: from='C:\\foo\\bar'; to='C:\\'
                    lastCommonSep = 3;
                }
            }
            if (lastCommonSep === -1) {
                lastCommonSep = 0;
            }
        }
        let out = '';
        // Generate the relative path based on the path difference between `to` and
        // `from`
        for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
            if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {
                out += out.length === 0 ? '..' : '\\..';
            }
        }
        toStart += lastCommonSep;
        // Lastly, append the rest of the destination (`to`) path that comes after
        // the common path parts
        if (out.length > 0) {
            return `${out}${toOrig.slice(toStart, toEnd)}`;
        }
        if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {
            ++toStart;
        }
        return toOrig.slice(toStart, toEnd);
    },
    toNamespacedPath (path) {
        // Note: this will *probably* throw somewhere.
        if (typeof path !== 'string' || path.length === 0) {
            return path;
        }
        const resolvedPath = win32.resolve(path);
        if (resolvedPath.length <= 2) {
            return path;
        }
        if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {
            // Possible UNC root
            if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {
                    // Matched non-long UNC root, convert the path to a long UNC path
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) && resolvedPath.charCodeAt(1) === CHAR_COLON && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {
            // Matched device root, convert the path to a long UNC path
            return `\\\\?\\${resolvedPath}`;
        }
        return path;
    },
    dirname (path) {
        validateString(path, 'path');
        const len = path.length;
        if (len === 0) {
            return '.';
        }
        let rootEnd = -1;
        let offset = 0;
        const code = path.charCodeAt(0);
        if (len === 1) {
            // `path` contains just a path separator, exit early to avoid
            // unnecessary work or a dot.
            return isPathSeparator(code) ? path : '.';
        }
        // Try to match a root
        if (isPathSeparator(code)) {
            // Possible UNC root
            rootEnd = offset = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                // Matched double path separator at beginning
                let j = 2;
                let last = j;
                // Match 1 or more non-path separators
                while(j < len && !isPathSeparator(path.charCodeAt(j))){
                    j++;
                }
                if (j < len && j !== last) {
                    // Matched!
                    last = j;
                    // Match 1 or more path separators
                    while(j < len && isPathSeparator(path.charCodeAt(j))){
                        j++;
                    }
                    if (j < len && j !== last) {
                        // Matched!
                        last = j;
                        // Match 1 or more non-path separators
                        while(j < len && !isPathSeparator(path.charCodeAt(j))){
                            j++;
                        }
                        if (j === len) {
                            // We matched a UNC root only
                            return path;
                        }
                        if (j !== last) {
                            // We matched a UNC root with leftovers
                            // Offset by 1 to include the separator after the UNC root to
                            // treat it as a "normal root" on top of a (UNC) root
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
        // Possible device root
        } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
            rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;
            offset = rootEnd;
        }
        let end = -1;
        let matchedSlash = true;
        for(let i = len - 1; i >= offset; --i){
            if (isPathSeparator(path.charCodeAt(i))) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            } else {
                // We saw the first non-path separator
                matchedSlash = false;
            }
        }
        if (end === -1) {
            if (rootEnd === -1) {
                return '.';
            }
            end = rootEnd;
        }
        return path.slice(0, end);
    },
    basename (path, suffix) {
        if (suffix !== undefined) {
            validateString(suffix, 'suffix');
        }
        validateString(path, 'path');
        let start = 0;
        let end = -1;
        let matchedSlash = true;
        let i;
        // Check for a drive letter prefix so as not to mistake the following
        // path separator as an extra separator at the end of the path that can be
        // disregarded
        if (path.length >= 2 && isWindowsDeviceRoot(path.charCodeAt(0)) && path.charCodeAt(1) === CHAR_COLON) {
            start = 2;
        }
        if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {
            if (suffix === path) {
                return '';
            }
            let extIdx = suffix.length - 1;
            let firstNonSlashEnd = -1;
            for(i = path.length - 1; i >= start; --i){
                const code = path.charCodeAt(i);
                if (isPathSeparator(code)) {
                    // If we reached a path separator that was not part of a set of path
                    // separators at the end of the string, stop now
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === suffix.charCodeAt(extIdx)) {
                            if (--extIdx === -1) {
                                // We matched the extension, so mark this as the end of our path
                                // component
                                end = i;
                            }
                        } else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end) {
                end = firstNonSlashEnd;
            } else if (end === -1) {
                end = path.length;
            }
            return path.slice(start, end);
        }
        for(i = path.length - 1; i >= start; --i){
            if (isPathSeparator(path.charCodeAt(i))) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // path component
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) {
            return '';
        }
        return path.slice(start, end);
    },
    extname (path) {
        validateString(path, 'path');
        let start = 0;
        let startDot = -1;
        let startPart = 0;
        let end = -1;
        let matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        let preDotState = 0;
        // Check for a drive letter prefix so as not to mistake the following
        // path separator as an extra separator at the end of the path that can be
        // disregarded
        if (path.length >= 2 && path.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path.charCodeAt(0))) {
            start = startPart = 2;
        }
        for(let i = path.length - 1; i >= start; --i){
            const code = path.charCodeAt(i);
            if (isPathSeparator(code)) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === CHAR_DOT) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) {
                    startDot = i;
                } else if (preDotState !== 1) {
                    preDotState = 1;
                }
            } else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
            }
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            return '';
        }
        return path.slice(startDot, end);
    },
    format: _format.bind(null, '\\'),
    parse (path) {
        validateString(path, 'path');
        const ret = {
            root: '',
            dir: '',
            base: '',
            ext: '',
            name: ''
        };
        if (path.length === 0) {
            return ret;
        }
        const len = path.length;
        let rootEnd = 0;
        let code = path.charCodeAt(0);
        if (len === 1) {
            if (isPathSeparator(code)) {
                // `path` contains just a path separator, exit early to avoid
                // unnecessary work
                ret.root = ret.dir = path;
                return ret;
            }
            ret.base = ret.name = path;
            return ret;
        }
        // Try to match a root
        if (isPathSeparator(code)) {
            // Possible UNC root
            rootEnd = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                // Matched double path separator at beginning
                let j = 2;
                let last = j;
                // Match 1 or more non-path separators
                while(j < len && !isPathSeparator(path.charCodeAt(j))){
                    j++;
                }
                if (j < len && j !== last) {
                    // Matched!
                    last = j;
                    // Match 1 or more path separators
                    while(j < len && isPathSeparator(path.charCodeAt(j))){
                        j++;
                    }
                    if (j < len && j !== last) {
                        // Matched!
                        last = j;
                        // Match 1 or more non-path separators
                        while(j < len && !isPathSeparator(path.charCodeAt(j))){
                            j++;
                        }
                        if (j === len) {
                            // We matched a UNC root only
                            rootEnd = j;
                        } else if (j !== last) {
                            // We matched a UNC root with leftovers
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
            // Possible device root
            if (len <= 2) {
                // `path` contains just a drive root, exit early to avoid
                // unnecessary work
                ret.root = ret.dir = path;
                return ret;
            }
            rootEnd = 2;
            if (isPathSeparator(path.charCodeAt(2))) {
                if (len === 3) {
                    // `path` contains just a drive root, exit early to avoid
                    // unnecessary work
                    ret.root = ret.dir = path;
                    return ret;
                }
                rootEnd = 3;
            }
        }
        if (rootEnd > 0) {
            ret.root = path.slice(0, rootEnd);
        }
        let startDot = -1;
        let startPart = rootEnd;
        let end = -1;
        let matchedSlash = true;
        let i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        let preDotState = 0;
        // Get non-dir info
        for(; i >= rootEnd; --i){
            code = path.charCodeAt(i);
            if (isPathSeparator(code)) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === CHAR_DOT) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) {
                    startDot = i;
                } else if (preDotState !== 1) {
                    preDotState = 1;
                }
            } else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
            }
        }
        if (end !== -1) {
            if (startDot === -1 || // We saw a non-dot character immediately before the dot
            preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                ret.base = ret.name = path.slice(startPart, end);
            } else {
                ret.name = path.slice(startPart, startDot);
                ret.base = path.slice(startPart, end);
                ret.ext = path.slice(startDot, end);
            }
        }
        // If the directory is the root, use the entire root as the `dir` including
        // the trailing slash if any (`C:\abc` -> `C:\`). Otherwise, strip out the
        // trailing slash (`C:\abc\def` -> `C:\abc`).
        if (startPart > 0 && startPart !== rootEnd) {
            ret.dir = path.slice(0, startPart - 1);
        } else {
            ret.dir = ret.root;
        }
        return ret;
    },
    sep: '\\',
    delimiter: ';',
    win32: null,
    posix: null
};
const posixCwd = (()=>{
    if (platformIsWin32) {
        // Converts Windows' backslash path separators to POSIX forward slashes
        // and truncates any drive indicator
        const regexp = /\\/g;
        return ()=>{
            const cwd = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cwd"])().replace(regexp, '/');
            return cwd.slice(cwd.indexOf('/'));
        };
    }
    // We're already on POSIX, no need for any transformations
    return ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cwd"])();
})();
const posix = {
    // path.resolve([from ...], to)
    resolve (...pathSegments) {
        let resolvedPath = '';
        let resolvedAbsolute = false;
        for(let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--){
            const path = i >= 0 ? pathSegments[i] : posixCwd();
            validateString(path, `paths[${i}]`);
            // Skip empty entries
            if (path.length === 0) {
                continue;
            }
            resolvedPath = `${path}/${resolvedPath}`;
            resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        // Normalize the path
        resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator);
        if (resolvedAbsolute) {
            return `/${resolvedPath}`;
        }
        return resolvedPath.length > 0 ? resolvedPath : '.';
    },
    normalize (path) {
        validateString(path, 'path');
        if (path.length === 0) {
            return '.';
        }
        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
        const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;
        // Normalize the path
        path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);
        if (path.length === 0) {
            if (isAbsolute) {
                return '/';
            }
            return trailingSeparator ? './' : '.';
        }
        if (trailingSeparator) {
            path += '/';
        }
        return isAbsolute ? `/${path}` : path;
    },
    isAbsolute (path) {
        validateString(path, 'path');
        return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;
    },
    join (...paths) {
        if (paths.length === 0) {
            return '.';
        }
        let joined;
        for(let i = 0; i < paths.length; ++i){
            const arg = paths[i];
            validateString(arg, 'path');
            if (arg.length > 0) {
                if (joined === undefined) {
                    joined = arg;
                } else {
                    joined += `/${arg}`;
                }
            }
        }
        if (joined === undefined) {
            return '.';
        }
        return posix.normalize(joined);
    },
    relative (from, to) {
        validateString(from, 'from');
        validateString(to, 'to');
        if (from === to) {
            return '';
        }
        // Trim leading forward slashes.
        from = posix.resolve(from);
        to = posix.resolve(to);
        if (from === to) {
            return '';
        }
        const fromStart = 1;
        const fromEnd = from.length;
        const fromLen = fromEnd - fromStart;
        const toStart = 1;
        const toLen = to.length - toStart;
        // Compare paths to find the longest common path from root
        const length = fromLen < toLen ? fromLen : toLen;
        let lastCommonSep = -1;
        let i = 0;
        for(; i < length; i++){
            const fromCode = from.charCodeAt(fromStart + i);
            if (fromCode !== to.charCodeAt(toStart + i)) {
                break;
            } else if (fromCode === CHAR_FORWARD_SLASH) {
                lastCommonSep = i;
            }
        }
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {
                    // We get here if `from` is the exact base path for `to`.
                    // For example: from='/foo/bar'; to='/foo/bar/baz'
                    return to.slice(toStart + i + 1);
                }
                if (i === 0) {
                    // We get here if `from` is the root
                    // For example: from='/'; to='/foo'
                    return to.slice(toStart + i);
                }
            } else if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {
                    // We get here if `to` is the exact base path for `from`.
                    // For example: from='/foo/bar/baz'; to='/foo/bar'
                    lastCommonSep = i;
                } else if (i === 0) {
                    // We get here if `to` is the root.
                    // For example: from='/foo/bar'; to='/'
                    lastCommonSep = 0;
                }
            }
        }
        let out = '';
        // Generate the relative path based on the path difference between `to`
        // and `from`.
        for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
            if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {
                out += out.length === 0 ? '..' : '/..';
            }
        }
        // Lastly, append the rest of the destination (`to`) path that comes after
        // the common path parts.
        return `${out}${to.slice(toStart + lastCommonSep)}`;
    },
    toNamespacedPath (path) {
        // Non-op on posix systems
        return path;
    },
    dirname (path) {
        validateString(path, 'path');
        if (path.length === 0) {
            return '.';
        }
        const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
        let end = -1;
        let matchedSlash = true;
        for(let i = path.length - 1; i >= 1; --i){
            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            } else {
                // We saw the first non-path separator
                matchedSlash = false;
            }
        }
        if (end === -1) {
            return hasRoot ? '/' : '.';
        }
        if (hasRoot && end === 1) {
            return '//';
        }
        return path.slice(0, end);
    },
    basename (path, suffix) {
        if (suffix !== undefined) {
            validateString(suffix, 'ext');
        }
        validateString(path, 'path');
        let start = 0;
        let end = -1;
        let matchedSlash = true;
        let i;
        if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {
            if (suffix === path) {
                return '';
            }
            let extIdx = suffix.length - 1;
            let firstNonSlashEnd = -1;
            for(i = path.length - 1; i >= 0; --i){
                const code = path.charCodeAt(i);
                if (code === CHAR_FORWARD_SLASH) {
                    // If we reached a path separator that was not part of a set of path
                    // separators at the end of the string, stop now
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === suffix.charCodeAt(extIdx)) {
                            if (--extIdx === -1) {
                                // We matched the extension, so mark this as the end of our path
                                // component
                                end = i;
                            }
                        } else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end) {
                end = firstNonSlashEnd;
            } else if (end === -1) {
                end = path.length;
            }
            return path.slice(start, end);
        }
        for(i = path.length - 1; i >= 0; --i){
            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // path component
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) {
            return '';
        }
        return path.slice(start, end);
    },
    extname (path) {
        validateString(path, 'path');
        let startDot = -1;
        let startPart = 0;
        let end = -1;
        let matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        let preDotState = 0;
        for(let i = path.length - 1; i >= 0; --i){
            const code = path.charCodeAt(i);
            if (code === CHAR_FORWARD_SLASH) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === CHAR_DOT) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) {
                    startDot = i;
                } else if (preDotState !== 1) {
                    preDotState = 1;
                }
            } else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
            }
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            return '';
        }
        return path.slice(startDot, end);
    },
    format: _format.bind(null, '/'),
    parse (path) {
        validateString(path, 'path');
        const ret = {
            root: '',
            dir: '',
            base: '',
            ext: '',
            name: ''
        };
        if (path.length === 0) {
            return ret;
        }
        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
        let start;
        if (isAbsolute) {
            ret.root = '/';
            start = 1;
        } else {
            start = 0;
        }
        let startDot = -1;
        let startPart = 0;
        let end = -1;
        let matchedSlash = true;
        let i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        let preDotState = 0;
        // Get non-dir info
        for(; i >= start; --i){
            const code = path.charCodeAt(i);
            if (code === CHAR_FORWARD_SLASH) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === CHAR_DOT) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) {
                    startDot = i;
                } else if (preDotState !== 1) {
                    preDotState = 1;
                }
            } else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
            }
        }
        if (end !== -1) {
            const start = startPart === 0 && isAbsolute ? 1 : startPart;
            if (startDot === -1 || // We saw a non-dot character immediately before the dot
            preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                ret.base = ret.name = path.slice(start, end);
            } else {
                ret.name = path.slice(start, startDot);
                ret.base = path.slice(start, end);
                ret.ext = path.slice(startDot, end);
            }
        }
        if (startPart > 0) {
            ret.dir = path.slice(0, startPart - 1);
        } else if (isAbsolute) {
            ret.dir = '/';
        }
        return ret;
    },
    sep: '/',
    delimiter: ':',
    win32: null,
    posix: null
};
posix.win32 = win32.win32 = win32;
posix.posix = win32.posix = posix;
const normalize = platformIsWin32 ? win32.normalize : posix.normalize;
const join = platformIsWin32 ? win32.join : posix.join;
const resolve = platformIsWin32 ? win32.resolve : posix.resolve;
const relative = platformIsWin32 ? win32.relative : posix.relative;
const dirname = platformIsWin32 ? win32.dirname : posix.dirname;
const basename = platformIsWin32 ? win32.basename : posix.basename;
const extname = platformIsWin32 ? win32.extname : posix.extname;
const sep = platformIsWin32 ? win32.sep : posix.sep;
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/uri.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "URI": (()=>URI),
    "uriToFsPath": (()=>uriToFsPath)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/path.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)");
;
;
const _schemePattern = /^\w[\w\d+.-]*$/;
const _singleSlashStart = /^\//;
const _doubleSlashStart = /^\/\//;
function _validateUri(ret, _strict) {
    // scheme, must be set
    if (!ret.scheme && _strict) {
        throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${ret.authority}", path: "${ret.path}", query: "${ret.query}", fragment: "${ret.fragment}"}`);
    }
    // scheme, https://tools.ietf.org/html/rfc3986#section-3.1
    // ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
    if (ret.scheme && !_schemePattern.test(ret.scheme)) {
        throw new Error('[UriError]: Scheme contains illegal characters.');
    }
    // path, http://tools.ietf.org/html/rfc3986#section-3.3
    // If a URI contains an authority component, then the path component
    // must either be empty or begin with a slash ("/") character.  If a URI
    // does not contain an authority component, then the path cannot begin
    // with two slash characters ("//").
    if (ret.path) {
        if (ret.authority) {
            if (!_singleSlashStart.test(ret.path)) {
                throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
            }
        } else {
            if (_doubleSlashStart.test(ret.path)) {
                throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
            }
        }
    }
}
// for a while we allowed uris *without* schemes and this is the migration
// for them, e.g. an uri without scheme and without strict-mode warns and falls
// back to the file-scheme. that should cause the least carnage and still be a
// clear warning
function _schemeFix(scheme, _strict) {
    if (!scheme && !_strict) {
        return 'file';
    }
    return scheme;
}
// implements a bit of https://tools.ietf.org/html/rfc3986#section-5
function _referenceResolution(scheme, path) {
    // the slash-character is our 'default base' as we don't
    // support constructing URIs relative to other URIs. This
    // also means that we alter and potentially break paths.
    // see https://tools.ietf.org/html/rfc3986#section-5.1.4
    switch(scheme){
        case 'https':
        case 'http':
        case 'file':
            if (!path) {
                path = _slash;
            } else if (path[0] !== _slash) {
                path = _slash + path;
            }
            break;
    }
    return path;
}
const _empty = '';
const _slash = '/';
const _regexp = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
class URI {
    static isUri(thing) {
        if (thing instanceof URI) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return typeof thing.authority === 'string' && typeof thing.fragment === 'string' && typeof thing.path === 'string' && typeof thing.query === 'string' && typeof thing.scheme === 'string' && typeof thing.fsPath === 'string' && typeof thing.with === 'function' && typeof thing.toString === 'function';
    }
    /**
     * @internal
     */ constructor(schemeOrData, authority, path, query, fragment, _strict = false){
        if (typeof schemeOrData === 'object') {
            this.scheme = schemeOrData.scheme || _empty;
            this.authority = schemeOrData.authority || _empty;
            this.path = schemeOrData.path || _empty;
            this.query = schemeOrData.query || _empty;
            this.fragment = schemeOrData.fragment || _empty;
        // no validation because it's this URI
        // that creates uri components.
        // _validateUri(this);
        } else {
            this.scheme = _schemeFix(schemeOrData, _strict);
            this.authority = authority || _empty;
            this.path = _referenceResolution(this.scheme, path || _empty);
            this.query = query || _empty;
            this.fragment = fragment || _empty;
            _validateUri(this, _strict);
        }
    }
    // ---- filesystem path -----------------------
    /**
     * Returns a string representing the corresponding file system path of this URI.
     * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the
     * platform specific path separator.
     *
     * * Will *not* validate the path for invalid characters and semantics.
     * * Will *not* look at the scheme of this URI.
     * * The result shall *not* be used for display purposes but for accessing a file on disk.
     *
     *
     * The *difference* to `URI#path` is the use of the platform specific separator and the handling
     * of UNC paths. See the below sample of a file-uri with an authority (UNC path).
     *
     * ```ts
        const u = URI.parse('file://server/c$/folder/file.txt')
        u.authority === 'server'
        u.path === '/shares/c$/file.txt'
        u.fsPath === '\\server\c$\folder\file.txt'
    ```
     *
     * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,
     * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working
     * with URIs that represent files on disk (`file` scheme).
     */ get fsPath() {
        // if (this.scheme !== 'file') {
        // 	console.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);
        // }
        return uriToFsPath(this, false);
    }
    // ---- modify to new -------------------------
    with(change) {
        if (!change) {
            return this;
        }
        let { scheme, authority, path, query, fragment } = change;
        if (scheme === undefined) {
            scheme = this.scheme;
        } else if (scheme === null) {
            scheme = _empty;
        }
        if (authority === undefined) {
            authority = this.authority;
        } else if (authority === null) {
            authority = _empty;
        }
        if (path === undefined) {
            path = this.path;
        } else if (path === null) {
            path = _empty;
        }
        if (query === undefined) {
            query = this.query;
        } else if (query === null) {
            query = _empty;
        }
        if (fragment === undefined) {
            fragment = this.fragment;
        } else if (fragment === null) {
            fragment = _empty;
        }
        if (scheme === this.scheme && authority === this.authority && path === this.path && query === this.query && fragment === this.fragment) {
            return this;
        }
        return new Uri(scheme, authority, path, query, fragment);
    }
    // ---- parse & validate ------------------------
    /**
     * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,
     * `file:///usr/home`, or `scheme:with/path`.
     *
     * @param value A string which represents an URI (see `URI#toString`).
     */ static parse(value, _strict = false) {
        const match = _regexp.exec(value);
        if (!match) {
            return new Uri(_empty, _empty, _empty, _empty, _empty);
        }
        return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);
    }
    /**
     * Creates a new URI from a file system path, e.g. `c:\my\files`,
     * `/usr/home`, or `\\server\share\some\path`.
     *
     * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument
     * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**
     * `URI.parse('file://' + path)` because the path might contain characters that are
     * interpreted (# and ?). See the following sample:
     * ```ts
    const good = URI.file('/coding/c#/project1');
    good.scheme === 'file';
    good.path === '/coding/c#/project1';
    good.fragment === '';
    const bad = URI.parse('file://' + '/coding/c#/project1');
    bad.scheme === 'file';
    bad.path === '/coding/c'; // path is now broken
    bad.fragment === '/project1';
    ```
     *
     * @param path A file system path (see `URI#fsPath`)
     */ static file(path) {
        let authority = _empty;
        // normalize to fwd-slashes on windows,
        // on other systems bwd-slashes are valid
        // filename character, eg /f\oo/ba\r.txt
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWindows"]) {
            path = path.replace(/\\/g, _slash);
        }
        // check for authority as used in UNC shares
        // or use the path as given
        if (path[0] === _slash && path[1] === _slash) {
            const idx = path.indexOf(_slash, 2);
            if (idx === -1) {
                authority = path.substring(2);
                path = _slash;
            } else {
                authority = path.substring(2, idx);
                path = path.substring(idx) || _slash;
            }
        }
        return new Uri('file', authority, path, _empty, _empty);
    }
    /**
     * Creates new URI from uri components.
     *
     * Unless `strict` is `true` the scheme is defaults to be `file`. This function performs
     * validation and should be used for untrusted uri components retrieved from storage,
     * user input, command arguments etc
     */ static from(components, strict) {
        const result = new Uri(components.scheme, components.authority, components.path, components.query, components.fragment, strict);
        return result;
    }
    /**
     * Join a URI path with path fragments and normalizes the resulting path.
     *
     * @param uri The input URI.
     * @param pathFragment The path fragment to add to the URI path.
     * @returns The resulting URI.
     */ static joinPath(uri, ...pathFragment) {
        if (!uri.path) {
            throw new Error(`[UriError]: cannot call joinPath on URI without path`);
        }
        let newPath;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWindows"] && uri.scheme === 'file') {
            newPath = URI.file(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["win32"].join(uriToFsPath(uri, true), ...pathFragment)).path;
        } else {
            newPath = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].join(uri.path, ...pathFragment);
        }
        return uri.with({
            path: newPath
        });
    }
    // ---- printing/externalize ---------------------------
    /**
     * Creates a string representation for this URI. It's guaranteed that calling
     * `URI.parse` with the result of this function creates an URI which is equal
     * to this URI.
     *
     * * The result shall *not* be used for display purposes but for externalization or transport.
     * * The result will be encoded using the percentage encoding and encoding happens mostly
     * ignore the scheme-specific encoding rules.
     *
     * @param skipEncoding Do not encode the result, default is `false`
     */ toString(skipEncoding = false) {
        return _asFormatted(this, skipEncoding);
    }
    toJSON() {
        return this;
    }
    static revive(data) {
        if (!data) {
            return data;
        } else if (data instanceof URI) {
            return data;
        } else {
            const result = new Uri(data);
            result._formatted = data.external ?? null;
            result._fsPath = data._sep === _pathSepMarker ? data.fsPath ?? null : null;
            return result;
        }
    }
}
const _pathSepMarker = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWindows"] ? 1 : undefined;
// This class exists so that URI is compatible with vscode.Uri (API).
class Uri extends URI {
    constructor(){
        super(...arguments);
        this._formatted = null;
        this._fsPath = null;
    }
    get fsPath() {
        if (!this._fsPath) {
            this._fsPath = uriToFsPath(this, false);
        }
        return this._fsPath;
    }
    toString(skipEncoding = false) {
        if (!skipEncoding) {
            if (!this._formatted) {
                this._formatted = _asFormatted(this, false);
            }
            return this._formatted;
        } else {
            // we don't cache that
            return _asFormatted(this, true);
        }
    }
    toJSON() {
        const res = {
            $mid: 1 /* MarshalledId.Uri */ 
        };
        // cached state
        if (this._fsPath) {
            res.fsPath = this._fsPath;
            res._sep = _pathSepMarker;
        }
        if (this._formatted) {
            res.external = this._formatted;
        }
        //--- uri components
        if (this.path) {
            res.path = this.path;
        }
        // TODO
        // this isn't correct and can violate the UriComponents contract but
        // this is part of the vscode.Uri API and we shouldn't change how that
        // works anymore
        if (this.scheme) {
            res.scheme = this.scheme;
        }
        if (this.authority) {
            res.authority = this.authority;
        }
        if (this.query) {
            res.query = this.query;
        }
        if (this.fragment) {
            res.fragment = this.fragment;
        }
        return res;
    }
}
// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2
const encodeTable = {
    [58 /* CharCode.Colon */ ]: '%3A',
    [47 /* CharCode.Slash */ ]: '%2F',
    [63 /* CharCode.QuestionMark */ ]: '%3F',
    [35 /* CharCode.Hash */ ]: '%23',
    [91 /* CharCode.OpenSquareBracket */ ]: '%5B',
    [93 /* CharCode.CloseSquareBracket */ ]: '%5D',
    [64 /* CharCode.AtSign */ ]: '%40',
    [33 /* CharCode.ExclamationMark */ ]: '%21',
    [36 /* CharCode.DollarSign */ ]: '%24',
    [38 /* CharCode.Ampersand */ ]: '%26',
    [39 /* CharCode.SingleQuote */ ]: '%27',
    [40 /* CharCode.OpenParen */ ]: '%28',
    [41 /* CharCode.CloseParen */ ]: '%29',
    [42 /* CharCode.Asterisk */ ]: '%2A',
    [43 /* CharCode.Plus */ ]: '%2B',
    [44 /* CharCode.Comma */ ]: '%2C',
    [59 /* CharCode.Semicolon */ ]: '%3B',
    [61 /* CharCode.Equals */ ]: '%3D',
    [32 /* CharCode.Space */ ]: '%20'
};
function encodeURIComponentFast(uriComponent, isPath, isAuthority) {
    let res = undefined;
    let nativeEncodePos = -1;
    for(let pos = 0; pos < uriComponent.length; pos++){
        const code = uriComponent.charCodeAt(pos);
        // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3
        if (code >= 97 /* CharCode.a */  && code <= 122 /* CharCode.z */  || code >= 65 /* CharCode.A */  && code <= 90 /* CharCode.Z */  || code >= 48 /* CharCode.Digit0 */  && code <= 57 /* CharCode.Digit9 */  || code === 45 /* CharCode.Dash */  || code === 46 /* CharCode.Period */  || code === 95 /* CharCode.Underline */  || code === 126 /* CharCode.Tilde */  || isPath && code === 47 /* CharCode.Slash */  || isAuthority && code === 91 /* CharCode.OpenSquareBracket */  || isAuthority && code === 93 /* CharCode.CloseSquareBracket */  || isAuthority && code === 58 /* CharCode.Colon */ ) {
            // check if we are delaying native encode
            if (nativeEncodePos !== -1) {
                res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));
                nativeEncodePos = -1;
            }
            // check if we write into a new string (by default we try to return the param)
            if (res !== undefined) {
                res += uriComponent.charAt(pos);
            }
        } else {
            // encoding needed, we need to allocate a new string
            if (res === undefined) {
                res = uriComponent.substr(0, pos);
            }
            // check with default table first
            const escaped = encodeTable[code];
            if (escaped !== undefined) {
                // check if we are delaying native encode
                if (nativeEncodePos !== -1) {
                    res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));
                    nativeEncodePos = -1;
                }
                // append escaped variant to result
                res += escaped;
            } else if (nativeEncodePos === -1) {
                // use native encode only when needed
                nativeEncodePos = pos;
            }
        }
    }
    if (nativeEncodePos !== -1) {
        res += encodeURIComponent(uriComponent.substring(nativeEncodePos));
    }
    return res !== undefined ? res : uriComponent;
}
function encodeURIComponentMinimal(path) {
    let res = undefined;
    for(let pos = 0; pos < path.length; pos++){
        const code = path.charCodeAt(pos);
        if (code === 35 /* CharCode.Hash */  || code === 63 /* CharCode.QuestionMark */ ) {
            if (res === undefined) {
                res = path.substr(0, pos);
            }
            res += encodeTable[code];
        } else {
            if (res !== undefined) {
                res += path[pos];
            }
        }
    }
    return res !== undefined ? res : path;
}
function uriToFsPath(uri, keepDriveLetterCasing) {
    let value;
    if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {
        // unc path: file://shares/c$/far/boo
        value = `//${uri.authority}${uri.path}`;
    } else if (uri.path.charCodeAt(0) === 47 /* CharCode.Slash */  && (uri.path.charCodeAt(1) >= 65 /* CharCode.A */  && uri.path.charCodeAt(1) <= 90 /* CharCode.Z */  || uri.path.charCodeAt(1) >= 97 /* CharCode.a */  && uri.path.charCodeAt(1) <= 122 /* CharCode.z */ ) && uri.path.charCodeAt(2) === 58 /* CharCode.Colon */ ) {
        if (!keepDriveLetterCasing) {
            // windows drive letter: file:///c:/far/boo
            value = uri.path[1].toLowerCase() + uri.path.substr(2);
        } else {
            value = uri.path.substr(1);
        }
    } else {
        // other path
        value = uri.path;
    }
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWindows"]) {
        value = value.replace(/\//g, '\\');
    }
    return value;
}
/**
 * Create the external version of a uri
 */ function _asFormatted(uri, skipEncoding) {
    const encoder = !skipEncoding ? encodeURIComponentFast : encodeURIComponentMinimal;
    let res = '';
    let { scheme, authority, path, query, fragment } = uri;
    if (scheme) {
        res += scheme;
        res += ':';
    }
    if (authority || scheme === 'file') {
        res += _slash;
        res += _slash;
    }
    if (authority) {
        let idx = authority.indexOf('@');
        if (idx !== -1) {
            // <user>@<auth>
            const userinfo = authority.substr(0, idx);
            authority = authority.substr(idx + 1);
            idx = userinfo.lastIndexOf(':');
            if (idx === -1) {
                res += encoder(userinfo, false, false);
            } else {
                // <user>:<pass>@<auth>
                res += encoder(userinfo.substr(0, idx), false, false);
                res += ':';
                res += encoder(userinfo.substr(idx + 1), false, true);
            }
            res += '@';
        }
        authority = authority.toLowerCase();
        idx = authority.lastIndexOf(':');
        if (idx === -1) {
            res += encoder(authority, false, true);
        } else {
            // <auth>:<port>
            res += encoder(authority.substr(0, idx), false, true);
            res += authority.substr(idx);
        }
    }
    if (path) {
        // lower-case windows drive letters in /C:/fff or C:/fff
        if (path.length >= 3 && path.charCodeAt(0) === 47 /* CharCode.Slash */  && path.charCodeAt(2) === 58 /* CharCode.Colon */ ) {
            const code = path.charCodeAt(1);
            if (code >= 65 /* CharCode.A */  && code <= 90 /* CharCode.Z */ ) {
                path = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // "/c:".length === 3
            }
        } else if (path.length >= 2 && path.charCodeAt(1) === 58 /* CharCode.Colon */ ) {
            const code = path.charCodeAt(0);
            if (code >= 65 /* CharCode.A */  && code <= 90 /* CharCode.Z */ ) {
                path = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // "/c:".length === 3
            }
        }
        // encode the rest of the path
        res += encoder(path, true, false);
    }
    if (query) {
        res += '?';
        res += encoder(query, false, false);
    }
    if (fragment) {
        res += '#';
        res += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;
    }
    return res;
}
// --- decode
function decodeURIComponentGraceful(str) {
    try {
        return decodeURIComponent(str);
    } catch  {
        if (str.length > 3) {
            return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));
        } else {
            return str;
        }
    }
}
const _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
function percentDecode(str) {
    if (!str.match(_rEncodedAsHex)) {
        return str;
    }
    return str.replace(_rEncodedAsHex, (match)=>decodeURIComponentGraceful(match));
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getCodiconFontCharacters": (()=>getCodiconFontCharacters),
    "register": (()=>register)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/types.js [app-client] (ecmascript)");
;
const _codiconFontCharacters = Object.create(null);
function register(id, fontCharacter) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(fontCharacter)) {
        const val = _codiconFontCharacters[fontCharacter];
        if (val === undefined) {
            throw new Error(`${id} references an unknown codicon: ${fontCharacter}`);
        }
        fontCharacter = val;
    }
    _codiconFontCharacters[id] = fontCharacter;
    return {
        id
    };
}
function getCodiconFontCharacters() {
    return _codiconFontCharacters;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "codiconsLibrary": (()=>codiconsLibrary)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js [app-client] (ecmascript)");
;
const codiconsLibrary = {
    add: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('add', 0xea60),
    plus: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('plus', 0xea60),
    gistNew: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('gist-new', 0xea60),
    repoCreate: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repo-create', 0xea60),
    lightbulb: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('lightbulb', 0xea61),
    lightBulb: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('light-bulb', 0xea61),
    repo: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repo', 0xea62),
    repoDelete: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repo-delete', 0xea62),
    gistFork: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('gist-fork', 0xea63),
    repoForked: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repo-forked', 0xea63),
    gitPullRequest: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request', 0xea64),
    gitPullRequestAbandoned: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request-abandoned', 0xea64),
    recordKeys: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('record-keys', 0xea65),
    keyboard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('keyboard', 0xea65),
    tag: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('tag', 0xea66),
    gitPullRequestLabel: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request-label', 0xea66),
    tagAdd: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('tag-add', 0xea66),
    tagRemove: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('tag-remove', 0xea66),
    person: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('person', 0xea67),
    personFollow: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('person-follow', 0xea67),
    personOutline: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('person-outline', 0xea67),
    personFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('person-filled', 0xea67),
    gitBranch: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-branch', 0xea68),
    gitBranchCreate: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-branch-create', 0xea68),
    gitBranchDelete: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-branch-delete', 0xea68),
    sourceControl: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('source-control', 0xea68),
    mirror: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mirror', 0xea69),
    mirrorPublic: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mirror-public', 0xea69),
    star: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('star', 0xea6a),
    starAdd: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('star-add', 0xea6a),
    starDelete: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('star-delete', 0xea6a),
    starEmpty: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('star-empty', 0xea6a),
    comment: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('comment', 0xea6b),
    commentAdd: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('comment-add', 0xea6b),
    alert: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('alert', 0xea6c),
    warning: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('warning', 0xea6c),
    search: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('search', 0xea6d),
    searchSave: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('search-save', 0xea6d),
    logOut: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('log-out', 0xea6e),
    signOut: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('sign-out', 0xea6e),
    logIn: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('log-in', 0xea6f),
    signIn: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('sign-in', 0xea6f),
    eye: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('eye', 0xea70),
    eyeUnwatch: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('eye-unwatch', 0xea70),
    eyeWatch: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('eye-watch', 0xea70),
    circleFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('circle-filled', 0xea71),
    primitiveDot: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('primitive-dot', 0xea71),
    closeDirty: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('close-dirty', 0xea71),
    debugBreakpoint: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint', 0xea71),
    debugBreakpointDisabled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-disabled', 0xea71),
    debugHint: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-hint', 0xea71),
    terminalDecorationSuccess: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-decoration-success', 0xea71),
    primitiveSquare: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('primitive-square', 0xea72),
    edit: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('edit', 0xea73),
    pencil: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('pencil', 0xea73),
    info: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('info', 0xea74),
    issueOpened: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('issue-opened', 0xea74),
    gistPrivate: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('gist-private', 0xea75),
    gitForkPrivate: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-fork-private', 0xea75),
    lock: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('lock', 0xea75),
    mirrorPrivate: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mirror-private', 0xea75),
    close: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('close', 0xea76),
    removeClose: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('remove-close', 0xea76),
    x: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('x', 0xea76),
    repoSync: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repo-sync', 0xea77),
    sync: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('sync', 0xea77),
    clone: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('clone', 0xea78),
    desktopDownload: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('desktop-download', 0xea78),
    beaker: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('beaker', 0xea79),
    microscope: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('microscope', 0xea79),
    vm: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('vm', 0xea7a),
    deviceDesktop: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('device-desktop', 0xea7a),
    file: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file', 0xea7b),
    fileText: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-text', 0xea7b),
    more: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('more', 0xea7c),
    ellipsis: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('ellipsis', 0xea7c),
    kebabHorizontal: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('kebab-horizontal', 0xea7c),
    mailReply: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mail-reply', 0xea7d),
    reply: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('reply', 0xea7d),
    organization: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('organization', 0xea7e),
    organizationFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('organization-filled', 0xea7e),
    organizationOutline: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('organization-outline', 0xea7e),
    newFile: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('new-file', 0xea7f),
    fileAdd: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-add', 0xea7f),
    newFolder: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('new-folder', 0xea80),
    fileDirectoryCreate: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-directory-create', 0xea80),
    trash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('trash', 0xea81),
    trashcan: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('trashcan', 0xea81),
    history: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('history', 0xea82),
    clock: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('clock', 0xea82),
    folder: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('folder', 0xea83),
    fileDirectory: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-directory', 0xea83),
    symbolFolder: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-folder', 0xea83),
    logoGithub: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('logo-github', 0xea84),
    markGithub: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mark-github', 0xea84),
    github: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('github', 0xea84),
    terminal: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal', 0xea85),
    console: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('console', 0xea85),
    repl: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repl', 0xea85),
    zap: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('zap', 0xea86),
    symbolEvent: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-event', 0xea86),
    error: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('error', 0xea87),
    stop: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('stop', 0xea87),
    variable: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('variable', 0xea88),
    symbolVariable: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-variable', 0xea88),
    array: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('array', 0xea8a),
    symbolArray: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-array', 0xea8a),
    symbolModule: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-module', 0xea8b),
    symbolPackage: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-package', 0xea8b),
    symbolNamespace: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-namespace', 0xea8b),
    symbolObject: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-object', 0xea8b),
    symbolMethod: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-method', 0xea8c),
    symbolFunction: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-function', 0xea8c),
    symbolConstructor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-constructor', 0xea8c),
    symbolBoolean: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-boolean', 0xea8f),
    symbolNull: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-null', 0xea8f),
    symbolNumeric: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-numeric', 0xea90),
    symbolNumber: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-number', 0xea90),
    symbolStructure: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-structure', 0xea91),
    symbolStruct: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-struct', 0xea91),
    symbolParameter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-parameter', 0xea92),
    symbolTypeParameter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-type-parameter', 0xea92),
    symbolKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-key', 0xea93),
    symbolText: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-text', 0xea93),
    symbolReference: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-reference', 0xea94),
    goToFile: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('go-to-file', 0xea94),
    symbolEnum: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-enum', 0xea95),
    symbolValue: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-value', 0xea95),
    symbolRuler: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-ruler', 0xea96),
    symbolUnit: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-unit', 0xea96),
    activateBreakpoints: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('activate-breakpoints', 0xea97),
    archive: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('archive', 0xea98),
    arrowBoth: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-both', 0xea99),
    arrowDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-down', 0xea9a),
    arrowLeft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-left', 0xea9b),
    arrowRight: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-right', 0xea9c),
    arrowSmallDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-small-down', 0xea9d),
    arrowSmallLeft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-small-left', 0xea9e),
    arrowSmallRight: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-small-right', 0xea9f),
    arrowSmallUp: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-small-up', 0xeaa0),
    arrowUp: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-up', 0xeaa1),
    bell: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('bell', 0xeaa2),
    bold: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('bold', 0xeaa3),
    book: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('book', 0xeaa4),
    bookmark: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('bookmark', 0xeaa5),
    debugBreakpointConditionalUnverified: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-conditional-unverified', 0xeaa6),
    debugBreakpointConditional: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-conditional', 0xeaa7),
    debugBreakpointConditionalDisabled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-conditional-disabled', 0xeaa7),
    debugBreakpointDataUnverified: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-data-unverified', 0xeaa8),
    debugBreakpointData: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-data', 0xeaa9),
    debugBreakpointDataDisabled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-data-disabled', 0xeaa9),
    debugBreakpointLogUnverified: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-log-unverified', 0xeaaa),
    debugBreakpointLog: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-log', 0xeaab),
    debugBreakpointLogDisabled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-log-disabled', 0xeaab),
    briefcase: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('briefcase', 0xeaac),
    broadcast: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('broadcast', 0xeaad),
    browser: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('browser', 0xeaae),
    bug: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('bug', 0xeaaf),
    calendar: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('calendar', 0xeab0),
    caseSensitive: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('case-sensitive', 0xeab1),
    check: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('check', 0xeab2),
    checklist: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('checklist', 0xeab3),
    chevronDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('chevron-down', 0xeab4),
    chevronLeft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('chevron-left', 0xeab5),
    chevronRight: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('chevron-right', 0xeab6),
    chevronUp: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('chevron-up', 0xeab7),
    chromeClose: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('chrome-close', 0xeab8),
    chromeMaximize: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('chrome-maximize', 0xeab9),
    chromeMinimize: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('chrome-minimize', 0xeaba),
    chromeRestore: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('chrome-restore', 0xeabb),
    circleOutline: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('circle-outline', 0xeabc),
    circle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('circle', 0xeabc),
    debugBreakpointUnverified: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-unverified', 0xeabc),
    terminalDecorationIncomplete: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-decoration-incomplete', 0xeabc),
    circleSlash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('circle-slash', 0xeabd),
    circuitBoard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('circuit-board', 0xeabe),
    clearAll: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('clear-all', 0xeabf),
    clippy: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('clippy', 0xeac0),
    closeAll: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('close-all', 0xeac1),
    cloudDownload: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('cloud-download', 0xeac2),
    cloudUpload: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('cloud-upload', 0xeac3),
    code: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('code', 0xeac4),
    collapseAll: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('collapse-all', 0xeac5),
    colorMode: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('color-mode', 0xeac6),
    commentDiscussion: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('comment-discussion', 0xeac7),
    creditCard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('credit-card', 0xeac9),
    dash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('dash', 0xeacc),
    dashboard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('dashboard', 0xeacd),
    database: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('database', 0xeace),
    debugContinue: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-continue', 0xeacf),
    debugDisconnect: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-disconnect', 0xead0),
    debugPause: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-pause', 0xead1),
    debugRestart: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-restart', 0xead2),
    debugStart: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-start', 0xead3),
    debugStepInto: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-step-into', 0xead4),
    debugStepOut: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-step-out', 0xead5),
    debugStepOver: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-step-over', 0xead6),
    debugStop: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-stop', 0xead7),
    debug: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug', 0xead8),
    deviceCameraVideo: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('device-camera-video', 0xead9),
    deviceCamera: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('device-camera', 0xeada),
    deviceMobile: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('device-mobile', 0xeadb),
    diffAdded: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('diff-added', 0xeadc),
    diffIgnored: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('diff-ignored', 0xeadd),
    diffModified: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('diff-modified', 0xeade),
    diffRemoved: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('diff-removed', 0xeadf),
    diffRenamed: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('diff-renamed', 0xeae0),
    diff: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('diff', 0xeae1),
    diffSidebyside: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('diff-sidebyside', 0xeae1),
    discard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('discard', 0xeae2),
    editorLayout: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('editor-layout', 0xeae3),
    emptyWindow: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('empty-window', 0xeae4),
    exclude: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('exclude', 0xeae5),
    extensions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('extensions', 0xeae6),
    eyeClosed: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('eye-closed', 0xeae7),
    fileBinary: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-binary', 0xeae8),
    fileCode: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-code', 0xeae9),
    fileMedia: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-media', 0xeaea),
    filePdf: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-pdf', 0xeaeb),
    fileSubmodule: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-submodule', 0xeaec),
    fileSymlinkDirectory: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-symlink-directory', 0xeaed),
    fileSymlinkFile: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-symlink-file', 0xeaee),
    fileZip: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('file-zip', 0xeaef),
    files: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('files', 0xeaf0),
    filter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('filter', 0xeaf1),
    flame: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('flame', 0xeaf2),
    foldDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('fold-down', 0xeaf3),
    foldUp: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('fold-up', 0xeaf4),
    fold: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('fold', 0xeaf5),
    folderActive: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('folder-active', 0xeaf6),
    folderOpened: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('folder-opened', 0xeaf7),
    gear: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('gear', 0xeaf8),
    gift: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('gift', 0xeaf9),
    gistSecret: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('gist-secret', 0xeafa),
    gist: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('gist', 0xeafb),
    gitCommit: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-commit', 0xeafc),
    gitCompare: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-compare', 0xeafd),
    compareChanges: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('compare-changes', 0xeafd),
    gitMerge: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-merge', 0xeafe),
    githubAction: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('github-action', 0xeaff),
    githubAlt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('github-alt', 0xeb00),
    globe: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('globe', 0xeb01),
    grabber: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('grabber', 0xeb02),
    graph: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('graph', 0xeb03),
    gripper: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('gripper', 0xeb04),
    heart: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('heart', 0xeb05),
    home: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('home', 0xeb06),
    horizontalRule: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('horizontal-rule', 0xeb07),
    hubot: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('hubot', 0xeb08),
    inbox: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('inbox', 0xeb09),
    issueReopened: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('issue-reopened', 0xeb0b),
    issues: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('issues', 0xeb0c),
    italic: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('italic', 0xeb0d),
    jersey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('jersey', 0xeb0e),
    json: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('json', 0xeb0f),
    kebabVertical: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('kebab-vertical', 0xeb10),
    key: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('key', 0xeb11),
    law: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('law', 0xeb12),
    lightbulbAutofix: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('lightbulb-autofix', 0xeb13),
    linkExternal: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('link-external', 0xeb14),
    link: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('link', 0xeb15),
    listOrdered: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('list-ordered', 0xeb16),
    listUnordered: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('list-unordered', 0xeb17),
    liveShare: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('live-share', 0xeb18),
    loading: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('loading', 0xeb19),
    location: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('location', 0xeb1a),
    mailRead: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mail-read', 0xeb1b),
    mail: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mail', 0xeb1c),
    markdown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('markdown', 0xeb1d),
    megaphone: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('megaphone', 0xeb1e),
    mention: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mention', 0xeb1f),
    milestone: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('milestone', 0xeb20),
    gitPullRequestMilestone: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request-milestone', 0xeb20),
    mortarBoard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mortar-board', 0xeb21),
    move: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('move', 0xeb22),
    multipleWindows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('multiple-windows', 0xeb23),
    mute: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mute', 0xeb24),
    noNewline: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('no-newline', 0xeb25),
    note: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('note', 0xeb26),
    octoface: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('octoface', 0xeb27),
    openPreview: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('open-preview', 0xeb28),
    package: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('package', 0xeb29),
    paintcan: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('paintcan', 0xeb2a),
    pin: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('pin', 0xeb2b),
    play: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('play', 0xeb2c),
    run: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('run', 0xeb2c),
    plug: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('plug', 0xeb2d),
    preserveCase: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('preserve-case', 0xeb2e),
    preview: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('preview', 0xeb2f),
    project: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('project', 0xeb30),
    pulse: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('pulse', 0xeb31),
    question: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('question', 0xeb32),
    quote: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('quote', 0xeb33),
    radioTower: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('radio-tower', 0xeb34),
    reactions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('reactions', 0xeb35),
    references: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('references', 0xeb36),
    refresh: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('refresh', 0xeb37),
    regex: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('regex', 0xeb38),
    remoteExplorer: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('remote-explorer', 0xeb39),
    remote: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('remote', 0xeb3a),
    remove: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('remove', 0xeb3b),
    replaceAll: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('replace-all', 0xeb3c),
    replace: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('replace', 0xeb3d),
    repoClone: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repo-clone', 0xeb3e),
    repoForcePush: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repo-force-push', 0xeb3f),
    repoPull: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repo-pull', 0xeb40),
    repoPush: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repo-push', 0xeb41),
    report: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('report', 0xeb42),
    requestChanges: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('request-changes', 0xeb43),
    rocket: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('rocket', 0xeb44),
    rootFolderOpened: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('root-folder-opened', 0xeb45),
    rootFolder: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('root-folder', 0xeb46),
    rss: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('rss', 0xeb47),
    ruby: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('ruby', 0xeb48),
    saveAll: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('save-all', 0xeb49),
    saveAs: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('save-as', 0xeb4a),
    save: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('save', 0xeb4b),
    screenFull: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('screen-full', 0xeb4c),
    screenNormal: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('screen-normal', 0xeb4d),
    searchStop: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('search-stop', 0xeb4e),
    server: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('server', 0xeb50),
    settingsGear: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('settings-gear', 0xeb51),
    settings: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('settings', 0xeb52),
    shield: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('shield', 0xeb53),
    smiley: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('smiley', 0xeb54),
    sortPrecedence: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('sort-precedence', 0xeb55),
    splitHorizontal: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('split-horizontal', 0xeb56),
    splitVertical: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('split-vertical', 0xeb57),
    squirrel: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('squirrel', 0xeb58),
    starFull: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('star-full', 0xeb59),
    starHalf: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('star-half', 0xeb5a),
    symbolClass: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-class', 0xeb5b),
    symbolColor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-color', 0xeb5c),
    symbolConstant: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-constant', 0xeb5d),
    symbolEnumMember: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-enum-member', 0xeb5e),
    symbolField: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-field', 0xeb5f),
    symbolFile: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-file', 0xeb60),
    symbolInterface: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-interface', 0xeb61),
    symbolKeyword: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-keyword', 0xeb62),
    symbolMisc: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-misc', 0xeb63),
    symbolOperator: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-operator', 0xeb64),
    symbolProperty: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-property', 0xeb65),
    wrench: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('wrench', 0xeb65),
    wrenchSubaction: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('wrench-subaction', 0xeb65),
    symbolSnippet: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-snippet', 0xeb66),
    tasklist: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('tasklist', 0xeb67),
    telescope: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('telescope', 0xeb68),
    textSize: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('text-size', 0xeb69),
    threeBars: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('three-bars', 0xeb6a),
    thumbsdown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('thumbsdown', 0xeb6b),
    thumbsup: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('thumbsup', 0xeb6c),
    tools: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('tools', 0xeb6d),
    triangleDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('triangle-down', 0xeb6e),
    triangleLeft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('triangle-left', 0xeb6f),
    triangleRight: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('triangle-right', 0xeb70),
    triangleUp: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('triangle-up', 0xeb71),
    twitter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('twitter', 0xeb72),
    unfold: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('unfold', 0xeb73),
    unlock: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('unlock', 0xeb74),
    unmute: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('unmute', 0xeb75),
    unverified: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('unverified', 0xeb76),
    verified: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('verified', 0xeb77),
    versions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('versions', 0xeb78),
    vmActive: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('vm-active', 0xeb79),
    vmOutline: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('vm-outline', 0xeb7a),
    vmRunning: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('vm-running', 0xeb7b),
    watch: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('watch', 0xeb7c),
    whitespace: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('whitespace', 0xeb7d),
    wholeWord: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('whole-word', 0xeb7e),
    window: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('window', 0xeb7f),
    wordWrap: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('word-wrap', 0xeb80),
    zoomIn: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('zoom-in', 0xeb81),
    zoomOut: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('zoom-out', 0xeb82),
    listFilter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('list-filter', 0xeb83),
    listFlat: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('list-flat', 0xeb84),
    listSelection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('list-selection', 0xeb85),
    selection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('selection', 0xeb85),
    listTree: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('list-tree', 0xeb86),
    debugBreakpointFunctionUnverified: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-function-unverified', 0xeb87),
    debugBreakpointFunction: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-function', 0xeb88),
    debugBreakpointFunctionDisabled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-function-disabled', 0xeb88),
    debugStackframeActive: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-stackframe-active', 0xeb89),
    circleSmallFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('circle-small-filled', 0xeb8a),
    debugStackframeDot: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-stackframe-dot', 0xeb8a),
    terminalDecorationMark: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-decoration-mark', 0xeb8a),
    debugStackframe: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-stackframe', 0xeb8b),
    debugStackframeFocused: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-stackframe-focused', 0xeb8b),
    debugBreakpointUnsupported: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-unsupported', 0xeb8c),
    symbolString: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-string', 0xeb8d),
    debugReverseContinue: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-reverse-continue', 0xeb8e),
    debugStepBack: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-step-back', 0xeb8f),
    debugRestartFrame: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-restart-frame', 0xeb90),
    debugAlt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-alt', 0xeb91),
    callIncoming: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('call-incoming', 0xeb92),
    callOutgoing: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('call-outgoing', 0xeb93),
    menu: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('menu', 0xeb94),
    expandAll: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('expand-all', 0xeb95),
    feedback: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('feedback', 0xeb96),
    gitPullRequestReviewer: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request-reviewer', 0xeb96),
    groupByRefType: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('group-by-ref-type', 0xeb97),
    ungroupByRefType: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('ungroup-by-ref-type', 0xeb98),
    account: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('account', 0xeb99),
    gitPullRequestAssignee: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request-assignee', 0xeb99),
    bellDot: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('bell-dot', 0xeb9a),
    debugConsole: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-console', 0xeb9b),
    library: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('library', 0xeb9c),
    output: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('output', 0xeb9d),
    runAll: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('run-all', 0xeb9e),
    syncIgnored: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('sync-ignored', 0xeb9f),
    pinned: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('pinned', 0xeba0),
    githubInverted: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('github-inverted', 0xeba1),
    serverProcess: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('server-process', 0xeba2),
    serverEnvironment: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('server-environment', 0xeba3),
    pass: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('pass', 0xeba4),
    issueClosed: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('issue-closed', 0xeba4),
    stopCircle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('stop-circle', 0xeba5),
    playCircle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('play-circle', 0xeba6),
    record: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('record', 0xeba7),
    debugAltSmall: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-alt-small', 0xeba8),
    vmConnect: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('vm-connect', 0xeba9),
    cloud: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('cloud', 0xebaa),
    merge: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('merge', 0xebab),
    export: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('export', 0xebac),
    graphLeft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('graph-left', 0xebad),
    magnet: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('magnet', 0xebae),
    notebook: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('notebook', 0xebaf),
    redo: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('redo', 0xebb0),
    checkAll: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('check-all', 0xebb1),
    pinnedDirty: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('pinned-dirty', 0xebb2),
    passFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('pass-filled', 0xebb3),
    circleLargeFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('circle-large-filled', 0xebb4),
    circleLarge: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('circle-large', 0xebb5),
    circleLargeOutline: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('circle-large-outline', 0xebb5),
    combine: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('combine', 0xebb6),
    gather: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('gather', 0xebb6),
    table: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('table', 0xebb7),
    variableGroup: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('variable-group', 0xebb8),
    typeHierarchy: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('type-hierarchy', 0xebb9),
    typeHierarchySub: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('type-hierarchy-sub', 0xebba),
    typeHierarchySuper: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('type-hierarchy-super', 0xebbb),
    gitPullRequestCreate: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request-create', 0xebbc),
    runAbove: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('run-above', 0xebbd),
    runBelow: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('run-below', 0xebbe),
    notebookTemplate: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('notebook-template', 0xebbf),
    debugRerun: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-rerun', 0xebc0),
    workspaceTrusted: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('workspace-trusted', 0xebc1),
    workspaceUntrusted: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('workspace-untrusted', 0xebc2),
    workspaceUnknown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('workspace-unknown', 0xebc3),
    terminalCmd: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-cmd', 0xebc4),
    terminalDebian: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-debian', 0xebc5),
    terminalLinux: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-linux', 0xebc6),
    terminalPowershell: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-powershell', 0xebc7),
    terminalTmux: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-tmux', 0xebc8),
    terminalUbuntu: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-ubuntu', 0xebc9),
    terminalBash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-bash', 0xebca),
    arrowSwap: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-swap', 0xebcb),
    copy: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('copy', 0xebcc),
    personAdd: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('person-add', 0xebcd),
    filterFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('filter-filled', 0xebce),
    wand: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('wand', 0xebcf),
    debugLineByLine: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-line-by-line', 0xebd0),
    inspect: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('inspect', 0xebd1),
    layers: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layers', 0xebd2),
    layersDot: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layers-dot', 0xebd3),
    layersActive: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layers-active', 0xebd4),
    compass: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('compass', 0xebd5),
    compassDot: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('compass-dot', 0xebd6),
    compassActive: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('compass-active', 0xebd7),
    azure: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('azure', 0xebd8),
    issueDraft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('issue-draft', 0xebd9),
    gitPullRequestClosed: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request-closed', 0xebda),
    gitPullRequestDraft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request-draft', 0xebdb),
    debugAll: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-all', 0xebdc),
    debugCoverage: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-coverage', 0xebdd),
    runErrors: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('run-errors', 0xebde),
    folderLibrary: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('folder-library', 0xebdf),
    debugContinueSmall: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-continue-small', 0xebe0),
    beakerStop: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('beaker-stop', 0xebe1),
    graphLine: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('graph-line', 0xebe2),
    graphScatter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('graph-scatter', 0xebe3),
    pieChart: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('pie-chart', 0xebe4),
    bracket: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('bracket', 0xeb0f),
    bracketDot: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('bracket-dot', 0xebe5),
    bracketError: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('bracket-error', 0xebe6),
    lockSmall: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('lock-small', 0xebe7),
    azureDevops: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('azure-devops', 0xebe8),
    verifiedFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('verified-filled', 0xebe9),
    newline: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('newline', 0xebea),
    layout: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout', 0xebeb),
    layoutActivitybarLeft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-activitybar-left', 0xebec),
    layoutActivitybarRight: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-activitybar-right', 0xebed),
    layoutPanelLeft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-panel-left', 0xebee),
    layoutPanelCenter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-panel-center', 0xebef),
    layoutPanelJustify: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-panel-justify', 0xebf0),
    layoutPanelRight: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-panel-right', 0xebf1),
    layoutPanel: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-panel', 0xebf2),
    layoutSidebarLeft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-sidebar-left', 0xebf3),
    layoutSidebarRight: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-sidebar-right', 0xebf4),
    layoutStatusbar: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-statusbar', 0xebf5),
    layoutMenubar: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-menubar', 0xebf6),
    layoutCentered: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-centered', 0xebf7),
    target: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('target', 0xebf8),
    indent: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('indent', 0xebf9),
    recordSmall: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('record-small', 0xebfa),
    errorSmall: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('error-small', 0xebfb),
    terminalDecorationError: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('terminal-decoration-error', 0xebfb),
    arrowCircleDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-circle-down', 0xebfc),
    arrowCircleLeft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-circle-left', 0xebfd),
    arrowCircleRight: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-circle-right', 0xebfe),
    arrowCircleUp: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('arrow-circle-up', 0xebff),
    layoutSidebarRightOff: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-sidebar-right-off', 0xec00),
    layoutPanelOff: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-panel-off', 0xec01),
    layoutSidebarLeftOff: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('layout-sidebar-left-off', 0xec02),
    blank: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('blank', 0xec03),
    heartFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('heart-filled', 0xec04),
    map: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('map', 0xec05),
    mapHorizontal: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('map-horizontal', 0xec05),
    foldHorizontal: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('fold-horizontal', 0xec05),
    mapFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('map-filled', 0xec06),
    mapHorizontalFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('map-horizontal-filled', 0xec06),
    foldHorizontalFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('fold-horizontal-filled', 0xec06),
    circleSmall: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('circle-small', 0xec07),
    bellSlash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('bell-slash', 0xec08),
    bellSlashDot: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('bell-slash-dot', 0xec09),
    commentUnresolved: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('comment-unresolved', 0xec0a),
    gitPullRequestGoToChanges: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request-go-to-changes', 0xec0b),
    gitPullRequestNewChanges: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-pull-request-new-changes', 0xec0c),
    searchFuzzy: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('search-fuzzy', 0xec0d),
    commentDraft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('comment-draft', 0xec0e),
    send: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('send', 0xec0f),
    sparkle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('sparkle', 0xec10),
    insert: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('insert', 0xec11),
    mic: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mic', 0xec12),
    thumbsdownFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('thumbsdown-filled', 0xec13),
    thumbsupFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('thumbsup-filled', 0xec14),
    coffee: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('coffee', 0xec15),
    snake: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('snake', 0xec16),
    game: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('game', 0xec17),
    vr: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('vr', 0xec18),
    chip: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('chip', 0xec19),
    piano: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('piano', 0xec1a),
    music: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('music', 0xec1b),
    micFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('mic-filled', 0xec1c),
    repoFetch: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('repo-fetch', 0xec1d),
    copilot: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('copilot', 0xec1e),
    lightbulbSparkle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('lightbulb-sparkle', 0xec1f),
    robot: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('robot', 0xec20),
    sparkleFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('sparkle-filled', 0xec21),
    diffSingle: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('diff-single', 0xec22),
    diffMultiple: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('diff-multiple', 0xec23),
    surroundWith: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('surround-with', 0xec24),
    share: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('share', 0xec25),
    gitStash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-stash', 0xec26),
    gitStashApply: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-stash-apply', 0xec27),
    gitStashPop: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-stash-pop', 0xec28),
    vscode: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('vscode', 0xec29),
    vscodeInsiders: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('vscode-insiders', 0xec2a),
    codeOss: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('code-oss', 0xec2b),
    runCoverage: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('run-coverage', 0xec2c),
    runAllCoverage: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('run-all-coverage', 0xec2d),
    coverage: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('coverage', 0xec2e),
    githubProject: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('github-project', 0xec2f),
    mapVertical: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('map-vertical', 0xec30),
    foldVertical: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('fold-vertical', 0xec30),
    mapVerticalFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('map-vertical-filled', 0xec31),
    foldVerticalFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('fold-vertical-filled', 0xec31),
    goToSearch: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('go-to-search', 0xec32),
    percentage: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('percentage', 0xec33),
    sortPercentage: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('sort-percentage', 0xec33),
    attach: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('attach', 0xec34)
};
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/codicons.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Codicon": (()=>Codicon),
    "codiconsDerived": (()=>codiconsDerived)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsLibrary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js [app-client] (ecmascript)");
;
;
const codiconsDerived = {
    dialogError: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('dialog-error', 'error'),
    dialogWarning: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('dialog-warning', 'warning'),
    dialogInfo: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('dialog-info', 'info'),
    dialogClose: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('dialog-close', 'close'),
    treeItemExpanded: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('tree-item-expanded', 'chevron-down'),
    treeFilterOnTypeOn: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('tree-filter-on-type-on', 'list-filter'),
    treeFilterOnTypeOff: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('tree-filter-on-type-off', 'list-selection'),
    treeFilterClear: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('tree-filter-clear', 'close'),
    treeItemLoading: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('tree-item-loading', 'loading'),
    menuSelection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('menu-selection', 'check'),
    menuSubmenu: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('menu-submenu', 'chevron-right'),
    menuBarMore: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('menubar-more', 'more'),
    scrollbarButtonLeft: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('scrollbar-button-left', 'triangle-left'),
    scrollbarButtonRight: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('scrollbar-button-right', 'triangle-right'),
    scrollbarButtonUp: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('scrollbar-button-up', 'triangle-up'),
    scrollbarButtonDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('scrollbar-button-down', 'triangle-down'),
    toolBarMore: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('toolbar-more', 'more'),
    quickInputBack: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('quick-input-back', 'arrow-left'),
    dropDownButton: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('drop-down-button', 0xeab4),
    symbolCustomColor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('symbol-customcolor', 0xeb5c),
    exportIcon: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('export', 0xebac),
    workspaceUnspecified: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('workspace-unspecified', 0xebc3),
    newLine: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('newline', 0xebea),
    thumbsDownFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('thumbsdown-filled', 0xec13),
    thumbsUpFilled: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('thumbsup-filled', 0xec14),
    gitFetch: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('git-fetch', 0xec1d),
    lightbulbSparkleAutofix: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('lightbulb-sparkle-autofix', 0xec1f),
    debugBreakpointPending: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsUtil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["register"])('debug-breakpoint-pending', 0xebd9)
};
const Codicon = {
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codiconsLibrary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["codiconsLibrary"],
    ...codiconsDerived
};
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/cache.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CachedFunction": (()=>CachedFunction),
    "LRUCachedFunction": (()=>LRUCachedFunction),
    "identity": (()=>identity)
});
function identity(t) {
    return t;
}
class LRUCachedFunction {
    constructor(arg1, arg2){
        this.lastCache = undefined;
        this.lastArgKey = undefined;
        if (typeof arg1 === 'function') {
            this._fn = arg1;
            this._computeKey = identity;
        } else {
            this._fn = arg2;
            this._computeKey = arg1.getCacheKey;
        }
    }
    get(arg) {
        const key = this._computeKey(arg);
        if (this.lastArgKey !== key) {
            this.lastArgKey = key;
            this.lastCache = this._fn(arg);
        }
        return this.lastCache;
    }
}
class CachedFunction {
    get cachedValues() {
        return this._map;
    }
    constructor(arg1, arg2){
        this._map = new Map();
        this._map2 = new Map();
        if (typeof arg1 === 'function') {
            this._fn = arg1;
            this._computeKey = identity;
        } else {
            this._fn = arg2;
            this._computeKey = arg1.getCacheKey;
        }
    }
    get(arg) {
        const key = this._computeKey(arg);
        if (this._map2.has(key)) {
            return this._map2.get(key);
        }
        const value = this._fn(arg);
        this._map.set(arg, value);
        this._map2.set(key, value);
        return value;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/lazy.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "Lazy": (()=>Lazy)
});
class Lazy {
    constructor(executor){
        this.executor = executor;
        this._didRun = false;
    }
    /**
     * Get the wrapped value.
     *
     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only
     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value
     */ get value() {
        if (!this._didRun) {
            try {
                this._value = this.executor();
            } catch (err) {
                this._error = err;
            } finally{
                this._didRun = true;
            }
        }
        if (this._error) {
            throw this._error;
        }
        return this._value;
    }
    /**
     * Get the wrapped value without forcing evaluation.
     */ get rawValue() {
        return this._value;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "AmbiguousCharacters": (()=>AmbiguousCharacters),
    "CodePointIterator": (()=>CodePointIterator),
    "GraphemeIterator": (()=>GraphemeIterator),
    "InvisibleCharacters": (()=>InvisibleCharacters),
    "UNUSUAL_LINE_TERMINATORS": (()=>UNUSUAL_LINE_TERMINATORS),
    "UTF8_BOM_CHARACTER": (()=>UTF8_BOM_CHARACTER),
    "commonPrefixLength": (()=>commonPrefixLength),
    "commonSuffixLength": (()=>commonSuffixLength),
    "compare": (()=>compare),
    "compareIgnoreCase": (()=>compareIgnoreCase),
    "compareSubstring": (()=>compareSubstring),
    "compareSubstringIgnoreCase": (()=>compareSubstringIgnoreCase),
    "computeCodePoint": (()=>computeCodePoint),
    "containsRTL": (()=>containsRTL),
    "containsUnusualLineTerminators": (()=>containsUnusualLineTerminators),
    "containsUppercaseCharacter": (()=>containsUppercaseCharacter),
    "convertSimple2RegExpPattern": (()=>convertSimple2RegExpPattern),
    "createRegExp": (()=>createRegExp),
    "equalsIgnoreCase": (()=>equalsIgnoreCase),
    "escape": (()=>escape),
    "escapeRegExpCharacters": (()=>escapeRegExpCharacters),
    "firstNonWhitespaceIndex": (()=>firstNonWhitespaceIndex),
    "format": (()=>format),
    "getCharContainingOffset": (()=>getCharContainingOffset),
    "getLeadingWhitespace": (()=>getLeadingWhitespace),
    "getLeftDeleteOffset": (()=>getLeftDeleteOffset),
    "getNextCodePoint": (()=>getNextCodePoint),
    "htmlAttributeEncodeValue": (()=>htmlAttributeEncodeValue),
    "isAsciiDigit": (()=>isAsciiDigit),
    "isBasicASCII": (()=>isBasicASCII),
    "isEmojiImprecise": (()=>isEmojiImprecise),
    "isFalsyOrWhitespace": (()=>isFalsyOrWhitespace),
    "isFullWidthCharacter": (()=>isFullWidthCharacter),
    "isHighSurrogate": (()=>isHighSurrogate),
    "isLowSurrogate": (()=>isLowSurrogate),
    "isLowerAsciiLetter": (()=>isLowerAsciiLetter),
    "isUpperAsciiLetter": (()=>isUpperAsciiLetter),
    "lastNonWhitespaceIndex": (()=>lastNonWhitespaceIndex),
    "ltrim": (()=>ltrim),
    "nextCharLength": (()=>nextCharLength),
    "noBreakWhitespace": (()=>noBreakWhitespace),
    "prevCharLength": (()=>prevCharLength),
    "regExpLeadsToEndlessLoop": (()=>regExpLeadsToEndlessLoop),
    "rtrim": (()=>rtrim),
    "singleLetterHash": (()=>singleLetterHash),
    "splitLines": (()=>splitLines),
    "splitLinesIncludeSeparators": (()=>splitLinesIncludeSeparators),
    "startsWithIgnoreCase": (()=>startsWithIgnoreCase),
    "startsWithUTF8BOM": (()=>startsWithUTF8BOM),
    "stripWildcards": (()=>stripWildcards),
    "trim": (()=>trim)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$cache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/cache.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lazy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lazy.js [app-client] (ecmascript)");
;
;
function isFalsyOrWhitespace(str) {
    if (!str || typeof str !== 'string') {
        return true;
    }
    return str.trim().length === 0;
}
const _formatRegexp = /{(\d+)}/g;
function format(value, ...args) {
    if (args.length === 0) {
        return value;
    }
    return value.replace(_formatRegexp, function(match, group) {
        const idx = parseInt(group, 10);
        return isNaN(idx) || idx < 0 || idx >= args.length ? match : args[idx];
    });
}
function htmlAttributeEncodeValue(value) {
    return value.replace(/[<>"'&]/g, (ch)=>{
        switch(ch){
            case '<':
                return '&lt;';
            case '>':
                return '&gt;';
            case '"':
                return '&quot;';
            case '\'':
                return '&apos;';
            case '&':
                return '&amp;';
        }
        return ch;
    });
}
function escape(html) {
    return html.replace(/[<>&]/g, function(match) {
        switch(match){
            case '<':
                return '&lt;';
            case '>':
                return '&gt;';
            case '&':
                return '&amp;';
            default:
                return match;
        }
    });
}
function escapeRegExpCharacters(value) {
    return value.replace(/[\\\{\}\*\+\?\|\^\$\.\[\]\(\)]/g, '\\$&');
}
function trim(haystack, needle = ' ') {
    const trimmed = ltrim(haystack, needle);
    return rtrim(trimmed, needle);
}
function ltrim(haystack, needle) {
    if (!haystack || !needle) {
        return haystack;
    }
    const needleLen = needle.length;
    if (needleLen === 0 || haystack.length === 0) {
        return haystack;
    }
    let offset = 0;
    while(haystack.indexOf(needle, offset) === offset){
        offset = offset + needleLen;
    }
    return haystack.substring(offset);
}
function rtrim(haystack, needle) {
    if (!haystack || !needle) {
        return haystack;
    }
    const needleLen = needle.length, haystackLen = haystack.length;
    if (needleLen === 0 || haystackLen === 0) {
        return haystack;
    }
    let offset = haystackLen, idx = -1;
    while(true){
        idx = haystack.lastIndexOf(needle, offset - 1);
        if (idx === -1 || idx + needleLen !== offset) {
            break;
        }
        if (idx === 0) {
            return '';
        }
        offset = idx;
    }
    return haystack.substring(0, offset);
}
function convertSimple2RegExpPattern(pattern) {
    return pattern.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, '\\$&').replace(/[\*]/g, '.*');
}
function stripWildcards(pattern) {
    return pattern.replace(/\*/g, '');
}
function createRegExp(searchString, isRegex, options = {}) {
    if (!searchString) {
        throw new Error('Cannot create regex from empty string');
    }
    if (!isRegex) {
        searchString = escapeRegExpCharacters(searchString);
    }
    if (options.wholeWord) {
        if (!/\B/.test(searchString.charAt(0))) {
            searchString = '\\b' + searchString;
        }
        if (!/\B/.test(searchString.charAt(searchString.length - 1))) {
            searchString = searchString + '\\b';
        }
    }
    let modifiers = '';
    if (options.global) {
        modifiers += 'g';
    }
    if (!options.matchCase) {
        modifiers += 'i';
    }
    if (options.multiline) {
        modifiers += 'm';
    }
    if (options.unicode) {
        modifiers += 'u';
    }
    return new RegExp(searchString, modifiers);
}
function regExpLeadsToEndlessLoop(regexp) {
    // Exit early if it's one of these special cases which are meant to match
    // against an empty string
    if (regexp.source === '^' || regexp.source === '^$' || regexp.source === '$' || regexp.source === '^\\s*$') {
        return false;
    }
    // We check against an empty string. If the regular expression doesn't advance
    // (e.g. ends in an endless loop) it will match an empty string.
    const match = regexp.exec('');
    return !!(match && regexp.lastIndex === 0);
}
function splitLines(str) {
    return str.split(/\r\n|\r|\n/);
}
function splitLinesIncludeSeparators(str) {
    const linesWithSeparators = [];
    const splitLinesAndSeparators = str.split(/(\r\n|\r|\n)/);
    for(let i = 0; i < Math.ceil(splitLinesAndSeparators.length / 2); i++){
        linesWithSeparators.push(splitLinesAndSeparators[2 * i] + (splitLinesAndSeparators[2 * i + 1] ?? ''));
    }
    return linesWithSeparators;
}
function firstNonWhitespaceIndex(str) {
    for(let i = 0, len = str.length; i < len; i++){
        const chCode = str.charCodeAt(i);
        if (chCode !== 32 /* CharCode.Space */  && chCode !== 9 /* CharCode.Tab */ ) {
            return i;
        }
    }
    return -1;
}
function getLeadingWhitespace(str, start = 0, end = str.length) {
    for(let i = start; i < end; i++){
        const chCode = str.charCodeAt(i);
        if (chCode !== 32 /* CharCode.Space */  && chCode !== 9 /* CharCode.Tab */ ) {
            return str.substring(start, i);
        }
    }
    return str.substring(start, end);
}
function lastNonWhitespaceIndex(str, startIndex = str.length - 1) {
    for(let i = startIndex; i >= 0; i--){
        const chCode = str.charCodeAt(i);
        if (chCode !== 32 /* CharCode.Space */  && chCode !== 9 /* CharCode.Tab */ ) {
            return i;
        }
    }
    return -1;
}
function compare(a, b) {
    if (a < b) {
        return -1;
    } else if (a > b) {
        return 1;
    } else {
        return 0;
    }
}
function compareSubstring(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {
    for(; aStart < aEnd && bStart < bEnd; aStart++, bStart++){
        const codeA = a.charCodeAt(aStart);
        const codeB = b.charCodeAt(bStart);
        if (codeA < codeB) {
            return -1;
        } else if (codeA > codeB) {
            return 1;
        }
    }
    const aLen = aEnd - aStart;
    const bLen = bEnd - bStart;
    if (aLen < bLen) {
        return -1;
    } else if (aLen > bLen) {
        return 1;
    }
    return 0;
}
function compareIgnoreCase(a, b) {
    return compareSubstringIgnoreCase(a, b, 0, a.length, 0, b.length);
}
function compareSubstringIgnoreCase(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {
    for(; aStart < aEnd && bStart < bEnd; aStart++, bStart++){
        let codeA = a.charCodeAt(aStart);
        let codeB = b.charCodeAt(bStart);
        if (codeA === codeB) {
            continue;
        }
        if (codeA >= 128 || codeB >= 128) {
            // not ASCII letters -> fallback to lower-casing strings
            return compareSubstring(a.toLowerCase(), b.toLowerCase(), aStart, aEnd, bStart, bEnd);
        }
        // mapper lower-case ascii letter onto upper-case varinats
        // [97-122] (lower ascii) --> [65-90] (upper ascii)
        if (isLowerAsciiLetter(codeA)) {
            codeA -= 32;
        }
        if (isLowerAsciiLetter(codeB)) {
            codeB -= 32;
        }
        // compare both code points
        const diff = codeA - codeB;
        if (diff === 0) {
            continue;
        }
        return diff;
    }
    const aLen = aEnd - aStart;
    const bLen = bEnd - bStart;
    if (aLen < bLen) {
        return -1;
    } else if (aLen > bLen) {
        return 1;
    }
    return 0;
}
function isAsciiDigit(code) {
    return code >= 48 /* CharCode.Digit0 */  && code <= 57 /* CharCode.Digit9 */ ;
}
function isLowerAsciiLetter(code) {
    return code >= 97 /* CharCode.a */  && code <= 122 /* CharCode.z */ ;
}
function isUpperAsciiLetter(code) {
    return code >= 65 /* CharCode.A */  && code <= 90 /* CharCode.Z */ ;
}
function equalsIgnoreCase(a, b) {
    return a.length === b.length && compareSubstringIgnoreCase(a, b) === 0;
}
function startsWithIgnoreCase(str, candidate) {
    const candidateLength = candidate.length;
    if (candidate.length > str.length) {
        return false;
    }
    return compareSubstringIgnoreCase(str, candidate, 0, candidateLength) === 0;
}
function commonPrefixLength(a, b) {
    const len = Math.min(a.length, b.length);
    let i;
    for(i = 0; i < len; i++){
        if (a.charCodeAt(i) !== b.charCodeAt(i)) {
            return i;
        }
    }
    return len;
}
function commonSuffixLength(a, b) {
    const len = Math.min(a.length, b.length);
    let i;
    const aLastIndex = a.length - 1;
    const bLastIndex = b.length - 1;
    for(i = 0; i < len; i++){
        if (a.charCodeAt(aLastIndex - i) !== b.charCodeAt(bLastIndex - i)) {
            return i;
        }
    }
    return len;
}
function isHighSurrogate(charCode) {
    return 0xD800 <= charCode && charCode <= 0xDBFF;
}
function isLowSurrogate(charCode) {
    return 0xDC00 <= charCode && charCode <= 0xDFFF;
}
function computeCodePoint(highSurrogate, lowSurrogate) {
    return (highSurrogate - 0xD800 << 10) + (lowSurrogate - 0xDC00) + 0x10000;
}
function getNextCodePoint(str, len, offset) {
    const charCode = str.charCodeAt(offset);
    if (isHighSurrogate(charCode) && offset + 1 < len) {
        const nextCharCode = str.charCodeAt(offset + 1);
        if (isLowSurrogate(nextCharCode)) {
            return computeCodePoint(charCode, nextCharCode);
        }
    }
    return charCode;
}
/**
 * get the code point that ends right before offset `offset`
 */ function getPrevCodePoint(str, offset) {
    const charCode = str.charCodeAt(offset - 1);
    if (isLowSurrogate(charCode) && offset > 1) {
        const prevCharCode = str.charCodeAt(offset - 2);
        if (isHighSurrogate(prevCharCode)) {
            return computeCodePoint(prevCharCode, charCode);
        }
    }
    return charCode;
}
class CodePointIterator {
    get offset() {
        return this._offset;
    }
    constructor(str, offset = 0){
        this._str = str;
        this._len = str.length;
        this._offset = offset;
    }
    setOffset(offset) {
        this._offset = offset;
    }
    prevCodePoint() {
        const codePoint = getPrevCodePoint(this._str, this._offset);
        this._offset -= codePoint >= 65536 /* Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN */  ? 2 : 1;
        return codePoint;
    }
    nextCodePoint() {
        const codePoint = getNextCodePoint(this._str, this._len, this._offset);
        this._offset += codePoint >= 65536 /* Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN */  ? 2 : 1;
        return codePoint;
    }
    eol() {
        return this._offset >= this._len;
    }
}
class GraphemeIterator {
    get offset() {
        return this._iterator.offset;
    }
    constructor(str, offset = 0){
        this._iterator = new CodePointIterator(str, offset);
    }
    nextGraphemeLength() {
        const graphemeBreakTree = GraphemeBreakTree.getInstance();
        const iterator = this._iterator;
        const initialOffset = iterator.offset;
        let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.nextCodePoint());
        while(!iterator.eol()){
            const offset = iterator.offset;
            const nextGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.nextCodePoint());
            if (breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {
                // move iterator back
                iterator.setOffset(offset);
                break;
            }
            graphemeBreakType = nextGraphemeBreakType;
        }
        return iterator.offset - initialOffset;
    }
    prevGraphemeLength() {
        const graphemeBreakTree = GraphemeBreakTree.getInstance();
        const iterator = this._iterator;
        const initialOffset = iterator.offset;
        let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.prevCodePoint());
        while(iterator.offset > 0){
            const offset = iterator.offset;
            const prevGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.prevCodePoint());
            if (breakBetweenGraphemeBreakType(prevGraphemeBreakType, graphemeBreakType)) {
                // move iterator back
                iterator.setOffset(offset);
                break;
            }
            graphemeBreakType = prevGraphemeBreakType;
        }
        return initialOffset - iterator.offset;
    }
    eol() {
        return this._iterator.eol();
    }
}
function nextCharLength(str, initialOffset) {
    const iterator = new GraphemeIterator(str, initialOffset);
    return iterator.nextGraphemeLength();
}
function prevCharLength(str, initialOffset) {
    const iterator = new GraphemeIterator(str, initialOffset);
    return iterator.prevGraphemeLength();
}
function getCharContainingOffset(str, offset) {
    if (offset > 0 && isLowSurrogate(str.charCodeAt(offset))) {
        offset--;
    }
    const endOffset = offset + nextCharLength(str, offset);
    const startOffset = endOffset - prevCharLength(str, endOffset);
    return [
        startOffset,
        endOffset
    ];
}
let CONTAINS_RTL = undefined;
function makeContainsRtl() {
    // Generated using https://github.com/alexdima/unicode-utils/blob/main/rtl-test.js
    return /(?:[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05F4\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u0710\u0712-\u072F\u074D-\u07A5\u07B1-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u0858\u085E-\u088E\u08A0-\u08C9\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFD3D\uFD50-\uFDC7\uFDF0-\uFDFC\uFE70-\uFEFC]|\uD802[\uDC00-\uDD1B\uDD20-\uDE00\uDE10-\uDE35\uDE40-\uDEE4\uDEEB-\uDF35\uDF40-\uDFFF]|\uD803[\uDC00-\uDD23\uDE80-\uDEA9\uDEAD-\uDF45\uDF51-\uDF81\uDF86-\uDFF6]|\uD83A[\uDC00-\uDCCF\uDD00-\uDD43\uDD4B-\uDFFF]|\uD83B[\uDC00-\uDEBB])/;
}
function containsRTL(str) {
    if (!CONTAINS_RTL) {
        CONTAINS_RTL = makeContainsRtl();
    }
    return CONTAINS_RTL.test(str);
}
const IS_BASIC_ASCII = /^[\t\n\r\x20-\x7E]*$/;
function isBasicASCII(str) {
    return IS_BASIC_ASCII.test(str);
}
const UNUSUAL_LINE_TERMINATORS = /[\u2028\u2029]/; // LINE SEPARATOR (LS) or PARAGRAPH SEPARATOR (PS)
function containsUnusualLineTerminators(str) {
    return UNUSUAL_LINE_TERMINATORS.test(str);
}
function isFullWidthCharacter(charCode) {
    // Do a cheap trick to better support wrapping of wide characters, treat them as 2 columns
    // http://jrgraphix.net/research/unicode_blocks.php
    //          2E80 - 2EFF   CJK Radicals Supplement
    //          2F00 - 2FDF   Kangxi Radicals
    //          2FF0 - 2FFF   Ideographic Description Characters
    //          3000 - 303F   CJK Symbols and Punctuation
    //          3040 - 309F   Hiragana
    //          30A0 - 30FF   Katakana
    //          3100 - 312F   Bopomofo
    //          3130 - 318F   Hangul Compatibility Jamo
    //          3190 - 319F   Kanbun
    //          31A0 - 31BF   Bopomofo Extended
    //          31F0 - 31FF   Katakana Phonetic Extensions
    //          3200 - 32FF   Enclosed CJK Letters and Months
    //          3300 - 33FF   CJK Compatibility
    //          3400 - 4DBF   CJK Unified Ideographs Extension A
    //          4DC0 - 4DFF   Yijing Hexagram Symbols
    //          4E00 - 9FFF   CJK Unified Ideographs
    //          A000 - A48F   Yi Syllables
    //          A490 - A4CF   Yi Radicals
    //          AC00 - D7AF   Hangul Syllables
    // [IGNORE] D800 - DB7F   High Surrogates
    // [IGNORE] DB80 - DBFF   High Private Use Surrogates
    // [IGNORE] DC00 - DFFF   Low Surrogates
    // [IGNORE] E000 - F8FF   Private Use Area
    //          F900 - FAFF   CJK Compatibility Ideographs
    // [IGNORE] FB00 - FB4F   Alphabetic Presentation Forms
    // [IGNORE] FB50 - FDFF   Arabic Presentation Forms-A
    // [IGNORE] FE00 - FE0F   Variation Selectors
    // [IGNORE] FE20 - FE2F   Combining Half Marks
    // [IGNORE] FE30 - FE4F   CJK Compatibility Forms
    // [IGNORE] FE50 - FE6F   Small Form Variants
    // [IGNORE] FE70 - FEFF   Arabic Presentation Forms-B
    //          FF00 - FFEF   Halfwidth and Fullwidth Forms
    //               [https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms]
    //               of which FF01 - FF5E fullwidth ASCII of 21 to 7E
    // [IGNORE]    and FF65 - FFDC halfwidth of Katakana and Hangul
    // [IGNORE] FFF0 - FFFF   Specials
    return charCode >= 0x2E80 && charCode <= 0xD7AF || charCode >= 0xF900 && charCode <= 0xFAFF || charCode >= 0xFF01 && charCode <= 0xFF5E;
}
function isEmojiImprecise(x) {
    return x >= 0x1F1E6 && x <= 0x1F1FF || x === 8986 || x === 8987 || x === 9200 || x === 9203 || x >= 9728 && x <= 10175 || x === 11088 || x === 11093 || x >= 127744 && x <= 128591 || x >= 128640 && x <= 128764 || x >= 128992 && x <= 129008 || x >= 129280 && x <= 129535 || x >= 129648 && x <= 129782;
}
const UTF8_BOM_CHARACTER = String.fromCharCode(65279 /* CharCode.UTF8_BOM */ );
function startsWithUTF8BOM(str) {
    return !!(str && str.length > 0 && str.charCodeAt(0) === 65279 /* CharCode.UTF8_BOM */ );
}
function containsUppercaseCharacter(target, ignoreEscapedChars = false) {
    if (!target) {
        return false;
    }
    if (ignoreEscapedChars) {
        target = target.replace(/\\./g, '');
    }
    return target.toLowerCase() !== target;
}
function singleLetterHash(n) {
    const LETTERS_CNT = 90 /* CharCode.Z */  - 65 /* CharCode.A */  + 1;
    n = n % (2 * LETTERS_CNT);
    if (n < LETTERS_CNT) {
        return String.fromCharCode(97 /* CharCode.a */  + n);
    }
    return String.fromCharCode(65 /* CharCode.A */  + n - LETTERS_CNT);
}
function breakBetweenGraphemeBreakType(breakTypeA, breakTypeB) {
    // http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules
    // !!! Let's make the common case a bit faster
    if (breakTypeA === 0 /* GraphemeBreakType.Other */ ) {
        // see https://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakTest-13.0.0d10.html#table
        return breakTypeB !== 5 /* GraphemeBreakType.Extend */  && breakTypeB !== 7 /* GraphemeBreakType.SpacingMark */ ;
    }
    // Do not break between a CR and LF. Otherwise, break before and after controls.
    // GB3                                        CR × LF
    // GB4                       (Control | CR | LF) ÷
    // GB5                                           ÷ (Control | CR | LF)
    if (breakTypeA === 2 /* GraphemeBreakType.CR */ ) {
        if (breakTypeB === 3 /* GraphemeBreakType.LF */ ) {
            return false; // GB3
        }
    }
    if (breakTypeA === 4 /* GraphemeBreakType.Control */  || breakTypeA === 2 /* GraphemeBreakType.CR */  || breakTypeA === 3 /* GraphemeBreakType.LF */ ) {
        return true; // GB4
    }
    if (breakTypeB === 4 /* GraphemeBreakType.Control */  || breakTypeB === 2 /* GraphemeBreakType.CR */  || breakTypeB === 3 /* GraphemeBreakType.LF */ ) {
        return true; // GB5
    }
    // Do not break Hangul syllable sequences.
    // GB6                                         L × (L | V | LV | LVT)
    // GB7                                  (LV | V) × (V | T)
    // GB8                                 (LVT | T) × T
    if (breakTypeA === 8 /* GraphemeBreakType.L */ ) {
        if (breakTypeB === 8 /* GraphemeBreakType.L */  || breakTypeB === 9 /* GraphemeBreakType.V */  || breakTypeB === 11 /* GraphemeBreakType.LV */  || breakTypeB === 12 /* GraphemeBreakType.LVT */ ) {
            return false; // GB6
        }
    }
    if (breakTypeA === 11 /* GraphemeBreakType.LV */  || breakTypeA === 9 /* GraphemeBreakType.V */ ) {
        if (breakTypeB === 9 /* GraphemeBreakType.V */  || breakTypeB === 10 /* GraphemeBreakType.T */ ) {
            return false; // GB7
        }
    }
    if (breakTypeA === 12 /* GraphemeBreakType.LVT */  || breakTypeA === 10 /* GraphemeBreakType.T */ ) {
        if (breakTypeB === 10 /* GraphemeBreakType.T */ ) {
            return false; // GB8
        }
    }
    // Do not break before extending characters or ZWJ.
    // GB9                                           × (Extend | ZWJ)
    if (breakTypeB === 5 /* GraphemeBreakType.Extend */  || breakTypeB === 13 /* GraphemeBreakType.ZWJ */ ) {
        return false; // GB9
    }
    // The GB9a and GB9b rules only apply to extended grapheme clusters:
    // Do not break before SpacingMarks, or after Prepend characters.
    // GB9a                                          × SpacingMark
    // GB9b                                  Prepend ×
    if (breakTypeB === 7 /* GraphemeBreakType.SpacingMark */ ) {
        return false; // GB9a
    }
    if (breakTypeA === 1 /* GraphemeBreakType.Prepend */ ) {
        return false; // GB9b
    }
    // Do not break within emoji modifier sequences or emoji zwj sequences.
    // GB11    \p{Extended_Pictographic} Extend* ZWJ × \p{Extended_Pictographic}
    if (breakTypeA === 13 /* GraphemeBreakType.ZWJ */  && breakTypeB === 14 /* GraphemeBreakType.Extended_Pictographic */ ) {
        // Note: we are not implementing the rule entirely here to avoid introducing states
        return false; // GB11
    }
    // GB12                          sot (RI RI)* RI × RI
    // GB13                        [^RI] (RI RI)* RI × RI
    if (breakTypeA === 6 /* GraphemeBreakType.Regional_Indicator */  && breakTypeB === 6 /* GraphemeBreakType.Regional_Indicator */ ) {
        // Note: we are not implementing the rule entirely here to avoid introducing states
        return false; // GB12 & GB13
    }
    // GB999                                     Any ÷ Any
    return true;
}
class GraphemeBreakTree {
    static{
        this._INSTANCE = null;
    }
    static getInstance() {
        if (!GraphemeBreakTree._INSTANCE) {
            GraphemeBreakTree._INSTANCE = new GraphemeBreakTree();
        }
        return GraphemeBreakTree._INSTANCE;
    }
    constructor(){
        this._data = getGraphemeBreakRawData();
    }
    getGraphemeBreakType(codePoint) {
        // !!! Let's make 7bit ASCII a bit faster: 0..31
        if (codePoint < 32) {
            if (codePoint === 10 /* CharCode.LineFeed */ ) {
                return 3 /* GraphemeBreakType.LF */ ;
            }
            if (codePoint === 13 /* CharCode.CarriageReturn */ ) {
                return 2 /* GraphemeBreakType.CR */ ;
            }
            return 4 /* GraphemeBreakType.Control */ ;
        }
        // !!! Let's make 7bit ASCII a bit faster: 32..126
        if (codePoint < 127) {
            return 0 /* GraphemeBreakType.Other */ ;
        }
        const data = this._data;
        const nodeCount = data.length / 3;
        let nodeIndex = 1;
        while(nodeIndex <= nodeCount){
            if (codePoint < data[3 * nodeIndex]) {
                // go left
                nodeIndex = 2 * nodeIndex;
            } else if (codePoint > data[3 * nodeIndex + 1]) {
                // go right
                nodeIndex = 2 * nodeIndex + 1;
            } else {
                // hit
                return data[3 * nodeIndex + 2];
            }
        }
        return 0 /* GraphemeBreakType.Other */ ;
    }
}
function getGraphemeBreakRawData() {
    // generated using https://github.com/alexdima/unicode-utils/blob/main/grapheme-break.js
    return JSON.parse('[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]');
}
function getLeftDeleteOffset(offset, str) {
    if (offset === 0) {
        return 0;
    }
    // Try to delete emoji part.
    const emojiOffset = getOffsetBeforeLastEmojiComponent(offset, str);
    if (emojiOffset !== undefined) {
        return emojiOffset;
    }
    // Otherwise, just skip a single code point.
    const iterator = new CodePointIterator(str, offset);
    iterator.prevCodePoint();
    return iterator.offset;
}
function getOffsetBeforeLastEmojiComponent(initialOffset, str) {
    // See https://www.unicode.org/reports/tr51/tr51-14.html#EBNF_and_Regex for the
    // structure of emojis.
    const iterator = new CodePointIterator(str, initialOffset);
    let codePoint = iterator.prevCodePoint();
    // Skip modifiers
    while(isEmojiModifier(codePoint) || codePoint === 65039 /* CodePoint.emojiVariantSelector */  || codePoint === 8419 /* CodePoint.enclosingKeyCap */ ){
        if (iterator.offset === 0) {
            // Cannot skip modifier, no preceding emoji base.
            return undefined;
        }
        codePoint = iterator.prevCodePoint();
    }
    // Expect base emoji
    if (!isEmojiImprecise(codePoint)) {
        // Unexpected code point, not a valid emoji.
        return undefined;
    }
    let resultOffset = iterator.offset;
    if (resultOffset > 0) {
        // Skip optional ZWJ code points that combine multiple emojis.
        // In theory, we should check if that ZWJ actually combines multiple emojis
        // to prevent deleting ZWJs in situations we didn't account for.
        const optionalZwjCodePoint = iterator.prevCodePoint();
        if (optionalZwjCodePoint === 8205 /* CodePoint.zwj */ ) {
            resultOffset = iterator.offset;
        }
    }
    return resultOffset;
}
function isEmojiModifier(codePoint) {
    return 0x1F3FB <= codePoint && codePoint <= 0x1F3FF;
}
const noBreakWhitespace = '\xa0';
class AmbiguousCharacters {
    static{
        this.ambiguousCharacterData = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lazy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Lazy"](()=>{
            // Generated using https://github.com/hediet/vscode-unicode-data
            // Stored as key1, value1, key2, value2, ...
            return JSON.parse('{\"_common\":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,8218,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,8242,96,1370,96,1523,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71922,67,71913,67,65315,67,8557,67,8450,67,8493,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71919,87,71910,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,66293,90,71909,90,65338,90,8484,90,8488,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65297,49,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],\"_default\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"cs\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"de\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"es\":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"fr\":[65374,126,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"it\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"ja\":[8211,45,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65292,44,65307,59],\"ko\":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"pl\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"pt-BR\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"qps-ploc\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"ru\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"tr\":[160,32,8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"zh-hans\":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41],\"zh-hant\":[8211,45,65374,126,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65307,59]}');
        });
    }
    static{
        this.cache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$cache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LRUCachedFunction"]({
            getCacheKey: JSON.stringify
        }, (locales)=>{
            function arrayToMap(arr) {
                const result = new Map();
                for(let i = 0; i < arr.length; i += 2){
                    result.set(arr[i], arr[i + 1]);
                }
                return result;
            }
            function mergeMaps(map1, map2) {
                const result = new Map(map1);
                for (const [key, value] of map2){
                    result.set(key, value);
                }
                return result;
            }
            function intersectMaps(map1, map2) {
                if (!map1) {
                    return map2;
                }
                const result = new Map();
                for (const [key, value] of map1){
                    if (map2.has(key)) {
                        result.set(key, value);
                    }
                }
                return result;
            }
            const data = this.ambiguousCharacterData.value;
            let filteredLocales = locales.filter((l)=>!l.startsWith('_') && l in data);
            if (filteredLocales.length === 0) {
                filteredLocales = [
                    '_default'
                ];
            }
            let languageSpecificMap = undefined;
            for (const locale of filteredLocales){
                const map = arrayToMap(data[locale]);
                languageSpecificMap = intersectMaps(languageSpecificMap, map);
            }
            const commonMap = arrayToMap(data['_common']);
            const map = mergeMaps(commonMap, languageSpecificMap);
            return new AmbiguousCharacters(map);
        });
    }
    static getInstance(locales) {
        return AmbiguousCharacters.cache.get(Array.from(locales));
    }
    static{
        this._locales = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lazy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Lazy"](()=>Object.keys(AmbiguousCharacters.ambiguousCharacterData.value).filter((k)=>!k.startsWith('_')));
    }
    static getLocales() {
        return AmbiguousCharacters._locales.value;
    }
    constructor(confusableDictionary){
        this.confusableDictionary = confusableDictionary;
    }
    isAmbiguous(codePoint) {
        return this.confusableDictionary.has(codePoint);
    }
    /**
     * Returns the non basic ASCII code point that the given code point can be confused,
     * or undefined if such code point does note exist.
     */ getPrimaryConfusable(codePoint) {
        return this.confusableDictionary.get(codePoint);
    }
    getConfusableCodePoints() {
        return new Set(this.confusableDictionary.keys());
    }
}
class InvisibleCharacters {
    static getRawData() {
        // Generated using https://github.com/hediet/vscode-unicode-data
        return JSON.parse('[9,10,11,12,13,32,127,160,173,847,1564,4447,4448,6068,6069,6155,6156,6157,6158,7355,7356,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8234,8235,8236,8237,8238,8239,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,10240,12288,12644,65024,65025,65026,65027,65028,65029,65030,65031,65032,65033,65034,65035,65036,65037,65038,65039,65279,65440,65520,65521,65522,65523,65524,65525,65526,65527,65528,65532,78844,119155,119156,119157,119158,119159,119160,119161,119162,917504,917505,917506,917507,917508,917509,917510,917511,917512,917513,917514,917515,917516,917517,917518,917519,917520,917521,917522,917523,917524,917525,917526,917527,917528,917529,917530,917531,917532,917533,917534,917535,917536,917537,917538,917539,917540,917541,917542,917543,917544,917545,917546,917547,917548,917549,917550,917551,917552,917553,917554,917555,917556,917557,917558,917559,917560,917561,917562,917563,917564,917565,917566,917567,917568,917569,917570,917571,917572,917573,917574,917575,917576,917577,917578,917579,917580,917581,917582,917583,917584,917585,917586,917587,917588,917589,917590,917591,917592,917593,917594,917595,917596,917597,917598,917599,917600,917601,917602,917603,917604,917605,917606,917607,917608,917609,917610,917611,917612,917613,917614,917615,917616,917617,917618,917619,917620,917621,917622,917623,917624,917625,917626,917627,917628,917629,917630,917631,917760,917761,917762,917763,917764,917765,917766,917767,917768,917769,917770,917771,917772,917773,917774,917775,917776,917777,917778,917779,917780,917781,917782,917783,917784,917785,917786,917787,917788,917789,917790,917791,917792,917793,917794,917795,917796,917797,917798,917799,917800,917801,917802,917803,917804,917805,917806,917807,917808,917809,917810,917811,917812,917813,917814,917815,917816,917817,917818,917819,917820,917821,917822,917823,917824,917825,917826,917827,917828,917829,917830,917831,917832,917833,917834,917835,917836,917837,917838,917839,917840,917841,917842,917843,917844,917845,917846,917847,917848,917849,917850,917851,917852,917853,917854,917855,917856,917857,917858,917859,917860,917861,917862,917863,917864,917865,917866,917867,917868,917869,917870,917871,917872,917873,917874,917875,917876,917877,917878,917879,917880,917881,917882,917883,917884,917885,917886,917887,917888,917889,917890,917891,917892,917893,917894,917895,917896,917897,917898,917899,917900,917901,917902,917903,917904,917905,917906,917907,917908,917909,917910,917911,917912,917913,917914,917915,917916,917917,917918,917919,917920,917921,917922,917923,917924,917925,917926,917927,917928,917929,917930,917931,917932,917933,917934,917935,917936,917937,917938,917939,917940,917941,917942,917943,917944,917945,917946,917947,917948,917949,917950,917951,917952,917953,917954,917955,917956,917957,917958,917959,917960,917961,917962,917963,917964,917965,917966,917967,917968,917969,917970,917971,917972,917973,917974,917975,917976,917977,917978,917979,917980,917981,917982,917983,917984,917985,917986,917987,917988,917989,917990,917991,917992,917993,917994,917995,917996,917997,917998,917999]');
    }
    static{
        this._data = undefined;
    }
    static getData() {
        if (!this._data) {
            this._data = new Set(InvisibleCharacters.getRawData());
        }
        return this._data;
    }
    static isInvisibleCharacter(codePoint) {
        return InvisibleCharacters.getData().has(codePoint);
    }
    static get codePoints() {
        return InvisibleCharacters.getData();
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/keybindings.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "KeyCodeChord": (()=>KeyCodeChord),
    "Keybinding": (()=>Keybinding),
    "ResolvedChord": (()=>ResolvedChord),
    "ResolvedKeybinding": (()=>ResolvedKeybinding),
    "ScanCodeChord": (()=>ScanCodeChord),
    "createSimpleKeybinding": (()=>createSimpleKeybinding),
    "decodeKeybinding": (()=>decodeKeybinding)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/errors.js [app-client] (ecmascript)");
;
function decodeKeybinding(keybinding, OS) {
    if (typeof keybinding === 'number') {
        if (keybinding === 0) {
            return null;
        }
        const firstChord = (keybinding & 0x0000FFFF) >>> 0;
        const secondChord = (keybinding & 0xFFFF0000) >>> 16;
        if (secondChord !== 0) {
            return new Keybinding([
                createSimpleKeybinding(firstChord, OS),
                createSimpleKeybinding(secondChord, OS)
            ]);
        }
        return new Keybinding([
            createSimpleKeybinding(firstChord, OS)
        ]);
    } else {
        const chords = [];
        for(let i = 0; i < keybinding.length; i++){
            chords.push(createSimpleKeybinding(keybinding[i], OS));
        }
        return new Keybinding(chords);
    }
}
function createSimpleKeybinding(keybinding, OS) {
    const ctrlCmd = keybinding & 2048 /* BinaryKeybindingsMask.CtrlCmd */  ? true : false;
    const winCtrl = keybinding & 256 /* BinaryKeybindingsMask.WinCtrl */  ? true : false;
    const ctrlKey = OS === 2 /* OperatingSystem.Macintosh */  ? winCtrl : ctrlCmd;
    const shiftKey = keybinding & 1024 /* BinaryKeybindingsMask.Shift */  ? true : false;
    const altKey = keybinding & 512 /* BinaryKeybindingsMask.Alt */  ? true : false;
    const metaKey = OS === 2 /* OperatingSystem.Macintosh */  ? ctrlCmd : winCtrl;
    const keyCode = keybinding & 255 /* BinaryKeybindingsMask.KeyCode */ ;
    return new KeyCodeChord(ctrlKey, shiftKey, altKey, metaKey, keyCode);
}
class KeyCodeChord {
    constructor(ctrlKey, shiftKey, altKey, metaKey, keyCode){
        this.ctrlKey = ctrlKey;
        this.shiftKey = shiftKey;
        this.altKey = altKey;
        this.metaKey = metaKey;
        this.keyCode = keyCode;
    }
    equals(other) {
        return other instanceof KeyCodeChord && this.ctrlKey === other.ctrlKey && this.shiftKey === other.shiftKey && this.altKey === other.altKey && this.metaKey === other.metaKey && this.keyCode === other.keyCode;
    }
    isModifierKey() {
        return this.keyCode === 0 /* KeyCode.Unknown */  || this.keyCode === 5 /* KeyCode.Ctrl */  || this.keyCode === 57 /* KeyCode.Meta */  || this.keyCode === 6 /* KeyCode.Alt */  || this.keyCode === 4 /* KeyCode.Shift */ ;
    }
    /**
     * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?
     */ isDuplicateModifierCase() {
        return this.ctrlKey && this.keyCode === 5 /* KeyCode.Ctrl */  || this.shiftKey && this.keyCode === 4 /* KeyCode.Shift */  || this.altKey && this.keyCode === 6 /* KeyCode.Alt */  || this.metaKey && this.keyCode === 57 /* KeyCode.Meta */ ;
    }
}
class ScanCodeChord {
    constructor(ctrlKey, shiftKey, altKey, metaKey, scanCode){
        this.ctrlKey = ctrlKey;
        this.shiftKey = shiftKey;
        this.altKey = altKey;
        this.metaKey = metaKey;
        this.scanCode = scanCode;
    }
    /**
     * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?
     */ isDuplicateModifierCase() {
        return this.ctrlKey && (this.scanCode === 157 /* ScanCode.ControlLeft */  || this.scanCode === 161 /* ScanCode.ControlRight */ ) || this.shiftKey && (this.scanCode === 158 /* ScanCode.ShiftLeft */  || this.scanCode === 162 /* ScanCode.ShiftRight */ ) || this.altKey && (this.scanCode === 159 /* ScanCode.AltLeft */  || this.scanCode === 163 /* ScanCode.AltRight */ ) || this.metaKey && (this.scanCode === 160 /* ScanCode.MetaLeft */  || this.scanCode === 164 /* ScanCode.MetaRight */ );
    }
}
class Keybinding {
    constructor(chords){
        if (chords.length === 0) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["illegalArgument"])(`chords`);
        }
        this.chords = chords;
    }
}
class ResolvedChord {
    constructor(ctrlKey, shiftKey, altKey, metaKey, keyLabel, keyAriaLabel){
        this.ctrlKey = ctrlKey;
        this.shiftKey = shiftKey;
        this.altKey = altKey;
        this.metaKey = metaKey;
        this.keyLabel = keyLabel;
        this.keyAriaLabel = keyAriaLabel;
    }
}
class ResolvedKeybinding {
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/symbols.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ /**
 * Can be passed into the Delayed to defer using a microtask
 * */ __turbopack_context__.s({
    "MicrotaskDelay": (()=>MicrotaskDelay)
});
const MicrotaskDelay = Symbol('MicrotaskDelay');
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/async.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "AbstractIdleValue": (()=>AbstractIdleValue),
    "AsyncIterableObject": (()=>AsyncIterableObject),
    "CancelableAsyncIterableObject": (()=>CancelableAsyncIterableObject),
    "DeferredPromise": (()=>DeferredPromise),
    "Delayer": (()=>Delayer),
    "GlobalIdleValue": (()=>GlobalIdleValue),
    "IntervalTimer": (()=>IntervalTimer),
    "Promises": (()=>Promises),
    "RunOnceScheduler": (()=>RunOnceScheduler),
    "ThrottledDelayer": (()=>ThrottledDelayer),
    "Throttler": (()=>Throttler),
    "TimeoutTimer": (()=>TimeoutTimer),
    "_runWhenIdle": (()=>_runWhenIdle),
    "createCancelableAsyncIterable": (()=>createCancelableAsyncIterable),
    "createCancelablePromise": (()=>createCancelablePromise),
    "disposableTimeout": (()=>disposableTimeout),
    "first": (()=>first),
    "isThenable": (()=>isThenable),
    "raceCancellation": (()=>raceCancellation),
    "runWhenGlobalIdle": (()=>runWhenGlobalIdle),
    "timeout": (()=>timeout)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$cancellation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/cancellation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/errors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/event.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lifecycle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$symbols$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/symbols.js [app-client] (ecmascript)");
;
;
;
;
;
;
function isThenable(obj) {
    return !!obj && typeof obj.then === 'function';
}
function createCancelablePromise(callback) {
    const source = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$cancellation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CancellationTokenSource"]();
    const thenable = callback(source.token);
    const promise = new Promise((resolve, reject)=>{
        const subscription = source.token.onCancellationRequested(()=>{
            subscription.dispose();
            reject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CancellationError"]());
        });
        Promise.resolve(thenable).then((value)=>{
            subscription.dispose();
            source.dispose();
            resolve(value);
        }, (err)=>{
            subscription.dispose();
            source.dispose();
            reject(err);
        });
    });
    return new class {
        cancel() {
            source.cancel();
            source.dispose();
        }
        then(resolve, reject) {
            return promise.then(resolve, reject);
        }
        catch(reject) {
            return this.then(undefined, reject);
        }
        finally(onfinally) {
            return promise.finally(onfinally);
        }
    };
}
function raceCancellation(promise, token, defaultValue) {
    return new Promise((resolve, reject)=>{
        const ref = token.onCancellationRequested(()=>{
            ref.dispose();
            resolve(defaultValue);
        });
        promise.then(resolve, reject).finally(()=>ref.dispose());
    });
}
class Throttler {
    constructor(){
        this.isDisposed = false;
        this.activePromise = null;
        this.queuedPromise = null;
        this.queuedPromiseFactory = null;
    }
    queue(promiseFactory) {
        if (this.isDisposed) {
            return Promise.reject(new Error('Throttler is disposed'));
        }
        if (this.activePromise) {
            this.queuedPromiseFactory = promiseFactory;
            if (!this.queuedPromise) {
                const onComplete = ()=>{
                    this.queuedPromise = null;
                    if (this.isDisposed) {
                        return;
                    }
                    const result = this.queue(this.queuedPromiseFactory);
                    this.queuedPromiseFactory = null;
                    return result;
                };
                this.queuedPromise = new Promise((resolve)=>{
                    this.activePromise.then(onComplete, onComplete).then(resolve);
                });
            }
            return new Promise((resolve, reject)=>{
                this.queuedPromise.then(resolve, reject);
            });
        }
        this.activePromise = promiseFactory();
        return new Promise((resolve, reject)=>{
            this.activePromise.then((result)=>{
                this.activePromise = null;
                resolve(result);
            }, (err)=>{
                this.activePromise = null;
                reject(err);
            });
        });
    }
    dispose() {
        this.isDisposed = true;
    }
}
const timeoutDeferred = (timeout, fn)=>{
    let scheduled = true;
    const handle = setTimeout(()=>{
        scheduled = false;
        fn();
    }, timeout);
    return {
        isTriggered: ()=>scheduled,
        dispose: ()=>{
            clearTimeout(handle);
            scheduled = false;
        }
    };
};
const microtaskDeferred = (fn)=>{
    let scheduled = true;
    queueMicrotask(()=>{
        if (scheduled) {
            scheduled = false;
            fn();
        }
    });
    return {
        isTriggered: ()=>scheduled,
        dispose: ()=>{
            scheduled = false;
        }
    };
};
class Delayer {
    constructor(defaultDelay){
        this.defaultDelay = defaultDelay;
        this.deferred = null;
        this.completionPromise = null;
        this.doResolve = null;
        this.doReject = null;
        this.task = null;
    }
    trigger(task, delay = this.defaultDelay) {
        this.task = task;
        this.cancelTimeout();
        if (!this.completionPromise) {
            this.completionPromise = new Promise((resolve, reject)=>{
                this.doResolve = resolve;
                this.doReject = reject;
            }).then(()=>{
                this.completionPromise = null;
                this.doResolve = null;
                if (this.task) {
                    const task = this.task;
                    this.task = null;
                    return task();
                }
                return undefined;
            });
        }
        const fn = ()=>{
            this.deferred = null;
            this.doResolve?.(null);
        };
        this.deferred = delay === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$symbols$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MicrotaskDelay"] ? microtaskDeferred(fn) : timeoutDeferred(delay, fn);
        return this.completionPromise;
    }
    isTriggered() {
        return !!this.deferred?.isTriggered();
    }
    cancel() {
        this.cancelTimeout();
        if (this.completionPromise) {
            this.doReject?.(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CancellationError"]());
            this.completionPromise = null;
        }
    }
    cancelTimeout() {
        this.deferred?.dispose();
        this.deferred = null;
    }
    dispose() {
        this.cancel();
    }
}
class ThrottledDelayer {
    constructor(defaultDelay){
        this.delayer = new Delayer(defaultDelay);
        this.throttler = new Throttler();
    }
    trigger(promiseFactory, delay) {
        return this.delayer.trigger(()=>this.throttler.queue(promiseFactory), delay);
    }
    cancel() {
        this.delayer.cancel();
    }
    dispose() {
        this.delayer.dispose();
        this.throttler.dispose();
    }
}
function timeout(millis, token) {
    if (!token) {
        return createCancelablePromise((token)=>timeout(millis, token));
    }
    return new Promise((resolve, reject)=>{
        const handle = setTimeout(()=>{
            disposable.dispose();
            resolve();
        }, millis);
        const disposable = token.onCancellationRequested(()=>{
            clearTimeout(handle);
            disposable.dispose();
            reject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CancellationError"]());
        });
    });
}
function disposableTimeout(handler, timeout = 0, store) {
    const timer = setTimeout(()=>{
        handler();
        if (store) {
            disposable.dispose();
        }
    }, timeout);
    const disposable = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toDisposable"])(()=>{
        clearTimeout(timer);
        store?.deleteAndLeak(disposable);
    });
    store?.add(disposable);
    return disposable;
}
function first(promiseFactories, shouldStop = (t)=>!!t, defaultValue = null) {
    let index = 0;
    const len = promiseFactories.length;
    const loop = ()=>{
        if (index >= len) {
            return Promise.resolve(defaultValue);
        }
        const factory = promiseFactories[index++];
        const promise = Promise.resolve(factory());
        return promise.then((result)=>{
            if (shouldStop(result)) {
                return Promise.resolve(result);
            }
            return loop();
        });
    };
    return loop();
}
class TimeoutTimer {
    constructor(runner, timeout){
        this._isDisposed = false;
        this._token = -1;
        if (typeof runner === 'function' && typeof timeout === 'number') {
            this.setIfNotSet(runner, timeout);
        }
    }
    dispose() {
        this.cancel();
        this._isDisposed = true;
    }
    cancel() {
        if (this._token !== -1) {
            clearTimeout(this._token);
            this._token = -1;
        }
    }
    cancelAndSet(runner, timeout) {
        if (this._isDisposed) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BugIndicatingError"](`Calling 'cancelAndSet' on a disposed TimeoutTimer`);
        }
        this.cancel();
        this._token = setTimeout(()=>{
            this._token = -1;
            runner();
        }, timeout);
    }
    setIfNotSet(runner, timeout) {
        if (this._isDisposed) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BugIndicatingError"](`Calling 'setIfNotSet' on a disposed TimeoutTimer`);
        }
        if (this._token !== -1) {
            // timer is already set
            return;
        }
        this._token = setTimeout(()=>{
            this._token = -1;
            runner();
        }, timeout);
    }
}
class IntervalTimer {
    constructor(){
        this.disposable = undefined;
        this.isDisposed = false;
    }
    cancel() {
        this.disposable?.dispose();
        this.disposable = undefined;
    }
    cancelAndSet(runner, interval, context = globalThis) {
        if (this.isDisposed) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BugIndicatingError"](`Calling 'cancelAndSet' on a disposed IntervalTimer`);
        }
        this.cancel();
        const handle = context.setInterval(()=>{
            runner();
        }, interval);
        this.disposable = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toDisposable"])(()=>{
            context.clearInterval(handle);
            this.disposable = undefined;
        });
    }
    dispose() {
        this.cancel();
        this.isDisposed = true;
    }
}
class RunOnceScheduler {
    constructor(runner, delay){
        this.timeoutToken = -1;
        this.runner = runner;
        this.timeout = delay;
        this.timeoutHandler = this.onTimeout.bind(this);
    }
    /**
     * Dispose RunOnceScheduler
     */ dispose() {
        this.cancel();
        this.runner = null;
    }
    /**
     * Cancel current scheduled runner (if any).
     */ cancel() {
        if (this.isScheduled()) {
            clearTimeout(this.timeoutToken);
            this.timeoutToken = -1;
        }
    }
    /**
     * Cancel previous runner (if any) & schedule a new runner.
     */ schedule(delay = this.timeout) {
        this.cancel();
        this.timeoutToken = setTimeout(this.timeoutHandler, delay);
    }
    get delay() {
        return this.timeout;
    }
    set delay(value) {
        this.timeout = value;
    }
    /**
     * Returns true if scheduled.
     */ isScheduled() {
        return this.timeoutToken !== -1;
    }
    onTimeout() {
        this.timeoutToken = -1;
        if (this.runner) {
            this.doRun();
        }
    }
    doRun() {
        this.runner?.();
    }
}
let runWhenGlobalIdle;
let _runWhenIdle;
(function() {
    if (typeof globalThis.requestIdleCallback !== 'function' || typeof globalThis.cancelIdleCallback !== 'function') {
        _runWhenIdle = (_targetWindow, runner)=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setTimeout0"])(()=>{
                if (disposed) {
                    return;
                }
                const end = Date.now() + 15; // one frame at 64fps
                const deadline = {
                    didTimeout: true,
                    timeRemaining () {
                        return Math.max(0, end - Date.now());
                    }
                };
                runner(Object.freeze(deadline));
            });
            let disposed = false;
            return {
                dispose () {
                    if (disposed) {
                        return;
                    }
                    disposed = true;
                }
            };
        };
    } else {
        _runWhenIdle = (targetWindow, runner, timeout)=>{
            const handle = targetWindow.requestIdleCallback(runner, typeof timeout === 'number' ? {
                timeout
            } : undefined);
            let disposed = false;
            return {
                dispose () {
                    if (disposed) {
                        return;
                    }
                    disposed = true;
                    targetWindow.cancelIdleCallback(handle);
                }
            };
        };
    }
    runWhenGlobalIdle = (runner)=>_runWhenIdle(globalThis, runner);
})();
class AbstractIdleValue {
    constructor(targetWindow, executor){
        this._didRun = false;
        this._executor = ()=>{
            try {
                this._value = executor();
            } catch (err) {
                this._error = err;
            } finally{
                this._didRun = true;
            }
        };
        this._handle = _runWhenIdle(targetWindow, ()=>this._executor());
    }
    dispose() {
        this._handle.dispose();
    }
    get value() {
        if (!this._didRun) {
            this._handle.dispose();
            this._executor();
        }
        if (this._error) {
            throw this._error;
        }
        return this._value;
    }
    get isInitialized() {
        return this._didRun;
    }
}
class GlobalIdleValue extends AbstractIdleValue {
    constructor(executor){
        super(globalThis, executor);
    }
}
class DeferredPromise {
    get isRejected() {
        return this.outcome?.outcome === 1 /* DeferredOutcome.Rejected */ ;
    }
    get isSettled() {
        return !!this.outcome;
    }
    constructor(){
        this.p = new Promise((c, e)=>{
            this.completeCallback = c;
            this.errorCallback = e;
        });
    }
    complete(value) {
        return new Promise((resolve)=>{
            this.completeCallback(value);
            this.outcome = {
                outcome: 0 /* DeferredOutcome.Resolved */ ,
                value
            };
            resolve();
        });
    }
    error(err) {
        return new Promise((resolve)=>{
            this.errorCallback(err);
            this.outcome = {
                outcome: 1 /* DeferredOutcome.Rejected */ ,
                value: err
            };
            resolve();
        });
    }
    cancel() {
        return this.error(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CancellationError"]());
    }
}
var Promises;
(function(Promises) {
    /**
     * A drop-in replacement for `Promise.all` with the only difference
     * that the method awaits every promise to either fulfill or reject.
     *
     * Similar to `Promise.all`, only the first error will be returned
     * if any.
     */ async function settled(promises) {
        let firstError = undefined;
        const result = await Promise.all(promises.map((promise)=>promise.then((value)=>value, (error)=>{
                if (!firstError) {
                    firstError = error;
                }
                return undefined; // do not rethrow so that other promises can settle
            })));
        if (typeof firstError !== 'undefined') {
            throw firstError;
        }
        return result; // cast is needed and protected by the `throw` above
    }
    Promises.settled = settled;
    /**
     * A helper to create a new `Promise<T>` with a body that is a promise
     * itself. By default, an error that raises from the async body will
     * end up as a unhandled rejection, so this utility properly awaits the
     * body and rejects the promise as a normal promise does without async
     * body.
     *
     * This method should only be used in rare cases where otherwise `async`
     * cannot be used (e.g. when callbacks are involved that require this).
     */ function withAsyncBody(bodyFn) {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise(async (resolve, reject)=>{
            try {
                await bodyFn(resolve, reject);
            } catch (error) {
                reject(error);
            }
        });
    }
    Promises.withAsyncBody = withAsyncBody;
})(Promises || (Promises = {}));
class AsyncIterableObject {
    static fromArray(items) {
        return new AsyncIterableObject((writer)=>{
            writer.emitMany(items);
        });
    }
    static fromPromise(promise) {
        return new AsyncIterableObject(async (emitter)=>{
            emitter.emitMany(await promise);
        });
    }
    static fromPromises(promises) {
        return new AsyncIterableObject(async (emitter)=>{
            await Promise.all(promises.map(async (p)=>emitter.emitOne(await p)));
        });
    }
    static merge(iterables) {
        return new AsyncIterableObject(async (emitter)=>{
            await Promise.all(iterables.map(async (iterable)=>{
                for await (const item of iterable){
                    emitter.emitOne(item);
                }
            }));
        });
    }
    static{
        this.EMPTY = AsyncIterableObject.fromArray([]);
    }
    constructor(executor, onReturn){
        this._state = 0 /* AsyncIterableSourceState.Initial */ ;
        this._results = [];
        this._error = null;
        this._onReturn = onReturn;
        this._onStateChanged = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Emitter"]();
        queueMicrotask(async ()=>{
            const writer = {
                emitOne: (item)=>this.emitOne(item),
                emitMany: (items)=>this.emitMany(items),
                reject: (error)=>this.reject(error)
            };
            try {
                await Promise.resolve(executor(writer));
                this.resolve();
            } catch (err) {
                this.reject(err);
            } finally{
                writer.emitOne = undefined;
                writer.emitMany = undefined;
                writer.reject = undefined;
            }
        });
    }
    [Symbol.asyncIterator]() {
        let i = 0;
        return {
            next: async ()=>{
                do {
                    if (this._state === 2 /* AsyncIterableSourceState.DoneError */ ) {
                        throw this._error;
                    }
                    if (i < this._results.length) {
                        return {
                            done: false,
                            value: this._results[i++]
                        };
                    }
                    if (this._state === 1 /* AsyncIterableSourceState.DoneOK */ ) {
                        return {
                            done: true,
                            value: undefined
                        };
                    }
                    await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Event"].toPromise(this._onStateChanged.event);
                }while (true)
            },
            return: async ()=>{
                this._onReturn?.();
                return {
                    done: true,
                    value: undefined
                };
            }
        };
    }
    static map(iterable, mapFn) {
        return new AsyncIterableObject(async (emitter)=>{
            for await (const item of iterable){
                emitter.emitOne(mapFn(item));
            }
        });
    }
    map(mapFn) {
        return AsyncIterableObject.map(this, mapFn);
    }
    static filter(iterable, filterFn) {
        return new AsyncIterableObject(async (emitter)=>{
            for await (const item of iterable){
                if (filterFn(item)) {
                    emitter.emitOne(item);
                }
            }
        });
    }
    filter(filterFn) {
        return AsyncIterableObject.filter(this, filterFn);
    }
    static coalesce(iterable) {
        return AsyncIterableObject.filter(iterable, (item)=>!!item);
    }
    coalesce() {
        return AsyncIterableObject.coalesce(this);
    }
    static async toPromise(iterable) {
        const result = [];
        for await (const item of iterable){
            result.push(item);
        }
        return result;
    }
    toPromise() {
        return AsyncIterableObject.toPromise(this);
    }
    /**
     * The value will be appended at the end.
     *
     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.
     */ emitOne(value) {
        if (this._state !== 0 /* AsyncIterableSourceState.Initial */ ) {
            return;
        }
        // it is important to add new values at the end,
        // as we may have iterators already running on the array
        this._results.push(value);
        this._onStateChanged.fire();
    }
    /**
     * The values will be appended at the end.
     *
     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.
     */ emitMany(values) {
        if (this._state !== 0 /* AsyncIterableSourceState.Initial */ ) {
            return;
        }
        // it is important to add new values at the end,
        // as we may have iterators already running on the array
        this._results = this._results.concat(values);
        this._onStateChanged.fire();
    }
    /**
     * Calling `resolve()` will mark the result array as complete.
     *
     * **NOTE** `resolve()` must be called, otherwise all consumers of this iterable will hang indefinitely, similar to a non-resolved promise.
     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.
     */ resolve() {
        if (this._state !== 0 /* AsyncIterableSourceState.Initial */ ) {
            return;
        }
        this._state = 1 /* AsyncIterableSourceState.DoneOK */ ;
        this._onStateChanged.fire();
    }
    /**
     * Writing an error will permanently invalidate this iterable.
     * The current users will receive an error thrown, as will all future users.
     *
     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.
     */ reject(error) {
        if (this._state !== 0 /* AsyncIterableSourceState.Initial */ ) {
            return;
        }
        this._state = 2 /* AsyncIterableSourceState.DoneError */ ;
        this._error = error;
        this._onStateChanged.fire();
    }
}
class CancelableAsyncIterableObject extends AsyncIterableObject {
    constructor(_source, executor){
        super(executor);
        this._source = _source;
    }
    cancel() {
        this._source.cancel();
    }
}
function createCancelableAsyncIterable(callback) {
    const source = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$cancellation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CancellationTokenSource"]();
    const innerIterable = callback(source.token);
    return new CancelableAsyncIterableObject(source, async (emitter)=>{
        const subscription = source.token.onCancellationRequested(()=>{
            subscription.dispose();
            source.dispose();
            emitter.reject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CancellationError"]());
        });
        try {
            for await (const item of innerIterable){
                if (source.token.isCancellationRequested) {
                    // canceled in the meantime
                    return;
                }
                emitter.emitOne(item);
            }
            subscription.dispose();
            source.dispose();
        } catch (err) {
            subscription.dispose();
            source.dispose();
            emitter.reject(err);
        }
    });
} //#endregion
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/network.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "COI": (()=>COI),
    "FileAccess": (()=>FileAccess),
    "RemoteAuthorities": (()=>RemoteAuthorities),
    "Schemas": (()=>Schemas),
    "VSCODE_AUTHORITY": (()=>VSCODE_AUTHORITY),
    "connectionTokenQueryName": (()=>connectionTokenQueryName),
    "matchesScheme": (()=>matchesScheme),
    "matchesSomeScheme": (()=>matchesSomeScheme)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/errors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/uri.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/path.js [app-client] (ecmascript)");
;
;
;
;
;
var Schemas;
(function(Schemas) {
    /**
     * A schema that is used for models that exist in memory
     * only and that have no correspondence on a server or such.
     */ Schemas.inMemory = 'inmemory';
    /**
     * A schema that is used for setting files
     */ Schemas.vscode = 'vscode';
    /**
     * A schema that is used for internal private files
     */ Schemas.internal = 'private';
    /**
     * A walk-through document.
     */ Schemas.walkThrough = 'walkThrough';
    /**
     * An embedded code snippet.
     */ Schemas.walkThroughSnippet = 'walkThroughSnippet';
    Schemas.http = 'http';
    Schemas.https = 'https';
    Schemas.file = 'file';
    Schemas.mailto = 'mailto';
    Schemas.untitled = 'untitled';
    Schemas.data = 'data';
    Schemas.command = 'command';
    Schemas.vscodeRemote = 'vscode-remote';
    Schemas.vscodeRemoteResource = 'vscode-remote-resource';
    Schemas.vscodeManagedRemoteResource = 'vscode-managed-remote-resource';
    Schemas.vscodeUserData = 'vscode-userdata';
    Schemas.vscodeCustomEditor = 'vscode-custom-editor';
    Schemas.vscodeNotebookCell = 'vscode-notebook-cell';
    Schemas.vscodeNotebookCellMetadata = 'vscode-notebook-cell-metadata';
    Schemas.vscodeNotebookCellMetadataDiff = 'vscode-notebook-cell-metadata-diff';
    Schemas.vscodeNotebookCellOutput = 'vscode-notebook-cell-output';
    Schemas.vscodeNotebookCellOutputDiff = 'vscode-notebook-cell-output-diff';
    Schemas.vscodeNotebookMetadata = 'vscode-notebook-metadata';
    Schemas.vscodeInteractiveInput = 'vscode-interactive-input';
    Schemas.vscodeSettings = 'vscode-settings';
    Schemas.vscodeWorkspaceTrust = 'vscode-workspace-trust';
    Schemas.vscodeTerminal = 'vscode-terminal';
    /** Scheme used for code blocks in chat. */ Schemas.vscodeChatCodeBlock = 'vscode-chat-code-block';
    /** Scheme used for LHS of code compare (aka diff) blocks in chat. */ Schemas.vscodeChatCodeCompareBlock = 'vscode-chat-code-compare-block';
    /** Scheme used for the chat input editor. */ Schemas.vscodeChatSesssion = 'vscode-chat-editor';
    /**
     * Scheme used internally for webviews that aren't linked to a resource (i.e. not custom editors)
     */ Schemas.webviewPanel = 'webview-panel';
    /**
     * Scheme used for loading the wrapper html and script in webviews.
     */ Schemas.vscodeWebview = 'vscode-webview';
    /**
     * Scheme used for extension pages
     */ Schemas.extension = 'extension';
    /**
     * Scheme used as a replacement of `file` scheme to load
     * files with our custom protocol handler (desktop only).
     */ Schemas.vscodeFileResource = 'vscode-file';
    /**
     * Scheme used for temporary resources
     */ Schemas.tmp = 'tmp';
    /**
     * Scheme used vs live share
     */ Schemas.vsls = 'vsls';
    /**
     * Scheme used for the Source Control commit input's text document
     */ Schemas.vscodeSourceControl = 'vscode-scm';
    /**
     * Scheme used for input box for creating comments.
     */ Schemas.commentsInput = 'comment';
    /**
     * Scheme used for special rendering of settings in the release notes
     */ Schemas.codeSetting = 'code-setting';
    /**
     * Scheme used for output panel resources
     */ Schemas.outputChannel = 'output';
})(Schemas || (Schemas = {}));
function matchesScheme(target, scheme) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].isUri(target)) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["equalsIgnoreCase"])(target.scheme, scheme);
    } else {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["startsWithIgnoreCase"])(target, scheme + ':');
    }
}
function matchesSomeScheme(target, ...schemes) {
    return schemes.some((scheme)=>matchesScheme(target, scheme));
}
const connectionTokenQueryName = 'tkn';
class RemoteAuthoritiesImpl {
    constructor(){
        this._hosts = Object.create(null);
        this._ports = Object.create(null);
        this._connectionTokens = Object.create(null);
        this._preferredWebSchema = 'http';
        this._delegate = null;
        this._serverRootPath = '/';
    }
    setPreferredWebSchema(schema) {
        this._preferredWebSchema = schema;
    }
    get _remoteResourcesPath() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].join(this._serverRootPath, Schemas.vscodeRemoteResource);
    }
    rewrite(uri) {
        if (this._delegate) {
            try {
                return this._delegate(uri);
            } catch (err) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["onUnexpectedError"])(err);
                return uri;
            }
        }
        const authority = uri.authority;
        let host = this._hosts[authority];
        if (host && host.indexOf(':') !== -1 && host.indexOf('[') === -1) {
            host = `[${host}]`;
        }
        const port = this._ports[authority];
        const connectionToken = this._connectionTokens[authority];
        let query = `path=${encodeURIComponent(uri.path)}`;
        if (typeof connectionToken === 'string') {
            query += `&${connectionTokenQueryName}=${encodeURIComponent(connectionToken)}`;
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].from({
            scheme: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWeb"] ? this._preferredWebSchema : Schemas.vscodeRemoteResource,
            authority: `${host}:${port}`,
            path: this._remoteResourcesPath,
            query
        });
    }
}
const RemoteAuthorities = new RemoteAuthoritiesImpl();
const VSCODE_AUTHORITY = 'vscode-app';
class FileAccessImpl {
    static{
        this.FALLBACK_AUTHORITY = VSCODE_AUTHORITY;
    }
    /**
     * Returns a URI to use in contexts where the browser is responsible
     * for loading (e.g. fetch()) or when used within the DOM.
     *
     * **Note:** use `dom.ts#asCSSUrl` whenever the URL is to be used in CSS context.
     */ asBrowserUri(resourcePath) {
        // ESM-comment-begin
        // 		const uri = this.toUri(resourcePath, require);
        // ESM-comment-end
        // ESM-uncomment-begin
        const uri = this.toUri(resourcePath);
        // ESM-uncomment-end
        return this.uriToBrowserUri(uri);
    }
    /**
     * Returns a URI to use in contexts where the browser is responsible
     * for loading (e.g. fetch()) or when used within the DOM.
     *
     * **Note:** use `dom.ts#asCSSUrl` whenever the URL is to be used in CSS context.
     */ uriToBrowserUri(uri) {
        // Handle remote URIs via `RemoteAuthorities`
        if (uri.scheme === Schemas.vscodeRemote) {
            return RemoteAuthorities.rewrite(uri);
        }
        // Convert to `vscode-file` resource..
        if (// ...only ever for `file` resources
        uri.scheme === Schemas.file && (// ...and we run in native environments
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNative"] || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["webWorkerOrigin"] === `${Schemas.vscodeFileResource}://${FileAccessImpl.FALLBACK_AUTHORITY}`)) {
            return uri.with({
                scheme: Schemas.vscodeFileResource,
                // We need to provide an authority here so that it can serve
                // as origin for network and loading matters in chromium.
                // If the URI is not coming with an authority already, we
                // add our own
                authority: uri.authority || FileAccessImpl.FALLBACK_AUTHORITY,
                query: null,
                fragment: null
            });
        }
        return uri;
    }
    toUri(uriOrModule, moduleIdToUrl) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].isUri(uriOrModule)) {
            return uriOrModule;
        }
        if (globalThis._VSCODE_FILE_ROOT) {
            const rootUriOrPath = globalThis._VSCODE_FILE_ROOT;
            // File URL (with scheme)
            if (/^\w[\w\d+.-]*:\/\//.test(rootUriOrPath)) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].joinPath(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].parse(rootUriOrPath, true), uriOrModule);
            }
            // File Path (no scheme)
            const modulePath = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["join"])(rootUriOrPath, uriOrModule);
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].file(modulePath);
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].parse(moduleIdToUrl.toUrl(uriOrModule));
    }
}
const FileAccess = new FileAccessImpl();
var COI;
(function(COI) {
    const coiHeaders = new Map([
        [
            '1',
            {
                'Cross-Origin-Opener-Policy': 'same-origin'
            }
        ],
        [
            '2',
            {
                'Cross-Origin-Embedder-Policy': 'require-corp'
            }
        ],
        [
            '3',
            {
                'Cross-Origin-Opener-Policy': 'same-origin',
                'Cross-Origin-Embedder-Policy': 'require-corp'
            }
        ]
    ]);
    COI.CoopAndCoep = Object.freeze(coiHeaders.get('3'));
    const coiSearchParamName = 'vscode-coi';
    /**
     * Extract desired headers from `vscode-coi` invocation
     */ function getHeadersFromQuery(url) {
        let params;
        if (typeof url === 'string') {
            params = new URL(url).searchParams;
        } else if (url instanceof URL) {
            params = url.searchParams;
        } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].isUri(url)) {
            params = new URL(url.toString(true)).searchParams;
        }
        const value = params?.get(coiSearchParamName);
        if (!value) {
            return undefined;
        }
        return coiHeaders.get(value);
    }
    COI.getHeadersFromQuery = getHeadersFromQuery;
    /**
     * Add the `vscode-coi` query attribute based on wanting `COOP` and `COEP`. Will be a noop when `crossOriginIsolated`
     * isn't enabled the current context
     */ function addSearchParam(urlOrSearch, coop, coep) {
        if (!globalThis.crossOriginIsolated) {
            // depends on the current context being COI
            return;
        }
        const value = coop && coep ? '3' : coep ? '2' : '1';
        if (urlOrSearch instanceof URLSearchParams) {
            urlOrSearch.set(coiSearchParamName, value);
        } else {
            urlOrSearch[coiSearchParamName] = value;
        }
    }
    COI.addSearchParam = addSearchParam;
})(COI || (COI = {}));
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/hash.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "StringSHA1": (()=>StringSHA1),
    "doHash": (()=>doHash),
    "hash": (()=>hash),
    "numberHash": (()=>numberHash),
    "stringHash": (()=>stringHash),
    "toHexString": (()=>toHexString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
;
function hash(obj) {
    return doHash(obj, 0);
}
function doHash(obj, hashVal) {
    switch(typeof obj){
        case 'object':
            if (obj === null) {
                return numberHash(349, hashVal);
            } else if (Array.isArray(obj)) {
                return arrayHash(obj, hashVal);
            }
            return objectHash(obj, hashVal);
        case 'string':
            return stringHash(obj, hashVal);
        case 'boolean':
            return booleanHash(obj, hashVal);
        case 'number':
            return numberHash(obj, hashVal);
        case 'undefined':
            return numberHash(937, hashVal);
        default:
            return numberHash(617, hashVal);
    }
}
function numberHash(val, initialHashVal) {
    return (initialHashVal << 5) - initialHashVal + val | 0; // hashVal * 31 + ch, keep as int32
}
function booleanHash(b, initialHashVal) {
    return numberHash(b ? 433 : 863, initialHashVal);
}
function stringHash(s, hashVal) {
    hashVal = numberHash(149417, hashVal);
    for(let i = 0, length = s.length; i < length; i++){
        hashVal = numberHash(s.charCodeAt(i), hashVal);
    }
    return hashVal;
}
function arrayHash(arr, initialHashVal) {
    initialHashVal = numberHash(104579, initialHashVal);
    return arr.reduce((hashVal, item)=>doHash(item, hashVal), initialHashVal);
}
function objectHash(obj, initialHashVal) {
    initialHashVal = numberHash(181387, initialHashVal);
    return Object.keys(obj).sort().reduce((hashVal, key)=>{
        hashVal = stringHash(key, hashVal);
        return doHash(obj[key], hashVal);
    }, initialHashVal);
}
function leftRotate(value, bits, totalBits = 32) {
    // delta + bits = totalBits
    const delta = totalBits - bits;
    // All ones, expect `delta` zeros aligned to the right
    const mask = ~((1 << delta) - 1);
    // Join (value left-shifted `bits` bits) with (masked value right-shifted `delta` bits)
    return (value << bits | (mask & value) >>> delta) >>> 0;
}
function fill(dest, index = 0, count = dest.byteLength, value = 0) {
    for(let i = 0; i < count; i++){
        dest[index + i] = value;
    }
}
function leftPad(value, length, char = '0') {
    while(value.length < length){
        value = char + value;
    }
    return value;
}
function toHexString(bufferOrValue, bitsize = 32) {
    if (bufferOrValue instanceof ArrayBuffer) {
        return Array.from(new Uint8Array(bufferOrValue)).map((b)=>b.toString(16).padStart(2, '0')).join('');
    }
    return leftPad((bufferOrValue >>> 0).toString(16), bitsize / 4);
}
class StringSHA1 {
    static{
        this._bigBlock32 = new DataView(new ArrayBuffer(320));
    }
    constructor(){
        this._h0 = 0x67452301;
        this._h1 = 0xEFCDAB89;
        this._h2 = 0x98BADCFE;
        this._h3 = 0x10325476;
        this._h4 = 0xC3D2E1F0;
        this._buff = new Uint8Array(64 /* SHA1Constant.BLOCK_SIZE */  + 3 /* to fit any utf-8 */ );
        this._buffDV = new DataView(this._buff.buffer);
        this._buffLen = 0;
        this._totalLen = 0;
        this._leftoverHighSurrogate = 0;
        this._finished = false;
    }
    update(str) {
        const strLen = str.length;
        if (strLen === 0) {
            return;
        }
        const buff = this._buff;
        let buffLen = this._buffLen;
        let leftoverHighSurrogate = this._leftoverHighSurrogate;
        let charCode;
        let offset;
        if (leftoverHighSurrogate !== 0) {
            charCode = leftoverHighSurrogate;
            offset = -1;
            leftoverHighSurrogate = 0;
        } else {
            charCode = str.charCodeAt(0);
            offset = 0;
        }
        while(true){
            let codePoint = charCode;
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHighSurrogate"])(charCode)) {
                if (offset + 1 < strLen) {
                    const nextCharCode = str.charCodeAt(offset + 1);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLowSurrogate"])(nextCharCode)) {
                        offset++;
                        codePoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["computeCodePoint"])(charCode, nextCharCode);
                    } else {
                        // illegal => unicode replacement character
                        codePoint = 65533 /* SHA1Constant.UNICODE_REPLACEMENT */ ;
                    }
                } else {
                    // last character is a surrogate pair
                    leftoverHighSurrogate = charCode;
                    break;
                }
            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLowSurrogate"])(charCode)) {
                // illegal => unicode replacement character
                codePoint = 65533 /* SHA1Constant.UNICODE_REPLACEMENT */ ;
            }
            buffLen = this._push(buff, buffLen, codePoint);
            offset++;
            if (offset < strLen) {
                charCode = str.charCodeAt(offset);
            } else {
                break;
            }
        }
        this._buffLen = buffLen;
        this._leftoverHighSurrogate = leftoverHighSurrogate;
    }
    _push(buff, buffLen, codePoint) {
        if (codePoint < 0x0080) {
            buff[buffLen++] = codePoint;
        } else if (codePoint < 0x0800) {
            buff[buffLen++] = 0b11000000 | (codePoint & 0b00000000000000000000011111000000) >>> 6;
            buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000000000000000111111) >>> 0;
        } else if (codePoint < 0x10000) {
            buff[buffLen++] = 0b11100000 | (codePoint & 0b00000000000000001111000000000000) >>> 12;
            buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000000000111111000000) >>> 6;
            buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000000000000000111111) >>> 0;
        } else {
            buff[buffLen++] = 0b11110000 | (codePoint & 0b00000000000111000000000000000000) >>> 18;
            buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000111111000000000000) >>> 12;
            buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000000000111111000000) >>> 6;
            buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000000000000000111111) >>> 0;
        }
        if (buffLen >= 64 /* SHA1Constant.BLOCK_SIZE */ ) {
            this._step();
            buffLen -= 64 /* SHA1Constant.BLOCK_SIZE */ ;
            this._totalLen += 64 /* SHA1Constant.BLOCK_SIZE */ ;
            // take last 3 in case of UTF8 overflow
            buff[0] = buff[64 /* SHA1Constant.BLOCK_SIZE */  + 0];
            buff[1] = buff[64 /* SHA1Constant.BLOCK_SIZE */  + 1];
            buff[2] = buff[64 /* SHA1Constant.BLOCK_SIZE */  + 2];
        }
        return buffLen;
    }
    digest() {
        if (!this._finished) {
            this._finished = true;
            if (this._leftoverHighSurrogate) {
                // illegal => unicode replacement character
                this._leftoverHighSurrogate = 0;
                this._buffLen = this._push(this._buff, this._buffLen, 65533 /* SHA1Constant.UNICODE_REPLACEMENT */ );
            }
            this._totalLen += this._buffLen;
            this._wrapUp();
        }
        return toHexString(this._h0) + toHexString(this._h1) + toHexString(this._h2) + toHexString(this._h3) + toHexString(this._h4);
    }
    _wrapUp() {
        this._buff[this._buffLen++] = 0x80;
        fill(this._buff, this._buffLen);
        if (this._buffLen > 56) {
            this._step();
            fill(this._buff);
        }
        // this will fit because the mantissa can cover up to 52 bits
        const ml = 8 * this._totalLen;
        this._buffDV.setUint32(56, Math.floor(ml / 4294967296), false);
        this._buffDV.setUint32(60, ml % 4294967296, false);
        this._step();
    }
    _step() {
        const bigBlock32 = StringSHA1._bigBlock32;
        const data = this._buffDV;
        for(let j = 0; j < 64 /* 16*4 */ ; j += 4){
            bigBlock32.setUint32(j, data.getUint32(j, false), false);
        }
        for(let j = 64; j < 320 /* 80*4 */ ; j += 4){
            bigBlock32.setUint32(j, leftRotate(bigBlock32.getUint32(j - 12, false) ^ bigBlock32.getUint32(j - 32, false) ^ bigBlock32.getUint32(j - 56, false) ^ bigBlock32.getUint32(j - 64, false), 1), false);
        }
        let a = this._h0;
        let b = this._h1;
        let c = this._h2;
        let d = this._h3;
        let e = this._h4;
        let f, k;
        let temp;
        for(let j = 0; j < 80; j++){
            if (j < 20) {
                f = b & c | ~b & d;
                k = 0x5A827999;
            } else if (j < 40) {
                f = b ^ c ^ d;
                k = 0x6ED9EBA1;
            } else if (j < 60) {
                f = b & c | b & d | c & d;
                k = 0x8F1BBCDC;
            } else {
                f = b ^ c ^ d;
                k = 0xCA62C1D6;
            }
            temp = leftRotate(a, 5) + f + e + k + bigBlock32.getUint32(j * 4, false) & 0xffffffff;
            e = d;
            d = c;
            c = leftRotate(b, 30);
            b = a;
            a = temp;
        }
        this._h0 = this._h0 + a & 0xffffffff;
        this._h1 = this._h1 + b & 0xffffffff;
        this._h2 = this._h2 + c & 0xffffffff;
        this._h3 = this._h3 + d & 0xffffffff;
        this._h4 = this._h4 + e & 0xffffffff;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/actions.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "Action": (()=>Action),
    "ActionRunner": (()=>ActionRunner),
    "EmptySubmenuAction": (()=>EmptySubmenuAction),
    "Separator": (()=>Separator),
    "SubmenuAction": (()=>SubmenuAction),
    "toAction": (()=>toAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/event.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lifecycle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/nls.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/nls.js [app-client] (ecmascript) <locals>");
;
;
;
class Action extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Disposable"] {
    constructor(id, label = '', cssClass = '', enabled = true, actionCallback){
        super();
        this._onDidChange = this._register(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Emitter"]());
        this.onDidChange = this._onDidChange.event;
        this._enabled = true;
        this._id = id;
        this._label = label;
        this._cssClass = cssClass;
        this._enabled = enabled;
        this._actionCallback = actionCallback;
    }
    get id() {
        return this._id;
    }
    get label() {
        return this._label;
    }
    set label(value) {
        this._setLabel(value);
    }
    _setLabel(value) {
        if (this._label !== value) {
            this._label = value;
            this._onDidChange.fire({
                label: value
            });
        }
    }
    get tooltip() {
        return this._tooltip || '';
    }
    set tooltip(value) {
        this._setTooltip(value);
    }
    _setTooltip(value) {
        if (this._tooltip !== value) {
            this._tooltip = value;
            this._onDidChange.fire({
                tooltip: value
            });
        }
    }
    get class() {
        return this._cssClass;
    }
    set class(value) {
        this._setClass(value);
    }
    _setClass(value) {
        if (this._cssClass !== value) {
            this._cssClass = value;
            this._onDidChange.fire({
                class: value
            });
        }
    }
    get enabled() {
        return this._enabled;
    }
    set enabled(value) {
        this._setEnabled(value);
    }
    _setEnabled(value) {
        if (this._enabled !== value) {
            this._enabled = value;
            this._onDidChange.fire({
                enabled: value
            });
        }
    }
    get checked() {
        return this._checked;
    }
    set checked(value) {
        this._setChecked(value);
    }
    _setChecked(value) {
        if (this._checked !== value) {
            this._checked = value;
            this._onDidChange.fire({
                checked: value
            });
        }
    }
    async run(event, data) {
        if (this._actionCallback) {
            await this._actionCallback(event);
        }
    }
}
class ActionRunner extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Disposable"] {
    constructor(){
        super(...arguments);
        this._onWillRun = this._register(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Emitter"]());
        this.onWillRun = this._onWillRun.event;
        this._onDidRun = this._register(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Emitter"]());
        this.onDidRun = this._onDidRun.event;
    }
    async run(action, context) {
        if (!action.enabled) {
            return;
        }
        this._onWillRun.fire({
            action
        });
        let error = undefined;
        try {
            await this.runAction(action, context);
        } catch (e) {
            error = e;
        }
        this._onDidRun.fire({
            action,
            error
        });
    }
    async runAction(action, context) {
        await action.run(context);
    }
}
class Separator {
    constructor(){
        this.id = Separator.ID;
        this.label = '';
        this.tooltip = '';
        this.class = 'separator';
        this.enabled = false;
        this.checked = false;
    }
    /**
     * Joins all non-empty lists of actions with separators.
     */ static join(...actionLists) {
        let out = [];
        for (const list of actionLists){
            if (!list.length) {
            // skip
            } else if (out.length) {
                out = [
                    ...out,
                    new Separator(),
                    ...list
                ];
            } else {
                out = list;
            }
        }
        return out;
    }
    static{
        this.ID = 'vs.actions.separator';
    }
    async run() {}
}
class SubmenuAction {
    get actions() {
        return this._actions;
    }
    constructor(id, label, actions, cssClass){
        this.tooltip = '';
        this.enabled = true;
        this.checked = undefined;
        this.id = id;
        this.label = label;
        this.class = cssClass;
        this._actions = actions;
    }
    async run() {}
}
class EmptySubmenuAction extends Action {
    static{
        this.ID = 'vs.actions.empty';
    }
    constructor(){
        super(EmptySubmenuAction.ID, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])('submenu.empty', '(empty)'), undefined, false);
    }
}
function toAction(props) {
    return {
        id: props.id,
        label: props.label,
        tooltip: props.tooltip ?? props.label,
        class: props.class,
        enabled: props.enabled ?? true,
        checked: props.checked,
        run: async (...args)=>props.run(...args)
    };
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/themables.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "ThemeColor": (()=>ThemeColor),
    "ThemeIcon": (()=>ThemeIcon)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codicons$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/codicons.js [app-client] (ecmascript)");
;
var ThemeColor;
(function(ThemeColor) {
    function isThemeColor(obj) {
        return obj && typeof obj === 'object' && typeof obj.id === 'string';
    }
    ThemeColor.isThemeColor = isThemeColor;
})(ThemeColor || (ThemeColor = {}));
var ThemeIcon;
(function(ThemeIcon) {
    ThemeIcon.iconNameSegment = '[A-Za-z0-9]+';
    ThemeIcon.iconNameExpression = '[A-Za-z0-9-]+';
    ThemeIcon.iconModifierExpression = '~[A-Za-z]+';
    ThemeIcon.iconNameCharacter = '[A-Za-z0-9~-]';
    const ThemeIconIdRegex = new RegExp(`^(${ThemeIcon.iconNameExpression})(${ThemeIcon.iconModifierExpression})?$`);
    function asClassNameArray(icon) {
        const match = ThemeIconIdRegex.exec(icon.id);
        if (!match) {
            return asClassNameArray(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$codicons$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Codicon"].error);
        }
        const [, id, modifier] = match;
        const classNames = [
            'codicon',
            'codicon-' + id
        ];
        if (modifier) {
            classNames.push('codicon-modifier-' + modifier.substring(1));
        }
        return classNames;
    }
    ThemeIcon.asClassNameArray = asClassNameArray;
    function asClassName(icon) {
        return asClassNameArray(icon).join(' ');
    }
    ThemeIcon.asClassName = asClassName;
    function asCSSSelector(icon) {
        return '.' + asClassNameArray(icon).join('.');
    }
    ThemeIcon.asCSSSelector = asCSSSelector;
    function isThemeIcon(obj) {
        return obj && typeof obj === 'object' && typeof obj.id === 'string' && (typeof obj.color === 'undefined' || ThemeColor.isThemeColor(obj.color));
    }
    ThemeIcon.isThemeIcon = isThemeIcon;
    const _regexFromString = new RegExp(`^\\$\\((${ThemeIcon.iconNameExpression}(?:${ThemeIcon.iconModifierExpression})?)\\)$`);
    function fromString(str) {
        const match = _regexFromString.exec(str);
        if (!match) {
            return undefined;
        }
        const [, name] = match;
        return {
            id: name
        };
    }
    ThemeIcon.fromString = fromString;
    function fromId(id) {
        return {
            id
        };
    }
    ThemeIcon.fromId = fromId;
    function modify(icon, modifier) {
        let id = icon.id;
        const tildeIndex = id.lastIndexOf('~');
        if (tildeIndex !== -1) {
            id = id.substring(0, tildeIndex);
        }
        if (modifier) {
            id = `${id}~${modifier}`;
        }
        return {
            id
        };
    }
    ThemeIcon.modify = modify;
    function getModifier(icon) {
        const tildeIndex = icon.id.lastIndexOf('~');
        if (tildeIndex !== -1) {
            return icon.id.substring(tildeIndex + 1);
        }
        return undefined;
    }
    ThemeIcon.getModifier = getModifier;
    function isEqual(ti1, ti2) {
        return ti1.id === ti2.id && ti1.color?.id === ti2.color?.id;
    }
    ThemeIcon.isEqual = isEqual;
})(ThemeIcon || (ThemeIcon = {}));
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/assert.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "assertFn": (()=>assertFn),
    "assertNever": (()=>assertNever),
    "checkAdjacentItems": (()=>checkAdjacentItems),
    "ok": (()=>ok),
    "softAssert": (()=>softAssert)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/errors.js [app-client] (ecmascript)");
;
function ok(value, message) {
    if (!value) {
        throw new Error(message ? `Assertion failed (${message})` : 'Assertion Failed');
    }
}
function assertNever(value, message = 'Unreachable') {
    throw new Error(message);
}
function softAssert(condition) {
    if (!condition) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["onUnexpectedError"])(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BugIndicatingError"]('Soft Assertion Failed'));
    }
}
function assertFn(condition) {
    if (!condition()) {
        // eslint-disable-next-line no-debugger
        debugger;
        // Reevaluate `condition` again to make debugging easier
        condition();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["onUnexpectedError"])(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BugIndicatingError"]('Assertion Failed'));
    }
}
function checkAdjacentItems(items, predicate) {
    let i = 0;
    while(i < items.length - 1){
        const a = items[i];
        const b = items[i + 1];
        if (!predicate(a, b)) {
            return false;
        }
        i++;
    }
    return true;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "SimpleWorkerClient": (()=>SimpleWorkerClient),
    "SimpleWorkerServer": (()=>SimpleWorkerServer),
    "create": (()=>create),
    "logOnceWebWorkerWarning": (()=>logOnceWebWorkerWarning)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/errors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/event.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lifecycle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/network.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
;
;
;
;
;
;
// ESM-comment-begin
// const isESM = false;
// ESM-comment-end
// ESM-uncomment-begin
const isESM = true;
// ESM-uncomment-end
const DEFAULT_CHANNEL = 'default';
const INITIALIZE = '$initialize';
let webWorkerWarningLogged = false;
function logOnceWebWorkerWarning(err) {
    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWeb"]) {
        // running tests
        return;
    }
    if (!webWorkerWarningLogged) {
        webWorkerWarningLogged = true;
        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');
    }
    console.warn(err.message);
}
class RequestMessage {
    constructor(vsWorker, req, channel, method, args){
        this.vsWorker = vsWorker;
        this.req = req;
        this.channel = channel;
        this.method = method;
        this.args = args;
        this.type = 0 /* MessageType.Request */ ;
    }
}
class ReplyMessage {
    constructor(vsWorker, seq, res, err){
        this.vsWorker = vsWorker;
        this.seq = seq;
        this.res = res;
        this.err = err;
        this.type = 1 /* MessageType.Reply */ ;
    }
}
class SubscribeEventMessage {
    constructor(vsWorker, req, channel, eventName, arg){
        this.vsWorker = vsWorker;
        this.req = req;
        this.channel = channel;
        this.eventName = eventName;
        this.arg = arg;
        this.type = 2 /* MessageType.SubscribeEvent */ ;
    }
}
class EventMessage {
    constructor(vsWorker, req, event){
        this.vsWorker = vsWorker;
        this.req = req;
        this.event = event;
        this.type = 3 /* MessageType.Event */ ;
    }
}
class UnsubscribeEventMessage {
    constructor(vsWorker, req){
        this.vsWorker = vsWorker;
        this.req = req;
        this.type = 4 /* MessageType.UnsubscribeEvent */ ;
    }
}
class SimpleWorkerProtocol {
    constructor(handler){
        this._workerId = -1;
        this._handler = handler;
        this._lastSentReq = 0;
        this._pendingReplies = Object.create(null);
        this._pendingEmitters = new Map();
        this._pendingEvents = new Map();
    }
    setWorkerId(workerId) {
        this._workerId = workerId;
    }
    sendMessage(channel, method, args) {
        const req = String(++this._lastSentReq);
        return new Promise((resolve, reject)=>{
            this._pendingReplies[req] = {
                resolve: resolve,
                reject: reject
            };
            this._send(new RequestMessage(this._workerId, req, channel, method, args));
        });
    }
    listen(channel, eventName, arg) {
        let req = null;
        const emitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Emitter"]({
            onWillAddFirstListener: ()=>{
                req = String(++this._lastSentReq);
                this._pendingEmitters.set(req, emitter);
                this._send(new SubscribeEventMessage(this._workerId, req, channel, eventName, arg));
            },
            onDidRemoveLastListener: ()=>{
                this._pendingEmitters.delete(req);
                this._send(new UnsubscribeEventMessage(this._workerId, req));
                req = null;
            }
        });
        return emitter.event;
    }
    handleMessage(message) {
        if (!message || !message.vsWorker) {
            return;
        }
        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {
            return;
        }
        this._handleMessage(message);
    }
    createProxyToRemoteChannel(channel, sendMessageBarrier) {
        const handler = {
            get: (target, name)=>{
                if (typeof name === 'string' && !target[name]) {
                    if (propertyIsDynamicEvent(name)) {
                        target[name] = (arg)=>{
                            return this.listen(channel, name, arg);
                        };
                    } else if (propertyIsEvent(name)) {
                        target[name] = this.listen(channel, name, undefined);
                    } else if (name.charCodeAt(0) === 36 /* CharCode.DollarSign */ ) {
                        target[name] = async (...myArgs)=>{
                            await sendMessageBarrier?.();
                            return this.sendMessage(channel, name, myArgs);
                        };
                    }
                }
                return target[name];
            }
        };
        return new Proxy(Object.create(null), handler);
    }
    _handleMessage(msg) {
        switch(msg.type){
            case 1 /* MessageType.Reply */ :
                return this._handleReplyMessage(msg);
            case 0 /* MessageType.Request */ :
                return this._handleRequestMessage(msg);
            case 2 /* MessageType.SubscribeEvent */ :
                return this._handleSubscribeEventMessage(msg);
            case 3 /* MessageType.Event */ :
                return this._handleEventMessage(msg);
            case 4 /* MessageType.UnsubscribeEvent */ :
                return this._handleUnsubscribeEventMessage(msg);
        }
    }
    _handleReplyMessage(replyMessage) {
        if (!this._pendingReplies[replyMessage.seq]) {
            console.warn('Got reply to unknown seq');
            return;
        }
        const reply = this._pendingReplies[replyMessage.seq];
        delete this._pendingReplies[replyMessage.seq];
        if (replyMessage.err) {
            let err = replyMessage.err;
            if (replyMessage.err.$isError) {
                err = new Error();
                err.name = replyMessage.err.name;
                err.message = replyMessage.err.message;
                err.stack = replyMessage.err.stack;
            }
            reply.reject(err);
            return;
        }
        reply.resolve(replyMessage.res);
    }
    _handleRequestMessage(requestMessage) {
        const req = requestMessage.req;
        const result = this._handler.handleMessage(requestMessage.channel, requestMessage.method, requestMessage.args);
        result.then((r)=>{
            this._send(new ReplyMessage(this._workerId, req, r, undefined));
        }, (e)=>{
            if (e.detail instanceof Error) {
                // Loading errors have a detail property that points to the actual error
                e.detail = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformErrorForSerialization"])(e.detail);
            }
            this._send(new ReplyMessage(this._workerId, req, undefined, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformErrorForSerialization"])(e)));
        });
    }
    _handleSubscribeEventMessage(msg) {
        const req = msg.req;
        const disposable = this._handler.handleEvent(msg.channel, msg.eventName, msg.arg)((event)=>{
            this._send(new EventMessage(this._workerId, req, event));
        });
        this._pendingEvents.set(req, disposable);
    }
    _handleEventMessage(msg) {
        if (!this._pendingEmitters.has(msg.req)) {
            console.warn('Got event for unknown req');
            return;
        }
        this._pendingEmitters.get(msg.req).fire(msg.event);
    }
    _handleUnsubscribeEventMessage(msg) {
        if (!this._pendingEvents.has(msg.req)) {
            console.warn('Got unsubscribe for unknown req');
            return;
        }
        this._pendingEvents.get(msg.req).dispose();
        this._pendingEvents.delete(msg.req);
    }
    _send(msg) {
        const transfer = [];
        if (msg.type === 0 /* MessageType.Request */ ) {
            for(let i = 0; i < msg.args.length; i++){
                if (msg.args[i] instanceof ArrayBuffer) {
                    transfer.push(msg.args[i]);
                }
            }
        } else if (msg.type === 1 /* MessageType.Reply */ ) {
            if (msg.res instanceof ArrayBuffer) {
                transfer.push(msg.res);
            }
        }
        this._handler.sendMessage(msg, transfer);
    }
}
class SimpleWorkerClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Disposable"] {
    constructor(workerFactory, workerDescriptor){
        super();
        this._localChannels = new Map();
        this._worker = this._register(workerFactory.create({
            amdModuleId: 'vs/base/common/worker/simpleWorker',
            esmModuleLocation: workerDescriptor.esmModuleLocation,
            label: workerDescriptor.label
        }, (msg)=>{
            this._protocol.handleMessage(msg);
        }, (err)=>{
            // in Firefox, web workers fail lazily :(
            // we will reject the proxy
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["onUnexpectedError"])(err);
        }));
        this._protocol = new SimpleWorkerProtocol({
            sendMessage: (msg, transfer)=>{
                this._worker.postMessage(msg, transfer);
            },
            handleMessage: (channel, method, args)=>{
                return this._handleMessage(channel, method, args);
            },
            handleEvent: (channel, eventName, arg)=>{
                return this._handleEvent(channel, eventName, arg);
            }
        });
        this._protocol.setWorkerId(this._worker.getId());
        // Gather loader configuration
        let loaderConfiguration = null;
        const globalRequire = globalThis.require;
        if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {
            // Get the configuration from the Monaco AMD Loader
            loaderConfiguration = globalRequire.getConfig();
        } else if (typeof globalThis.requirejs !== 'undefined') {
            // Get the configuration from requirejs
            loaderConfiguration = globalThis.requirejs.s.contexts._.config;
        }
        // Send initialize message
        this._onModuleLoaded = this._protocol.sendMessage(DEFAULT_CHANNEL, INITIALIZE, [
            this._worker.getId(),
            JSON.parse(JSON.stringify(loaderConfiguration)),
            workerDescriptor.amdModuleId
        ]);
        this.proxy = this._protocol.createProxyToRemoteChannel(DEFAULT_CHANNEL, async ()=>{
            await this._onModuleLoaded;
        });
        this._onModuleLoaded.catch((e)=>{
            this._onError('Worker failed to load ' + workerDescriptor.amdModuleId, e);
        });
    }
    _handleMessage(channelName, method, args) {
        const channel = this._localChannels.get(channelName);
        if (!channel) {
            return Promise.reject(new Error(`Missing channel ${channelName} on main thread`));
        }
        if (typeof channel[method] !== 'function') {
            return Promise.reject(new Error(`Missing method ${method} on main thread channel ${channelName}`));
        }
        try {
            return Promise.resolve(channel[method].apply(channel, args));
        } catch (e) {
            return Promise.reject(e);
        }
    }
    _handleEvent(channelName, eventName, arg) {
        const channel = this._localChannels.get(channelName);
        if (!channel) {
            throw new Error(`Missing channel ${channelName} on main thread`);
        }
        if (propertyIsDynamicEvent(eventName)) {
            const event = channel[eventName].call(channel, arg);
            if (typeof event !== 'function') {
                throw new Error(`Missing dynamic event ${eventName} on main thread channel ${channelName}.`);
            }
            return event;
        }
        if (propertyIsEvent(eventName)) {
            const event = channel[eventName];
            if (typeof event !== 'function') {
                throw new Error(`Missing event ${eventName} on main thread channel ${channelName}.`);
            }
            return event;
        }
        throw new Error(`Malformed event name ${eventName}`);
    }
    setChannel(channel, handler) {
        this._localChannels.set(channel, handler);
    }
    _onError(message, error) {
        console.error(message);
        console.info(error);
    }
}
function propertyIsEvent(name) {
    // Assume a property is an event if it has a form of "onSomething"
    return name[0] === 'o' && name[1] === 'n' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isUpperAsciiLetter"])(name.charCodeAt(2));
}
function propertyIsDynamicEvent(name) {
    // Assume a property is a dynamic event (a method that returns an event) if it has a form of "onDynamicSomething"
    return /^onDynamic/.test(name) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isUpperAsciiLetter"])(name.charCodeAt(9));
}
class SimpleWorkerServer {
    constructor(postMessage, requestHandlerFactory){
        this._localChannels = new Map();
        this._remoteChannels = new Map();
        this._requestHandlerFactory = requestHandlerFactory;
        this._requestHandler = null;
        this._protocol = new SimpleWorkerProtocol({
            sendMessage: (msg, transfer)=>{
                postMessage(msg, transfer);
            },
            handleMessage: (channel, method, args)=>this._handleMessage(channel, method, args),
            handleEvent: (channel, eventName, arg)=>this._handleEvent(channel, eventName, arg)
        });
    }
    onmessage(msg) {
        this._protocol.handleMessage(msg);
    }
    _handleMessage(channel, method, args) {
        if (channel === DEFAULT_CHANNEL && method === INITIALIZE) {
            return this.initialize(args[0], args[1], args[2]);
        }
        const requestHandler = channel === DEFAULT_CHANNEL ? this._requestHandler : this._localChannels.get(channel);
        if (!requestHandler) {
            return Promise.reject(new Error(`Missing channel ${channel} on worker thread`));
        }
        if (typeof requestHandler[method] !== 'function') {
            return Promise.reject(new Error(`Missing method ${method} on worker thread channel ${channel}`));
        }
        try {
            return Promise.resolve(requestHandler[method].apply(requestHandler, args));
        } catch (e) {
            return Promise.reject(e);
        }
    }
    _handleEvent(channel, eventName, arg) {
        const requestHandler = channel === DEFAULT_CHANNEL ? this._requestHandler : this._localChannels.get(channel);
        if (!requestHandler) {
            throw new Error(`Missing channel ${channel} on worker thread`);
        }
        if (propertyIsDynamicEvent(eventName)) {
            const event = requestHandler[eventName].call(requestHandler, arg);
            if (typeof event !== 'function') {
                throw new Error(`Missing dynamic event ${eventName} on request handler.`);
            }
            return event;
        }
        if (propertyIsEvent(eventName)) {
            const event = requestHandler[eventName];
            if (typeof event !== 'function') {
                throw new Error(`Missing event ${eventName} on request handler.`);
            }
            return event;
        }
        throw new Error(`Malformed event name ${eventName}`);
    }
    getChannel(channel) {
        if (!this._remoteChannels.has(channel)) {
            const inst = this._protocol.createProxyToRemoteChannel(channel);
            this._remoteChannels.set(channel, inst);
        }
        return this._remoteChannels.get(channel);
    }
    async initialize(workerId, loaderConfig, moduleId) {
        this._protocol.setWorkerId(workerId);
        if (this._requestHandlerFactory) {
            // static request handler
            this._requestHandler = this._requestHandlerFactory(this);
            return;
        }
        if (loaderConfig) {
            // Remove 'baseUrl', handling it is beyond scope for now
            if (typeof loaderConfig.baseUrl !== 'undefined') {
                delete loaderConfig['baseUrl'];
            }
            if (typeof loaderConfig.paths !== 'undefined') {
                if (typeof loaderConfig.paths.vs !== 'undefined') {
                    delete loaderConfig.paths['vs'];
                }
            }
            if (typeof loaderConfig.trustedTypesPolicy !== 'undefined') {
                // don't use, it has been destroyed during serialize
                delete loaderConfig['trustedTypesPolicy'];
            }
            // Since this is in a web worker, enable catching errors
            loaderConfig.catchError = true;
            globalThis.require.config(loaderConfig);
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const url = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FileAccess"].asBrowserUri(`${moduleId}.js`).toString(true);
            return (()=>{
                const e = new Error("Cannot find module 'unknown'");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })().then((module)=>{
                this._requestHandler = module.create(this);
                if (!this._requestHandler) {
                    throw new Error(`No RequestHandler!`);
                }
            });
        }
        "TURBOPACK unreachable";
    }
}
function create(postMessage) {
    return new SimpleWorkerServer(postMessage, null);
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/buffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "VSBuffer": (()=>VSBuffer),
    "readUInt16LE": (()=>readUInt16LE),
    "readUInt32BE": (()=>readUInt32BE),
    "readUInt8": (()=>readUInt8),
    "writeUInt16LE": (()=>writeUInt16LE),
    "writeUInt32BE": (()=>writeUInt32BE),
    "writeUInt8": (()=>writeUInt8)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/buffer/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lazy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lazy.js [app-client] (ecmascript)");
;
const hasBuffer = typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"] !== 'undefined';
const indexOfTable = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lazy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Lazy"](()=>new Uint8Array(256));
let textDecoder;
class VSBuffer {
    /**
     * When running in a nodejs context, if `actual` is not a nodejs Buffer, the backing store for
     * the returned `VSBuffer` instance might use a nodejs Buffer allocated from node's Buffer pool,
     * which is not transferrable.
     */ static wrap(actual) {
        if (hasBuffer && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].isBuffer(actual)) {
            // https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
            // Create a zero-copy Buffer wrapper around the ArrayBuffer pointed to by the Uint8Array
            actual = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(actual.buffer, actual.byteOffset, actual.byteLength);
        }
        return new VSBuffer(actual);
    }
    constructor(buffer){
        this.buffer = buffer;
        this.byteLength = this.buffer.byteLength;
    }
    toString() {
        if (hasBuffer) {
            return this.buffer.toString();
        } else {
            if (!textDecoder) {
                textDecoder = new TextDecoder();
            }
            return textDecoder.decode(this.buffer);
        }
    }
}
function readUInt16LE(source, offset) {
    return source[offset + 0] << 0 >>> 0 | source[offset + 1] << 8 >>> 0;
}
function writeUInt16LE(destination, value, offset) {
    destination[offset + 0] = value & 0b11111111;
    value = value >>> 8;
    destination[offset + 1] = value & 0b11111111;
}
function readUInt32BE(source, offset) {
    return source[offset] * 2 ** 24 + source[offset + 1] * 2 ** 16 + source[offset + 2] * 2 ** 8 + source[offset + 3];
}
function writeUInt32BE(destination, value, offset) {
    destination[offset + 3] = value;
    value = value >>> 8;
    destination[offset + 2] = value;
    value = value >>> 8;
    destination[offset + 1] = value;
    value = value >>> 8;
    destination[offset] = value;
}
function readUInt8(source, offset) {
    return source[offset];
}
function writeUInt8(destination, value, offset) {
    destination[offset] = value;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/mime.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Mimes": (()=>Mimes)
});
const Mimes = Object.freeze({
    text: 'text/plain',
    binary: 'application/octet-stream',
    unknown: 'application/unknown',
    markdown: 'text/markdown',
    latex: 'text/latex',
    uriList: 'text/uri-list'
});
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ /**
 * Represents information about a specific difference between two sequences.
 */ __turbopack_context__.s({
    "DiffChange": (()=>DiffChange)
});
class DiffChange {
    /**
     * Constructs a new DiffChange with the given sequence information
     * and content.
     */ constructor(originalStart, originalLength, modifiedStart, modifiedLength){
        //Debug.Assert(originalLength > 0 || modifiedLength > 0, "originalLength and modifiedLength cannot both be <= 0");
        this.originalStart = originalStart;
        this.originalLength = originalLength;
        this.modifiedStart = modifiedStart;
        this.modifiedLength = modifiedLength;
    }
    /**
     * The end point (exclusive) of the change in the original sequence.
     */ getOriginalEnd() {
        return this.originalStart + this.originalLength;
    }
    /**
     * The end point (exclusive) of the change in the modified sequence.
     */ getModifiedEnd() {
        return this.modifiedStart + this.modifiedLength;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/diff/diff.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "LcsDiff": (()=>LcsDiff),
    "StringDiffSequence": (()=>StringDiffSequence),
    "stringDiff": (()=>stringDiff)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$diff$2f$diffChange$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/hash.js [app-client] (ecmascript)");
;
;
class StringDiffSequence {
    constructor(source){
        this.source = source;
    }
    getElements() {
        const source = this.source;
        const characters = new Int32Array(source.length);
        for(let i = 0, len = source.length; i < len; i++){
            characters[i] = source.charCodeAt(i);
        }
        return characters;
    }
}
function stringDiff(original, modified, pretty) {
    return new LcsDiff(new StringDiffSequence(original), new StringDiffSequence(modified)).ComputeDiff(pretty).changes;
}
//
// The code below has been ported from a C# implementation in VS
//
class Debug {
    static Assert(condition, message) {
        if (!condition) {
            throw new Error(message);
        }
    }
}
class MyArray {
    /**
     * Copies a range of elements from an Array starting at the specified source index and pastes
     * them to another Array starting at the specified destination index. The length and the indexes
     * are specified as 64-bit integers.
     * sourceArray:
     *		The Array that contains the data to copy.
     * sourceIndex:
     *		A 64-bit integer that represents the index in the sourceArray at which copying begins.
     * destinationArray:
     *		The Array that receives the data.
     * destinationIndex:
     *		A 64-bit integer that represents the index in the destinationArray at which storing begins.
     * length:
     *		A 64-bit integer that represents the number of elements to copy.
     */ static Copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        for(let i = 0; i < length; i++){
            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];
        }
    }
    static Copy2(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        for(let i = 0; i < length; i++){
            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];
        }
    }
}
/**
 * A utility class which helps to create the set of DiffChanges from
 * a difference operation. This class accepts original DiffElements and
 * modified DiffElements that are involved in a particular change. The
 * MarkNextChange() method can be called to mark the separation between
 * distinct changes. At the end, the Changes property can be called to retrieve
 * the constructed changes.
 */ class DiffChangeHelper {
    /**
     * Constructs a new DiffChangeHelper for the given DiffSequences.
     */ constructor(){
        this.m_changes = [];
        this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */ ;
        this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */ ;
        this.m_originalCount = 0;
        this.m_modifiedCount = 0;
    }
    /**
     * Marks the beginning of the next change in the set of differences.
     */ MarkNextChange() {
        // Only add to the list if there is something to add
        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {
            // Add the new change to our list
            this.m_changes.push(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$diff$2f$diffChange$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DiffChange"](this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount));
        }
        // Reset for the next change
        this.m_originalCount = 0;
        this.m_modifiedCount = 0;
        this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */ ;
        this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */ ;
    }
    /**
     * Adds the original element at the given position to the elements
     * affected by the current change. The modified index gives context
     * to the change position with respect to the original sequence.
     * @param originalIndex The index of the original element to add.
     * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.
     */ AddOriginalElement(originalIndex, modifiedIndex) {
        // The 'true' start index is the smallest of the ones we've seen
        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);
        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);
        this.m_originalCount++;
    }
    /**
     * Adds the modified element at the given position to the elements
     * affected by the current change. The original index gives context
     * to the change position with respect to the modified sequence.
     * @param originalIndex The index of the original element that provides corresponding position in the original sequence.
     * @param modifiedIndex The index of the modified element to add.
     */ AddModifiedElement(originalIndex, modifiedIndex) {
        // The 'true' start index is the smallest of the ones we've seen
        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);
        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);
        this.m_modifiedCount++;
    }
    /**
     * Retrieves all of the changes marked by the class.
     */ getChanges() {
        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {
            // Finish up on whatever is left
            this.MarkNextChange();
        }
        return this.m_changes;
    }
    /**
     * Retrieves all of the changes marked by the class in the reverse order
     */ getReverseChanges() {
        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {
            // Finish up on whatever is left
            this.MarkNextChange();
        }
        this.m_changes.reverse();
        return this.m_changes;
    }
}
class LcsDiff {
    /**
     * Constructs the DiffFinder
     */ constructor(originalSequence, modifiedSequence, continueProcessingPredicate = null){
        this.ContinueProcessingPredicate = continueProcessingPredicate;
        this._originalSequence = originalSequence;
        this._modifiedSequence = modifiedSequence;
        const [originalStringElements, originalElementsOrHash, originalHasStrings] = LcsDiff._getElements(originalSequence);
        const [modifiedStringElements, modifiedElementsOrHash, modifiedHasStrings] = LcsDiff._getElements(modifiedSequence);
        this._hasStrings = originalHasStrings && modifiedHasStrings;
        this._originalStringElements = originalStringElements;
        this._originalElementsOrHash = originalElementsOrHash;
        this._modifiedStringElements = modifiedStringElements;
        this._modifiedElementsOrHash = modifiedElementsOrHash;
        this.m_forwardHistory = [];
        this.m_reverseHistory = [];
    }
    static _isStringArray(arr) {
        return arr.length > 0 && typeof arr[0] === 'string';
    }
    static _getElements(sequence) {
        const elements = sequence.getElements();
        if (LcsDiff._isStringArray(elements)) {
            const hashes = new Int32Array(elements.length);
            for(let i = 0, len = elements.length; i < len; i++){
                hashes[i] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$hash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringHash"])(elements[i], 0);
            }
            return [
                elements,
                hashes,
                true
            ];
        }
        if (elements instanceof Int32Array) {
            return [
                [],
                elements,
                false
            ];
        }
        return [
            [],
            new Int32Array(elements),
            false
        ];
    }
    ElementsAreEqual(originalIndex, newIndex) {
        if (this._originalElementsOrHash[originalIndex] !== this._modifiedElementsOrHash[newIndex]) {
            return false;
        }
        return this._hasStrings ? this._originalStringElements[originalIndex] === this._modifiedStringElements[newIndex] : true;
    }
    ElementsAreStrictEqual(originalIndex, newIndex) {
        if (!this.ElementsAreEqual(originalIndex, newIndex)) {
            return false;
        }
        const originalElement = LcsDiff._getStrictElement(this._originalSequence, originalIndex);
        const modifiedElement = LcsDiff._getStrictElement(this._modifiedSequence, newIndex);
        return originalElement === modifiedElement;
    }
    static _getStrictElement(sequence, index) {
        if (typeof sequence.getStrictElement === 'function') {
            return sequence.getStrictElement(index);
        }
        return null;
    }
    OriginalElementsAreEqual(index1, index2) {
        if (this._originalElementsOrHash[index1] !== this._originalElementsOrHash[index2]) {
            return false;
        }
        return this._hasStrings ? this._originalStringElements[index1] === this._originalStringElements[index2] : true;
    }
    ModifiedElementsAreEqual(index1, index2) {
        if (this._modifiedElementsOrHash[index1] !== this._modifiedElementsOrHash[index2]) {
            return false;
        }
        return this._hasStrings ? this._modifiedStringElements[index1] === this._modifiedStringElements[index2] : true;
    }
    ComputeDiff(pretty) {
        return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, pretty);
    }
    /**
     * Computes the differences between the original and modified input
     * sequences on the bounded range.
     * @returns An array of the differences between the two input sequences.
     */ _ComputeDiff(originalStart, originalEnd, modifiedStart, modifiedEnd, pretty) {
        const quitEarlyArr = [
            false
        ];
        let changes = this.ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr);
        if (pretty) {
            // We have to clean up the computed diff to be more intuitive
            // but it turns out this cannot be done correctly until the entire set
            // of diffs have been computed
            changes = this.PrettifyChanges(changes);
        }
        return {
            quitEarly: quitEarlyArr[0],
            changes: changes
        };
    }
    /**
     * Private helper method which computes the differences on the bounded range
     * recursively.
     * @returns An array of the differences between the two input sequences.
     */ ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr) {
        quitEarlyArr[0] = false;
        // Find the start of the differences
        while(originalStart <= originalEnd && modifiedStart <= modifiedEnd && this.ElementsAreEqual(originalStart, modifiedStart)){
            originalStart++;
            modifiedStart++;
        }
        // Find the end of the differences
        while(originalEnd >= originalStart && modifiedEnd >= modifiedStart && this.ElementsAreEqual(originalEnd, modifiedEnd)){
            originalEnd--;
            modifiedEnd--;
        }
        // In the special case where we either have all insertions or all deletions or the sequences are identical
        if (originalStart > originalEnd || modifiedStart > modifiedEnd) {
            let changes;
            if (modifiedStart <= modifiedEnd) {
                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');
                // All insertions
                changes = [
                    new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$diff$2f$diffChange$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DiffChange"](originalStart, 0, modifiedStart, modifiedEnd - modifiedStart + 1)
                ];
            } else if (originalStart <= originalEnd) {
                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');
                // All deletions
                changes = [
                    new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$diff$2f$diffChange$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DiffChange"](originalStart, originalEnd - originalStart + 1, modifiedStart, 0)
                ];
            } else {
                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');
                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');
                // Identical sequences - No differences
                changes = [];
            }
            return changes;
        }
        // This problem can be solved using the Divide-And-Conquer technique.
        const midOriginalArr = [
            0
        ];
        const midModifiedArr = [
            0
        ];
        const result = this.ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr);
        const midOriginal = midOriginalArr[0];
        const midModified = midModifiedArr[0];
        if (result !== null) {
            // Result is not-null when there was enough memory to compute the changes while
            // searching for the recursion point
            return result;
        } else if (!quitEarlyArr[0]) {
            // We can break the problem down recursively by finding the changes in the
            // First Half:   (originalStart, modifiedStart) to (midOriginal, midModified)
            // Second Half:  (midOriginal + 1, minModified + 1) to (originalEnd, modifiedEnd)
            // NOTE: ComputeDiff() is inclusive, therefore the second range starts on the next point
            const leftChanges = this.ComputeDiffRecursive(originalStart, midOriginal, modifiedStart, midModified, quitEarlyArr);
            let rightChanges = [];
            if (!quitEarlyArr[0]) {
                rightChanges = this.ComputeDiffRecursive(midOriginal + 1, originalEnd, midModified + 1, modifiedEnd, quitEarlyArr);
            } else {
                // We didn't have time to finish the first half, so we don't have time to compute this half.
                // Consider the entire rest of the sequence different.
                rightChanges = [
                    new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$diff$2f$diffChange$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DiffChange"](midOriginal + 1, originalEnd - (midOriginal + 1) + 1, midModified + 1, modifiedEnd - (midModified + 1) + 1)
                ];
            }
            return this.ConcatenateChanges(leftChanges, rightChanges);
        }
        // If we hit here, we quit early, and so can't return anything meaningful
        return [
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$diff$2f$diffChange$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DiffChange"](originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)
        ];
    }
    WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr) {
        let forwardChanges = null;
        let reverseChanges = null;
        // First, walk backward through the forward diagonals history
        let changeHelper = new DiffChangeHelper();
        let diagonalMin = diagonalForwardStart;
        let diagonalMax = diagonalForwardEnd;
        let diagonalRelative = midOriginalArr[0] - midModifiedArr[0] - diagonalForwardOffset;
        let lastOriginalIndex = -1073741824 /* Constants.MIN_SAFE_SMALL_INTEGER */ ;
        let historyIndex = this.m_forwardHistory.length - 1;
        do {
            // Get the diagonal index from the relative diagonal number
            const diagonal = diagonalRelative + diagonalForwardBase;
            // Figure out where we came from
            if (diagonal === diagonalMin || diagonal < diagonalMax && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1]) {
                // Vertical line (the element is an insert)
                originalIndex = forwardPoints[diagonal + 1];
                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;
                if (originalIndex < lastOriginalIndex) {
                    changeHelper.MarkNextChange();
                }
                lastOriginalIndex = originalIndex;
                changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex);
                diagonalRelative = diagonal + 1 - diagonalForwardBase; //Setup for the next iteration
            } else {
                // Horizontal line (the element is a deletion)
                originalIndex = forwardPoints[diagonal - 1] + 1;
                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;
                if (originalIndex < lastOriginalIndex) {
                    changeHelper.MarkNextChange();
                }
                lastOriginalIndex = originalIndex - 1;
                changeHelper.AddOriginalElement(originalIndex, modifiedIndex + 1);
                diagonalRelative = diagonal - 1 - diagonalForwardBase; //Setup for the next iteration
            }
            if (historyIndex >= 0) {
                forwardPoints = this.m_forwardHistory[historyIndex];
                diagonalForwardBase = forwardPoints[0]; //We stored this in the first spot
                diagonalMin = 1;
                diagonalMax = forwardPoints.length - 1;
            }
        }while (--historyIndex >= -1)
        // Ironically, we get the forward changes as the reverse of the
        // order we added them since we technically added them backwards
        forwardChanges = changeHelper.getReverseChanges();
        if (quitEarlyArr[0]) {
            // TODO: Calculate a partial from the reverse diagonals.
            //       For now, just assume everything after the midOriginal/midModified point is a diff
            let originalStartPoint = midOriginalArr[0] + 1;
            let modifiedStartPoint = midModifiedArr[0] + 1;
            if (forwardChanges !== null && forwardChanges.length > 0) {
                const lastForwardChange = forwardChanges[forwardChanges.length - 1];
                originalStartPoint = Math.max(originalStartPoint, lastForwardChange.getOriginalEnd());
                modifiedStartPoint = Math.max(modifiedStartPoint, lastForwardChange.getModifiedEnd());
            }
            reverseChanges = [
                new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$diff$2f$diffChange$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DiffChange"](originalStartPoint, originalEnd - originalStartPoint + 1, modifiedStartPoint, modifiedEnd - modifiedStartPoint + 1)
            ];
        } else {
            // Now walk backward through the reverse diagonals history
            changeHelper = new DiffChangeHelper();
            diagonalMin = diagonalReverseStart;
            diagonalMax = diagonalReverseEnd;
            diagonalRelative = midOriginalArr[0] - midModifiedArr[0] - diagonalReverseOffset;
            lastOriginalIndex = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */ ;
            historyIndex = deltaIsEven ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;
            do {
                // Get the diagonal index from the relative diagonal number
                const diagonal = diagonalRelative + diagonalReverseBase;
                // Figure out where we came from
                if (diagonal === diagonalMin || diagonal < diagonalMax && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1]) {
                    // Horizontal line (the element is a deletion))
                    originalIndex = reversePoints[diagonal + 1] - 1;
                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;
                    if (originalIndex > lastOriginalIndex) {
                        changeHelper.MarkNextChange();
                    }
                    lastOriginalIndex = originalIndex + 1;
                    changeHelper.AddOriginalElement(originalIndex + 1, modifiedIndex + 1);
                    diagonalRelative = diagonal + 1 - diagonalReverseBase; //Setup for the next iteration
                } else {
                    // Vertical line (the element is an insertion)
                    originalIndex = reversePoints[diagonal - 1];
                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;
                    if (originalIndex > lastOriginalIndex) {
                        changeHelper.MarkNextChange();
                    }
                    lastOriginalIndex = originalIndex;
                    changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex + 1);
                    diagonalRelative = diagonal - 1 - diagonalReverseBase; //Setup for the next iteration
                }
                if (historyIndex >= 0) {
                    reversePoints = this.m_reverseHistory[historyIndex];
                    diagonalReverseBase = reversePoints[0]; //We stored this in the first spot
                    diagonalMin = 1;
                    diagonalMax = reversePoints.length - 1;
                }
            }while (--historyIndex >= -1)
            // There are cases where the reverse history will find diffs that
            // are correct, but not intuitive, so we need shift them.
            reverseChanges = changeHelper.getChanges();
        }
        return this.ConcatenateChanges(forwardChanges, reverseChanges);
    }
    /**
     * Given the range to compute the diff on, this method finds the point:
     * (midOriginal, midModified)
     * that exists in the middle of the LCS of the two sequences and
     * is the point at which the LCS problem may be broken down recursively.
     * This method will try to keep the LCS trace in memory. If the LCS recursion
     * point is calculated and the full trace is available in memory, then this method
     * will return the change list.
     * @param originalStart The start bound of the original sequence range
     * @param originalEnd The end bound of the original sequence range
     * @param modifiedStart The start bound of the modified sequence range
     * @param modifiedEnd The end bound of the modified sequence range
     * @param midOriginal The middle point of the original sequence range
     * @param midModified The middle point of the modified sequence range
     * @returns The diff changes, if available, otherwise null
     */ ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr) {
        let originalIndex = 0, modifiedIndex = 0;
        let diagonalForwardStart = 0, diagonalForwardEnd = 0;
        let diagonalReverseStart = 0, diagonalReverseEnd = 0;
        // To traverse the edit graph and produce the proper LCS, our actual
        // start position is just outside the given boundary
        originalStart--;
        modifiedStart--;
        // We set these up to make the compiler happy, but they will
        // be replaced before we return with the actual recursion point
        midOriginalArr[0] = 0;
        midModifiedArr[0] = 0;
        // Clear out the history
        this.m_forwardHistory = [];
        this.m_reverseHistory = [];
        // Each cell in the two arrays corresponds to a diagonal in the edit graph.
        // The integer value in the cell represents the originalIndex of the furthest
        // reaching point found so far that ends in that diagonal.
        // The modifiedIndex can be computed mathematically from the originalIndex and the diagonal number.
        const maxDifferences = originalEnd - originalStart + (modifiedEnd - modifiedStart);
        const numDiagonals = maxDifferences + 1;
        const forwardPoints = new Int32Array(numDiagonals);
        const reversePoints = new Int32Array(numDiagonals);
        // diagonalForwardBase: Index into forwardPoints of the diagonal which passes through (originalStart, modifiedStart)
        // diagonalReverseBase: Index into reversePoints of the diagonal which passes through (originalEnd, modifiedEnd)
        const diagonalForwardBase = modifiedEnd - modifiedStart;
        const diagonalReverseBase = originalEnd - originalStart;
        // diagonalForwardOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the
        //    diagonal number (relative to diagonalForwardBase)
        // diagonalReverseOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the
        //    diagonal number (relative to diagonalReverseBase)
        const diagonalForwardOffset = originalStart - modifiedStart;
        const diagonalReverseOffset = originalEnd - modifiedEnd;
        // delta: The difference between the end diagonal and the start diagonal. This is used to relate diagonal numbers
        //   relative to the start diagonal with diagonal numbers relative to the end diagonal.
        // The Even/Oddn-ness of this delta is important for determining when we should check for overlap
        const delta = diagonalReverseBase - diagonalForwardBase;
        const deltaIsEven = delta % 2 === 0;
        // Here we set up the start and end points as the furthest points found so far
        // in both the forward and reverse directions, respectively
        forwardPoints[diagonalForwardBase] = originalStart;
        reversePoints[diagonalReverseBase] = originalEnd;
        // Remember if we quit early, and thus need to do a best-effort result instead of a real result.
        quitEarlyArr[0] = false;
        // A couple of points:
        // --With this method, we iterate on the number of differences between the two sequences.
        //   The more differences there actually are, the longer this will take.
        // --Also, as the number of differences increases, we have to search on diagonals further
        //   away from the reference diagonal (which is diagonalForwardBase for forward, diagonalReverseBase for reverse).
        // --We extend on even diagonals (relative to the reference diagonal) only when numDifferences
        //   is even and odd diagonals only when numDifferences is odd.
        for(let numDifferences = 1; numDifferences <= maxDifferences / 2 + 1; numDifferences++){
            let furthestOriginalIndex = 0;
            let furthestModifiedIndex = 0;
            // Run the algorithm in the forward direction
            diagonalForwardStart = this.ClipDiagonalBound(diagonalForwardBase - numDifferences, numDifferences, diagonalForwardBase, numDiagonals);
            diagonalForwardEnd = this.ClipDiagonalBound(diagonalForwardBase + numDifferences, numDifferences, diagonalForwardBase, numDiagonals);
            for(let diagonal = diagonalForwardStart; diagonal <= diagonalForwardEnd; diagonal += 2){
                // STEP 1: We extend the furthest reaching point in the present diagonal
                // by looking at the diagonals above and below and picking the one whose point
                // is further away from the start point (originalStart, modifiedStart)
                if (diagonal === diagonalForwardStart || diagonal < diagonalForwardEnd && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1]) {
                    originalIndex = forwardPoints[diagonal + 1];
                } else {
                    originalIndex = forwardPoints[diagonal - 1] + 1;
                }
                modifiedIndex = originalIndex - (diagonal - diagonalForwardBase) - diagonalForwardOffset;
                // Save the current originalIndex so we can test for false overlap in step 3
                const tempOriginalIndex = originalIndex;
                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal
                // so long as the elements are equal.
                while(originalIndex < originalEnd && modifiedIndex < modifiedEnd && this.ElementsAreEqual(originalIndex + 1, modifiedIndex + 1)){
                    originalIndex++;
                    modifiedIndex++;
                }
                forwardPoints[diagonal] = originalIndex;
                if (originalIndex + modifiedIndex > furthestOriginalIndex + furthestModifiedIndex) {
                    furthestOriginalIndex = originalIndex;
                    furthestModifiedIndex = modifiedIndex;
                }
                // STEP 3: If delta is odd (overlap first happens on forward when delta is odd)
                // and diagonal is in the range of reverse diagonals computed for numDifferences-1
                // (the previous iteration; we haven't computed reverse diagonals for numDifferences yet)
                // then check for overlap.
                if (!deltaIsEven && Math.abs(diagonal - diagonalReverseBase) <= numDifferences - 1) {
                    if (originalIndex >= reversePoints[diagonal]) {
                        midOriginalArr[0] = originalIndex;
                        midModifiedArr[0] = modifiedIndex;
                        if (tempOriginalIndex <= reversePoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */  > 0 && numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */  + 1) {
                            // BINGO! We overlapped, and we have the full trace in memory!
                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
                        } else {
                            // Either false overlap, or we didn't have enough memory for the full trace
                            // Just return the recursion point
                            return null;
                        }
                    }
                }
            }
            // Check to see if we should be quitting early, before moving on to the next iteration.
            const matchLengthOfLongest = (furthestOriginalIndex - originalStart + (furthestModifiedIndex - modifiedStart) - numDifferences) / 2;
            if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(furthestOriginalIndex, matchLengthOfLongest)) {
                // We can't finish, so skip ahead to generating a result from what we have.
                quitEarlyArr[0] = true;
                // Use the furthest distance we got in the forward direction.
                midOriginalArr[0] = furthestOriginalIndex;
                midModifiedArr[0] = furthestModifiedIndex;
                if (matchLengthOfLongest > 0 && 1447 /* LocalConstants.MaxDifferencesHistory */  > 0 && numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */  + 1) {
                    // Enough of the history is in memory to walk it backwards
                    return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
                } else {
                    // We didn't actually remember enough of the history.
                    //Since we are quitting the diff early, we need to shift back the originalStart and modified start
                    //back into the boundary limits since we decremented their value above beyond the boundary limit.
                    originalStart++;
                    modifiedStart++;
                    return [
                        new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$diff$2f$diffChange$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DiffChange"](originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)
                    ];
                }
            }
            // Run the algorithm in the reverse direction
            diagonalReverseStart = this.ClipDiagonalBound(diagonalReverseBase - numDifferences, numDifferences, diagonalReverseBase, numDiagonals);
            diagonalReverseEnd = this.ClipDiagonalBound(diagonalReverseBase + numDifferences, numDifferences, diagonalReverseBase, numDiagonals);
            for(let diagonal = diagonalReverseStart; diagonal <= diagonalReverseEnd; diagonal += 2){
                // STEP 1: We extend the furthest reaching point in the present diagonal
                // by looking at the diagonals above and below and picking the one whose point
                // is further away from the start point (originalEnd, modifiedEnd)
                if (diagonal === diagonalReverseStart || diagonal < diagonalReverseEnd && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1]) {
                    originalIndex = reversePoints[diagonal + 1] - 1;
                } else {
                    originalIndex = reversePoints[diagonal - 1];
                }
                modifiedIndex = originalIndex - (diagonal - diagonalReverseBase) - diagonalReverseOffset;
                // Save the current originalIndex so we can test for false overlap
                const tempOriginalIndex = originalIndex;
                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal
                // as long as the elements are equal.
                while(originalIndex > originalStart && modifiedIndex > modifiedStart && this.ElementsAreEqual(originalIndex, modifiedIndex)){
                    originalIndex--;
                    modifiedIndex--;
                }
                reversePoints[diagonal] = originalIndex;
                // STEP 4: If delta is even (overlap first happens on reverse when delta is even)
                // and diagonal is in the range of forward diagonals computed for numDifferences
                // then check for overlap.
                if (deltaIsEven && Math.abs(diagonal - diagonalForwardBase) <= numDifferences) {
                    if (originalIndex <= forwardPoints[diagonal]) {
                        midOriginalArr[0] = originalIndex;
                        midModifiedArr[0] = modifiedIndex;
                        if (tempOriginalIndex >= forwardPoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */  > 0 && numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */  + 1) {
                            // BINGO! We overlapped, and we have the full trace in memory!
                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
                        } else {
                            // Either false overlap, or we didn't have enough memory for the full trace
                            // Just return the recursion point
                            return null;
                        }
                    }
                }
            }
            // Save current vectors to history before the next iteration
            if (numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */ ) {
                // We are allocating space for one extra int, which we fill with
                // the index of the diagonal base index
                let temp = new Int32Array(diagonalForwardEnd - diagonalForwardStart + 2);
                temp[0] = diagonalForwardBase - diagonalForwardStart + 1;
                MyArray.Copy2(forwardPoints, diagonalForwardStart, temp, 1, diagonalForwardEnd - diagonalForwardStart + 1);
                this.m_forwardHistory.push(temp);
                temp = new Int32Array(diagonalReverseEnd - diagonalReverseStart + 2);
                temp[0] = diagonalReverseBase - diagonalReverseStart + 1;
                MyArray.Copy2(reversePoints, diagonalReverseStart, temp, 1, diagonalReverseEnd - diagonalReverseStart + 1);
                this.m_reverseHistory.push(temp);
            }
        }
        // If we got here, then we have the full trace in history. We just have to convert it to a change list
        // NOTE: This part is a bit messy
        return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
    }
    /**
     * Shifts the given changes to provide a more intuitive diff.
     * While the first element in a diff matches the first element after the diff,
     * we shift the diff down.
     *
     * @param changes The list of changes to shift
     * @returns The shifted changes
     */ PrettifyChanges(changes) {
        // Shift all the changes down first
        for(let i = 0; i < changes.length; i++){
            const change = changes[i];
            const originalStop = i < changes.length - 1 ? changes[i + 1].originalStart : this._originalElementsOrHash.length;
            const modifiedStop = i < changes.length - 1 ? changes[i + 1].modifiedStart : this._modifiedElementsOrHash.length;
            const checkOriginal = change.originalLength > 0;
            const checkModified = change.modifiedLength > 0;
            while(change.originalStart + change.originalLength < originalStop && change.modifiedStart + change.modifiedLength < modifiedStop && (!checkOriginal || this.OriginalElementsAreEqual(change.originalStart, change.originalStart + change.originalLength)) && (!checkModified || this.ModifiedElementsAreEqual(change.modifiedStart, change.modifiedStart + change.modifiedLength))){
                const startStrictEqual = this.ElementsAreStrictEqual(change.originalStart, change.modifiedStart);
                const endStrictEqual = this.ElementsAreStrictEqual(change.originalStart + change.originalLength, change.modifiedStart + change.modifiedLength);
                if (endStrictEqual && !startStrictEqual) {
                    break;
                }
                change.originalStart++;
                change.modifiedStart++;
            }
            const mergedChangeArr = [
                null
            ];
            if (i < changes.length - 1 && this.ChangesOverlap(changes[i], changes[i + 1], mergedChangeArr)) {
                changes[i] = mergedChangeArr[0];
                changes.splice(i + 1, 1);
                i--;
                continue;
            }
        }
        // Shift changes back up until we hit empty or whitespace-only lines
        for(let i = changes.length - 1; i >= 0; i--){
            const change = changes[i];
            let originalStop = 0;
            let modifiedStop = 0;
            if (i > 0) {
                const prevChange = changes[i - 1];
                originalStop = prevChange.originalStart + prevChange.originalLength;
                modifiedStop = prevChange.modifiedStart + prevChange.modifiedLength;
            }
            const checkOriginal = change.originalLength > 0;
            const checkModified = change.modifiedLength > 0;
            let bestDelta = 0;
            let bestScore = this._boundaryScore(change.originalStart, change.originalLength, change.modifiedStart, change.modifiedLength);
            for(let delta = 1;; delta++){
                const originalStart = change.originalStart - delta;
                const modifiedStart = change.modifiedStart - delta;
                if (originalStart < originalStop || modifiedStart < modifiedStop) {
                    break;
                }
                if (checkOriginal && !this.OriginalElementsAreEqual(originalStart, originalStart + change.originalLength)) {
                    break;
                }
                if (checkModified && !this.ModifiedElementsAreEqual(modifiedStart, modifiedStart + change.modifiedLength)) {
                    break;
                }
                const touchingPreviousChange = originalStart === originalStop && modifiedStart === modifiedStop;
                const score = (touchingPreviousChange ? 5 : 0) + this._boundaryScore(originalStart, change.originalLength, modifiedStart, change.modifiedLength);
                if (score > bestScore) {
                    bestScore = score;
                    bestDelta = delta;
                }
            }
            change.originalStart -= bestDelta;
            change.modifiedStart -= bestDelta;
            const mergedChangeArr = [
                null
            ];
            if (i > 0 && this.ChangesOverlap(changes[i - 1], changes[i], mergedChangeArr)) {
                changes[i - 1] = mergedChangeArr[0];
                changes.splice(i, 1);
                i++;
                continue;
            }
        }
        // There could be multiple longest common substrings.
        // Give preference to the ones containing longer lines
        if (this._hasStrings) {
            for(let i = 1, len = changes.length; i < len; i++){
                const aChange = changes[i - 1];
                const bChange = changes[i];
                const matchedLength = bChange.originalStart - aChange.originalStart - aChange.originalLength;
                const aOriginalStart = aChange.originalStart;
                const bOriginalEnd = bChange.originalStart + bChange.originalLength;
                const abOriginalLength = bOriginalEnd - aOriginalStart;
                const aModifiedStart = aChange.modifiedStart;
                const bModifiedEnd = bChange.modifiedStart + bChange.modifiedLength;
                const abModifiedLength = bModifiedEnd - aModifiedStart;
                // Avoid wasting a lot of time with these searches
                if (matchedLength < 5 && abOriginalLength < 20 && abModifiedLength < 20) {
                    const t = this._findBetterContiguousSequence(aOriginalStart, abOriginalLength, aModifiedStart, abModifiedLength, matchedLength);
                    if (t) {
                        const [originalMatchStart, modifiedMatchStart] = t;
                        if (originalMatchStart !== aChange.originalStart + aChange.originalLength || modifiedMatchStart !== aChange.modifiedStart + aChange.modifiedLength) {
                            // switch to another sequence that has a better score
                            aChange.originalLength = originalMatchStart - aChange.originalStart;
                            aChange.modifiedLength = modifiedMatchStart - aChange.modifiedStart;
                            bChange.originalStart = originalMatchStart + matchedLength;
                            bChange.modifiedStart = modifiedMatchStart + matchedLength;
                            bChange.originalLength = bOriginalEnd - bChange.originalStart;
                            bChange.modifiedLength = bModifiedEnd - bChange.modifiedStart;
                        }
                    }
                }
            }
        }
        return changes;
    }
    _findBetterContiguousSequence(originalStart, originalLength, modifiedStart, modifiedLength, desiredLength) {
        if (originalLength < desiredLength || modifiedLength < desiredLength) {
            return null;
        }
        const originalMax = originalStart + originalLength - desiredLength + 1;
        const modifiedMax = modifiedStart + modifiedLength - desiredLength + 1;
        let bestScore = 0;
        let bestOriginalStart = 0;
        let bestModifiedStart = 0;
        for(let i = originalStart; i < originalMax; i++){
            for(let j = modifiedStart; j < modifiedMax; j++){
                const score = this._contiguousSequenceScore(i, j, desiredLength);
                if (score > 0 && score > bestScore) {
                    bestScore = score;
                    bestOriginalStart = i;
                    bestModifiedStart = j;
                }
            }
        }
        if (bestScore > 0) {
            return [
                bestOriginalStart,
                bestModifiedStart
            ];
        }
        return null;
    }
    _contiguousSequenceScore(originalStart, modifiedStart, length) {
        let score = 0;
        for(let l = 0; l < length; l++){
            if (!this.ElementsAreEqual(originalStart + l, modifiedStart + l)) {
                return 0;
            }
            score += this._originalStringElements[originalStart + l].length;
        }
        return score;
    }
    _OriginalIsBoundary(index) {
        if (index <= 0 || index >= this._originalElementsOrHash.length - 1) {
            return true;
        }
        return this._hasStrings && /^\s*$/.test(this._originalStringElements[index]);
    }
    _OriginalRegionIsBoundary(originalStart, originalLength) {
        if (this._OriginalIsBoundary(originalStart) || this._OriginalIsBoundary(originalStart - 1)) {
            return true;
        }
        if (originalLength > 0) {
            const originalEnd = originalStart + originalLength;
            if (this._OriginalIsBoundary(originalEnd - 1) || this._OriginalIsBoundary(originalEnd)) {
                return true;
            }
        }
        return false;
    }
    _ModifiedIsBoundary(index) {
        if (index <= 0 || index >= this._modifiedElementsOrHash.length - 1) {
            return true;
        }
        return this._hasStrings && /^\s*$/.test(this._modifiedStringElements[index]);
    }
    _ModifiedRegionIsBoundary(modifiedStart, modifiedLength) {
        if (this._ModifiedIsBoundary(modifiedStart) || this._ModifiedIsBoundary(modifiedStart - 1)) {
            return true;
        }
        if (modifiedLength > 0) {
            const modifiedEnd = modifiedStart + modifiedLength;
            if (this._ModifiedIsBoundary(modifiedEnd - 1) || this._ModifiedIsBoundary(modifiedEnd)) {
                return true;
            }
        }
        return false;
    }
    _boundaryScore(originalStart, originalLength, modifiedStart, modifiedLength) {
        const originalScore = this._OriginalRegionIsBoundary(originalStart, originalLength) ? 1 : 0;
        const modifiedScore = this._ModifiedRegionIsBoundary(modifiedStart, modifiedLength) ? 1 : 0;
        return originalScore + modifiedScore;
    }
    /**
     * Concatenates the two input DiffChange lists and returns the resulting
     * list.
     * @param The left changes
     * @param The right changes
     * @returns The concatenated list
     */ ConcatenateChanges(left, right) {
        const mergedChangeArr = [];
        if (left.length === 0 || right.length === 0) {
            return right.length > 0 ? right : left;
        } else if (this.ChangesOverlap(left[left.length - 1], right[0], mergedChangeArr)) {
            // Since we break the problem down recursively, it is possible that we
            // might recurse in the middle of a change thereby splitting it into
            // two changes. Here in the combining stage, we detect and fuse those
            // changes back together
            const result = new Array(left.length + right.length - 1);
            MyArray.Copy(left, 0, result, 0, left.length - 1);
            result[left.length - 1] = mergedChangeArr[0];
            MyArray.Copy(right, 1, result, left.length, right.length - 1);
            return result;
        } else {
            const result = new Array(left.length + right.length);
            MyArray.Copy(left, 0, result, 0, left.length);
            MyArray.Copy(right, 0, result, left.length, right.length);
            return result;
        }
    }
    /**
     * Returns true if the two changes overlap and can be merged into a single
     * change
     * @param left The left change
     * @param right The right change
     * @param mergedChange The merged change if the two overlap, null otherwise
     * @returns True if the two changes overlap
     */ ChangesOverlap(left, right, mergedChangeArr) {
        Debug.Assert(left.originalStart <= right.originalStart, 'Left change is not less than or equal to right change');
        Debug.Assert(left.modifiedStart <= right.modifiedStart, 'Left change is not less than or equal to right change');
        if (left.originalStart + left.originalLength >= right.originalStart || left.modifiedStart + left.modifiedLength >= right.modifiedStart) {
            const originalStart = left.originalStart;
            let originalLength = left.originalLength;
            const modifiedStart = left.modifiedStart;
            let modifiedLength = left.modifiedLength;
            if (left.originalStart + left.originalLength >= right.originalStart) {
                originalLength = right.originalStart + right.originalLength - left.originalStart;
            }
            if (left.modifiedStart + left.modifiedLength >= right.modifiedStart) {
                modifiedLength = right.modifiedStart + right.modifiedLength - left.modifiedStart;
            }
            mergedChangeArr[0] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$diff$2f$diffChange$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DiffChange"](originalStart, originalLength, modifiedStart, modifiedLength);
            return true;
        } else {
            mergedChangeArr[0] = null;
            return false;
        }
    }
    /**
     * Helper method used to clip a diagonal index to the range of valid
     * diagonals. This also decides whether or not the diagonal index,
     * if it exceeds the boundary, should be clipped to the boundary or clipped
     * one inside the boundary depending on the Even/Odd status of the boundary
     * and numDifferences.
     * @param diagonal The index of the diagonal to clip.
     * @param numDifferences The current number of differences being iterated upon.
     * @param diagonalBaseIndex The base reference diagonal.
     * @param numDiagonals The total number of diagonals.
     * @returns The clipped diagonal index.
     */ ClipDiagonalBound(diagonal, numDifferences, diagonalBaseIndex, numDiagonals) {
        if (diagonal >= 0 && diagonal < numDiagonals) {
            // Nothing to clip, its in range
            return diagonal;
        }
        // diagonalsBelow: The number of diagonals below the reference diagonal
        // diagonalsAbove: The number of diagonals above the reference diagonal
        const diagonalsBelow = diagonalBaseIndex;
        const diagonalsAbove = numDiagonals - diagonalBaseIndex - 1;
        const diffEven = numDifferences % 2 === 0;
        if (diagonal < 0) {
            const lowerBoundEven = diagonalsBelow % 2 === 0;
            return diffEven === lowerBoundEven ? 0 : 1;
        } else {
            const upperBoundEven = diagonalsAbove % 2 === 0;
            return diffEven === upperBoundEven ? numDiagonals - 1 : numDiagonals - 2;
        }
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/uint.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "toUint32": (()=>toUint32),
    "toUint8": (()=>toUint8)
});
function toUint8(v) {
    if (v < 0) {
        return 0;
    }
    if (v > 255 /* Constants.MAX_UINT_8 */ ) {
        return 255 /* Constants.MAX_UINT_8 */ ;
    }
    return v | 0;
}
function toUint32(v) {
    if (v < 0) {
        return 0;
    }
    if (v > 4294967295 /* Constants.MAX_UINT_32 */ ) {
        return 4294967295 /* Constants.MAX_UINT_32 */ ;
    }
    return v | 0;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/map.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "BidirectionalMap": (()=>BidirectionalMap),
    "LRUCache": (()=>LRUCache),
    "LinkedMap": (()=>LinkedMap),
    "ResourceMap": (()=>ResourceMap),
    "SetMap": (()=>SetMap)
});
var _a, _b;
class ResourceMapEntry {
    constructor(uri, value){
        this.uri = uri;
        this.value = value;
    }
}
function isEntries(arg) {
    return Array.isArray(arg);
}
class ResourceMap {
    static{
        this.defaultToKey = (resource)=>resource.toString();
    }
    constructor(arg, toKey){
        this[_a] = 'ResourceMap';
        if (arg instanceof ResourceMap) {
            this.map = new Map(arg.map);
            this.toKey = toKey ?? ResourceMap.defaultToKey;
        } else if (isEntries(arg)) {
            this.map = new Map();
            this.toKey = toKey ?? ResourceMap.defaultToKey;
            for (const [resource, value] of arg){
                this.set(resource, value);
            }
        } else {
            this.map = new Map();
            this.toKey = arg ?? ResourceMap.defaultToKey;
        }
    }
    set(resource, value) {
        this.map.set(this.toKey(resource), new ResourceMapEntry(resource, value));
        return this;
    }
    get(resource) {
        return this.map.get(this.toKey(resource))?.value;
    }
    has(resource) {
        return this.map.has(this.toKey(resource));
    }
    get size() {
        return this.map.size;
    }
    clear() {
        this.map.clear();
    }
    delete(resource) {
        return this.map.delete(this.toKey(resource));
    }
    forEach(clb, thisArg) {
        if (typeof thisArg !== 'undefined') {
            clb = clb.bind(thisArg);
        }
        for (const [_, entry] of this.map){
            clb(entry.value, entry.uri, this);
        }
    }
    *values() {
        for (const entry of this.map.values()){
            yield entry.value;
        }
    }
    *keys() {
        for (const entry of this.map.values()){
            yield entry.uri;
        }
    }
    *entries() {
        for (const entry of this.map.values()){
            yield [
                entry.uri,
                entry.value
            ];
        }
    }
    *[(_a = Symbol.toStringTag, Symbol.iterator)]() {
        for (const [, entry] of this.map){
            yield [
                entry.uri,
                entry.value
            ];
        }
    }
}
class LinkedMap {
    constructor(){
        this[_b] = 'LinkedMap';
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state++;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    get first() {
        return this._head?.value;
    }
    get last() {
        return this._tail?.value;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key, touch = 0 /* Touch.None */ ) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        if (touch !== 0 /* Touch.None */ ) {
            this.touch(item, touch);
        }
        return item.value;
    }
    set(key, value, touch = 0 /* Touch.None */ ) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== 0 /* Touch.None */ ) {
                this.touch(item, touch);
            }
        } else {
            item = {
                key,
                value,
                next: undefined,
                previous: undefined
            };
            switch(touch){
                case 0 /* Touch.None */ :
                    this.addItemLast(item);
                    break;
                case 1 /* Touch.AsOld */ :
                    this.addItemFirst(item);
                    break;
                case 2 /* Touch.AsNew */ :
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
        return this;
    }
    delete(key) {
        return !!this.remove(key);
    }
    remove(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while(current){
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            } else {
                callbackfn(current.value, current.key, this);
            }
            if (this._state !== state) {
                throw new Error(`LinkedMap got modified during iteration.`);
            }
            current = current.next;
        }
    }
    keys() {
        const map = this;
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator] () {
                return iterator;
            },
            next () {
                if (map._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = {
                        value: current.key,
                        done: false
                    };
                    current = current.next;
                    return result;
                } else {
                    return {
                        value: undefined,
                        done: true
                    };
                }
            }
        };
        return iterator;
    }
    values() {
        const map = this;
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator] () {
                return iterator;
            },
            next () {
                if (map._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = {
                        value: current.value,
                        done: false
                    };
                    current = current.next;
                    return result;
                } else {
                    return {
                        value: undefined,
                        done: true
                    };
                }
            }
        };
        return iterator;
    }
    entries() {
        const map = this;
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator] () {
                return iterator;
            },
            next () {
                if (map._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = {
                        value: [
                            current.key,
                            current.value
                        ],
                        done: false
                    };
                    current = current.next;
                    return result;
                } else {
                    return {
                        value: undefined,
                        done: true
                    };
                }
            }
        };
        return iterator;
    }
    [(_b = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
    }
    trimOld(newSize) {
        if (newSize >= this.size) {
            return;
        }
        if (newSize === 0) {
            this.clear();
            return;
        }
        let current = this._head;
        let currentSize = this.size;
        while(current && currentSize > newSize){
            this._map.delete(current.key);
            current = current.next;
            currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
            current.previous = undefined;
        }
        this._state++;
    }
    trimNew(newSize) {
        if (newSize >= this.size) {
            return;
        }
        if (newSize === 0) {
            this.clear();
            return;
        }
        let current = this._tail;
        let currentSize = this.size;
        while(current && currentSize > newSize){
            this._map.delete(current.key);
            current = current.previous;
            currentSize--;
        }
        this._tail = current;
        this._size = currentSize;
        if (current) {
            current.next = undefined;
        }
        this._state++;
    }
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        } else if (!this._head) {
            throw new Error('Invalid list');
        } else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
        this._state++;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        } else if (!this._tail) {
            throw new Error('Invalid list');
        } else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
        this._state++;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        } else if (item === this._head) {
            // This can only happen if size === 1 which is handled
            // by the case above.
            if (!item.next) {
                throw new Error('Invalid list');
            }
            item.next.previous = undefined;
            this._head = item.next;
        } else if (item === this._tail) {
            // This can only happen if size === 1 which is handled
            // by the case above.
            if (!item.previous) {
                throw new Error('Invalid list');
            }
            item.previous.next = undefined;
            this._tail = item.previous;
        } else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
        item.next = undefined;
        item.previous = undefined;
        this._state++;
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if (touch !== 1 /* Touch.AsOld */  && touch !== 2 /* Touch.AsNew */ ) {
            return;
        }
        if (touch === 1 /* Touch.AsOld */ ) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            } else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
            this._state++;
        } else if (touch === 2 /* Touch.AsNew */ ) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            } else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
            this._state++;
        }
    }
    toJSON() {
        const data = [];
        this.forEach((value, key)=>{
            data.push([
                key,
                value
            ]);
        });
        return data;
    }
    fromJSON(data) {
        this.clear();
        for (const [key, value] of data){
            this.set(key, value);
        }
    }
}
class Cache extends LinkedMap {
    constructor(limit, ratio = 1){
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
    }
    get limit() {
        return this._limit;
    }
    set limit(limit) {
        this._limit = limit;
        this.checkTrim();
    }
    get(key, touch = 2 /* Touch.AsNew */ ) {
        return super.get(key, touch);
    }
    peek(key) {
        return super.get(key, 0 /* Touch.None */ );
    }
    set(key, value) {
        super.set(key, value, 2 /* Touch.AsNew */ );
        return this;
    }
    checkTrim() {
        if (this.size > this._limit) {
            this.trim(Math.round(this._limit * this._ratio));
        }
    }
}
class LRUCache extends Cache {
    constructor(limit, ratio = 1){
        super(limit, ratio);
    }
    trim(newSize) {
        this.trimOld(newSize);
    }
    set(key, value) {
        super.set(key, value);
        this.checkTrim();
        return this;
    }
}
class BidirectionalMap {
    constructor(entries){
        this._m1 = new Map();
        this._m2 = new Map();
        if (entries) {
            for (const [key, value] of entries){
                this.set(key, value);
            }
        }
    }
    clear() {
        this._m1.clear();
        this._m2.clear();
    }
    set(key, value) {
        this._m1.set(key, value);
        this._m2.set(value, key);
    }
    get(key) {
        return this._m1.get(key);
    }
    getKey(value) {
        return this._m2.get(value);
    }
    delete(key) {
        const value = this._m1.get(key);
        if (value === undefined) {
            return false;
        }
        this._m1.delete(key);
        this._m2.delete(value);
        return true;
    }
    keys() {
        return this._m1.keys();
    }
    values() {
        return this._m1.values();
    }
}
class SetMap {
    constructor(){
        this.map = new Map();
    }
    add(key, value) {
        let values = this.map.get(key);
        if (!values) {
            values = new Set();
            this.map.set(key, values);
        }
        values.add(value);
    }
    delete(key, value) {
        const values = this.map.get(key);
        if (!values) {
            return;
        }
        values.delete(value);
        if (values.size === 0) {
            this.map.delete(key);
        }
    }
    forEach(key, fn) {
        const values = this.map.get(key);
        if (!values) {
            return;
        }
        values.forEach(fn);
    }
    get(key) {
        const values = this.map.get(key);
        if (!values) {
            return new Set();
        }
        return values;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/arraysFind.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "MonotonousArray": (()=>MonotonousArray),
    "findFirstIdxMonotonousOrArrLen": (()=>findFirstIdxMonotonousOrArrLen),
    "findFirstMax": (()=>findFirstMax),
    "findFirstMin": (()=>findFirstMin),
    "findFirstMonotonous": (()=>findFirstMonotonous),
    "findLast": (()=>findLast),
    "findLastIdx": (()=>findLastIdx),
    "findLastIdxMonotonous": (()=>findLastIdxMonotonous),
    "findLastMax": (()=>findLastMax),
    "findLastMonotonous": (()=>findLastMonotonous),
    "findMaxIdx": (()=>findMaxIdx),
    "mapFindFirst": (()=>mapFindFirst)
});
function findLast(array, predicate) {
    const idx = findLastIdx(array, predicate);
    if (idx === -1) {
        return undefined;
    }
    return array[idx];
}
function findLastIdx(array, predicate, fromIndex = array.length - 1) {
    for(let i = fromIndex; i >= 0; i--){
        const element = array[i];
        if (predicate(element)) {
            return i;
        }
    }
    return -1;
}
function findLastMonotonous(array, predicate) {
    const idx = findLastIdxMonotonous(array, predicate);
    return idx === -1 ? undefined : array[idx];
}
function findLastIdxMonotonous(array, predicate, startIdx = 0, endIdxEx = array.length) {
    let i = startIdx;
    let j = endIdxEx;
    while(i < j){
        const k = Math.floor((i + j) / 2);
        if (predicate(array[k])) {
            i = k + 1;
        } else {
            j = k;
        }
    }
    return i - 1;
}
function findFirstMonotonous(array, predicate) {
    const idx = findFirstIdxMonotonousOrArrLen(array, predicate);
    return idx === array.length ? undefined : array[idx];
}
function findFirstIdxMonotonousOrArrLen(array, predicate, startIdx = 0, endIdxEx = array.length) {
    let i = startIdx;
    let j = endIdxEx;
    while(i < j){
        const k = Math.floor((i + j) / 2);
        if (predicate(array[k])) {
            j = k;
        } else {
            i = k + 1;
        }
    }
    return i;
}
class MonotonousArray {
    static{
        this.assertInvariants = false;
    }
    constructor(_array){
        this._array = _array;
        this._findLastMonotonousLastIdx = 0;
    }
    /**
     * The predicate must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!
     * For subsequent calls, current predicate must be weaker than (or equal to) the previous predicate, i.e. more entries must be `true`.
     */ findLastMonotonous(predicate) {
        if (MonotonousArray.assertInvariants) {
            if (this._prevFindLastPredicate) {
                for (const item of this._array){
                    if (this._prevFindLastPredicate(item) && !predicate(item)) {
                        throw new Error('MonotonousArray: current predicate must be weaker than (or equal to) the previous predicate.');
                    }
                }
            }
            this._prevFindLastPredicate = predicate;
        }
        const idx = findLastIdxMonotonous(this._array, predicate, this._findLastMonotonousLastIdx);
        this._findLastMonotonousLastIdx = idx + 1;
        return idx === -1 ? undefined : this._array[idx];
    }
}
function findFirstMax(array, comparator) {
    if (array.length === 0) {
        return undefined;
    }
    let max = array[0];
    for(let i = 1; i < array.length; i++){
        const item = array[i];
        if (comparator(item, max) > 0) {
            max = item;
        }
    }
    return max;
}
function findLastMax(array, comparator) {
    if (array.length === 0) {
        return undefined;
    }
    let max = array[0];
    for(let i = 1; i < array.length; i++){
        const item = array[i];
        if (comparator(item, max) >= 0) {
            max = item;
        }
    }
    return max;
}
function findFirstMin(array, comparator) {
    return findFirstMax(array, (a, b)=>-comparator(a, b));
}
function findMaxIdx(array, comparator) {
    if (array.length === 0) {
        return -1;
    }
    let maxIdx = 0;
    for(let i = 1; i < array.length; i++){
        const item = array[i];
        if (comparator(item, array[maxIdx]) > 0) {
            maxIdx = i;
        }
    }
    return maxIdx;
}
function mapFindFirst(items, mapFn) {
    for (const value of items){
        const mapped = mapFn(value);
        if (mapped !== undefined) {
            return mapped;
        }
    }
    return undefined;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/color.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "Color": (()=>Color),
    "HSLA": (()=>HSLA),
    "HSVA": (()=>HSVA),
    "RGBA": (()=>RGBA)
});
function roundFloat(number, decimalPoints) {
    const decimal = Math.pow(10, decimalPoints);
    return Math.round(number * decimal) / decimal;
}
class RGBA {
    constructor(r, g, b, a = 1){
        this._rgbaBrand = undefined;
        this.r = Math.min(255, Math.max(0, r)) | 0;
        this.g = Math.min(255, Math.max(0, g)) | 0;
        this.b = Math.min(255, Math.max(0, b)) | 0;
        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);
    }
    static equals(a, b) {
        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;
    }
}
class HSLA {
    constructor(h, s, l, a){
        this._hslaBrand = undefined;
        this.h = Math.max(Math.min(360, h), 0) | 0;
        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);
        this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);
        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);
    }
    static equals(a, b) {
        return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;
    }
    /**
     * Converts an RGB color value to HSL. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes r, g, and b are contained in the set [0, 255] and
     * returns h in the set [0, 360], s, and l in the set [0, 1].
     */ static fromRGBA(rgba) {
        const r = rgba.r / 255;
        const g = rgba.g / 255;
        const b = rgba.b / 255;
        const a = rgba.a;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let h = 0;
        let s = 0;
        const l = (min + max) / 2;
        const chroma = max - min;
        if (chroma > 0) {
            s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);
            switch(max){
                case r:
                    h = (g - b) / chroma + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / chroma + 2;
                    break;
                case b:
                    h = (r - g) / chroma + 4;
                    break;
            }
            h *= 60;
            h = Math.round(h);
        }
        return new HSLA(h, s, l, a);
    }
    static _hue2rgb(p, q, t) {
        if (t < 0) {
            t += 1;
        }
        if (t > 1) {
            t -= 1;
        }
        if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
        }
        if (t < 1 / 2) {
            return q;
        }
        if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
        }
        return p;
    }
    /**
     * Converts an HSL color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     */ static toRGBA(hsla) {
        const h = hsla.h / 360;
        const { s, l, a } = hsla;
        let r, g, b;
        if (s === 0) {
            r = g = b = l; // achromatic
        } else {
            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            const p = 2 * l - q;
            r = HSLA._hue2rgb(p, q, h + 1 / 3);
            g = HSLA._hue2rgb(p, q, h);
            b = HSLA._hue2rgb(p, q, h - 1 / 3);
        }
        return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);
    }
}
class HSVA {
    constructor(h, s, v, a){
        this._hsvaBrand = undefined;
        this.h = Math.max(Math.min(360, h), 0) | 0;
        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);
        this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);
        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);
    }
    static equals(a, b) {
        return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;
    }
    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm
    static fromRGBA(rgba) {
        const r = rgba.r / 255;
        const g = rgba.g / 255;
        const b = rgba.b / 255;
        const cmax = Math.max(r, g, b);
        const cmin = Math.min(r, g, b);
        const delta = cmax - cmin;
        const s = cmax === 0 ? 0 : delta / cmax;
        let m;
        if (delta === 0) {
            m = 0;
        } else if (cmax === r) {
            m = ((g - b) / delta % 6 + 6) % 6;
        } else if (cmax === g) {
            m = (b - r) / delta + 2;
        } else {
            m = (r - g) / delta + 4;
        }
        return new HSVA(Math.round(m * 60), s, cmax, rgba.a);
    }
    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm
    static toRGBA(hsva) {
        const { h, s, v, a } = hsva;
        const c = v * s;
        const x = c * (1 - Math.abs(h / 60 % 2 - 1));
        const m = v - c;
        let [r, g, b] = [
            0,
            0,
            0
        ];
        if (h < 60) {
            r = c;
            g = x;
        } else if (h < 120) {
            r = x;
            g = c;
        } else if (h < 180) {
            g = c;
            b = x;
        } else if (h < 240) {
            g = x;
            b = c;
        } else if (h < 300) {
            r = x;
            b = c;
        } else if (h <= 360) {
            r = c;
            b = x;
        }
        r = Math.round((r + m) * 255);
        g = Math.round((g + m) * 255);
        b = Math.round((b + m) * 255);
        return new RGBA(r, g, b, a);
    }
}
class Color {
    static fromHex(hex) {
        return Color.Format.CSS.parseHex(hex) || Color.red;
    }
    static equals(a, b) {
        if (!a && !b) {
            return true;
        }
        if (!a || !b) {
            return false;
        }
        return a.equals(b);
    }
    get hsla() {
        if (this._hsla) {
            return this._hsla;
        } else {
            return HSLA.fromRGBA(this.rgba);
        }
    }
    get hsva() {
        if (this._hsva) {
            return this._hsva;
        }
        return HSVA.fromRGBA(this.rgba);
    }
    constructor(arg){
        if (!arg) {
            throw new Error('Color needs a value');
        } else if (arg instanceof RGBA) {
            this.rgba = arg;
        } else if (arg instanceof HSLA) {
            this._hsla = arg;
            this.rgba = HSLA.toRGBA(arg);
        } else if (arg instanceof HSVA) {
            this._hsva = arg;
            this.rgba = HSVA.toRGBA(arg);
        } else {
            throw new Error('Invalid color ctor argument');
        }
    }
    equals(other) {
        return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);
    }
    /**
     * http://www.w3.org/TR/WCAG20/#relativeluminancedef
     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.
     */ getRelativeLuminance() {
        const R = Color._relativeLuminanceForComponent(this.rgba.r);
        const G = Color._relativeLuminanceForComponent(this.rgba.g);
        const B = Color._relativeLuminanceForComponent(this.rgba.b);
        const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;
        return roundFloat(luminance, 4);
    }
    static _relativeLuminanceForComponent(color) {
        const c = color / 255;
        return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
    }
    /**
     *	http://24ways.org/2010/calculating-color-contrast
     *  Return 'true' if lighter color otherwise 'false'
     */ isLighter() {
        const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;
        return yiq >= 128;
    }
    isLighterThan(another) {
        const lum1 = this.getRelativeLuminance();
        const lum2 = another.getRelativeLuminance();
        return lum1 > lum2;
    }
    isDarkerThan(another) {
        const lum1 = this.getRelativeLuminance();
        const lum2 = another.getRelativeLuminance();
        return lum1 < lum2;
    }
    lighten(factor) {
        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));
    }
    darken(factor) {
        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));
    }
    transparent(factor) {
        const { r, g, b, a } = this.rgba;
        return new Color(new RGBA(r, g, b, a * factor));
    }
    isTransparent() {
        return this.rgba.a === 0;
    }
    isOpaque() {
        return this.rgba.a === 1;
    }
    opposite() {
        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));
    }
    makeOpaque(opaqueBackground) {
        if (this.isOpaque() || opaqueBackground.rgba.a !== 1) {
            // only allow to blend onto a non-opaque color onto a opaque color
            return this;
        }
        const { r, g, b, a } = this.rgba;
        // https://stackoverflow.com/questions/12228548/finding-equivalent-color-with-opacity
        return new Color(new RGBA(opaqueBackground.rgba.r - a * (opaqueBackground.rgba.r - r), opaqueBackground.rgba.g - a * (opaqueBackground.rgba.g - g), opaqueBackground.rgba.b - a * (opaqueBackground.rgba.b - b), 1));
    }
    toString() {
        if (!this._toString) {
            this._toString = Color.Format.CSS.format(this);
        }
        return this._toString;
    }
    static getLighterColor(of, relative, factor) {
        if (of.isLighterThan(relative)) {
            return of;
        }
        factor = factor ? factor : 0.5;
        const lum1 = of.getRelativeLuminance();
        const lum2 = relative.getRelativeLuminance();
        factor = factor * (lum2 - lum1) / lum2;
        return of.lighten(factor);
    }
    static getDarkerColor(of, relative, factor) {
        if (of.isDarkerThan(relative)) {
            return of;
        }
        factor = factor ? factor : 0.5;
        const lum1 = of.getRelativeLuminance();
        const lum2 = relative.getRelativeLuminance();
        factor = factor * (lum1 - lum2) / lum1;
        return of.darken(factor);
    }
    static{
        this.white = new Color(new RGBA(255, 255, 255, 1));
    }
    static{
        this.black = new Color(new RGBA(0, 0, 0, 1));
    }
    static{
        this.red = new Color(new RGBA(255, 0, 0, 1));
    }
    static{
        this.blue = new Color(new RGBA(0, 0, 255, 1));
    }
    static{
        this.green = new Color(new RGBA(0, 255, 0, 1));
    }
    static{
        this.cyan = new Color(new RGBA(0, 255, 255, 1));
    }
    static{
        this.lightgrey = new Color(new RGBA(211, 211, 211, 1));
    }
    static{
        this.transparent = new Color(new RGBA(0, 0, 0, 0));
    }
}
(function(Color) {
    let Format;
    (function(Format) {
        let CSS;
        (function(CSS) {
            function formatRGB(color) {
                if (color.rgba.a === 1) {
                    return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;
                }
                return Color.Format.CSS.formatRGBA(color);
            }
            CSS.formatRGB = formatRGB;
            function formatRGBA(color) {
                return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+color.rgba.a.toFixed(2)})`;
            }
            CSS.formatRGBA = formatRGBA;
            function formatHSL(color) {
                if (color.hsla.a === 1) {
                    return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;
                }
                return Color.Format.CSS.formatHSLA(color);
            }
            CSS.formatHSL = formatHSL;
            function formatHSLA(color) {
                return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;
            }
            CSS.formatHSLA = formatHSLA;
            function _toTwoDigitHex(n) {
                const r = n.toString(16);
                return r.length !== 2 ? '0' + r : r;
            }
            /**
             * Formats the color as #RRGGBB
             */ function formatHex(color) {
                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;
            }
            CSS.formatHex = formatHex;
            /**
             * Formats the color as #RRGGBBAA
             * If 'compact' is set, colors without transparancy will be printed as #RRGGBB
             */ function formatHexA(color, compact = false) {
                if (compact && color.rgba.a === 1) {
                    return Color.Format.CSS.formatHex(color);
                }
                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;
            }
            CSS.formatHexA = formatHexA;
            /**
             * The default format will use HEX if opaque and RGBA otherwise.
             */ function format(color) {
                if (color.isOpaque()) {
                    return Color.Format.CSS.formatHex(color);
                }
                return Color.Format.CSS.formatRGBA(color);
            }
            CSS.format = format;
            /**
             * Converts an Hex color value to a Color.
             * returns r, g, and b are contained in the set [0, 255]
             * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).
             */ function parseHex(hex) {
                const length = hex.length;
                if (length === 0) {
                    // Invalid color
                    return null;
                }
                if (hex.charCodeAt(0) !== 35 /* CharCode.Hash */ ) {
                    // Does not begin with a #
                    return null;
                }
                if (length === 7) {
                    // #RRGGBB format
                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));
                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));
                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));
                    return new Color(new RGBA(r, g, b, 1));
                }
                if (length === 9) {
                    // #RRGGBBAA format
                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));
                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));
                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));
                    const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));
                    return new Color(new RGBA(r, g, b, a / 255));
                }
                if (length === 4) {
                    // #RGB format
                    const r = _parseHexDigit(hex.charCodeAt(1));
                    const g = _parseHexDigit(hex.charCodeAt(2));
                    const b = _parseHexDigit(hex.charCodeAt(3));
                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));
                }
                if (length === 5) {
                    // #RGBA format
                    const r = _parseHexDigit(hex.charCodeAt(1));
                    const g = _parseHexDigit(hex.charCodeAt(2));
                    const b = _parseHexDigit(hex.charCodeAt(3));
                    const a = _parseHexDigit(hex.charCodeAt(4));
                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));
                }
                // Invalid color
                return null;
            }
            CSS.parseHex = parseHex;
            function _parseHexDigit(charCode) {
                switch(charCode){
                    case 48 /* CharCode.Digit0 */ :
                        return 0;
                    case 49 /* CharCode.Digit1 */ :
                        return 1;
                    case 50 /* CharCode.Digit2 */ :
                        return 2;
                    case 51 /* CharCode.Digit3 */ :
                        return 3;
                    case 52 /* CharCode.Digit4 */ :
                        return 4;
                    case 53 /* CharCode.Digit5 */ :
                        return 5;
                    case 54 /* CharCode.Digit6 */ :
                        return 6;
                    case 55 /* CharCode.Digit7 */ :
                        return 7;
                    case 56 /* CharCode.Digit8 */ :
                        return 8;
                    case 57 /* CharCode.Digit9 */ :
                        return 9;
                    case 97 /* CharCode.a */ :
                        return 10;
                    case 65 /* CharCode.A */ :
                        return 10;
                    case 98 /* CharCode.b */ :
                        return 11;
                    case 66 /* CharCode.B */ :
                        return 11;
                    case 99 /* CharCode.c */ :
                        return 12;
                    case 67 /* CharCode.C */ :
                        return 12;
                    case 100 /* CharCode.d */ :
                        return 13;
                    case 68 /* CharCode.D */ :
                        return 13;
                    case 101 /* CharCode.e */ :
                        return 14;
                    case 69 /* CharCode.E */ :
                        return 14;
                    case 102 /* CharCode.f */ :
                        return 15;
                    case 70 /* CharCode.F */ :
                        return 15;
                }
                return 0;
            }
        })(CSS = Format.CSS || (Format.CSS = {}));
    })(Format = Color.Format || (Color.Format = {}));
})(Color || (Color = {}));
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/severity.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
;
var Severity;
(function(Severity) {
    Severity[Severity["Ignore"] = 0] = "Ignore";
    Severity[Severity["Info"] = 1] = "Info";
    Severity[Severity["Warning"] = 2] = "Warning";
    Severity[Severity["Error"] = 3] = "Error";
})(Severity || (Severity = {}));
(function(Severity) {
    const _error = 'error';
    const _warning = 'warning';
    const _warn = 'warn';
    const _info = 'info';
    const _ignore = 'ignore';
    /**
     * Parses 'error', 'warning', 'warn', 'info' in call casings
     * and falls back to ignore.
     */ function fromValue(value) {
        if (!value) {
            return Severity.Ignore;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["equalsIgnoreCase"])(_error, value)) {
            return Severity.Error;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["equalsIgnoreCase"])(_warning, value) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["equalsIgnoreCase"])(_warn, value)) {
            return Severity.Warning;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["equalsIgnoreCase"])(_info, value)) {
            return Severity.Info;
        }
        return Severity.Ignore;
    }
    Severity.fromValue = fromValue;
    function toString(severity) {
        switch(severity){
            case Severity.Error:
                return _error;
            case Severity.Warning:
                return _warning;
            case Severity.Info:
                return _info;
            default:
                return _ignore;
        }
    }
    Severity.toString = toString;
})(Severity || (Severity = {}));
const __TURBOPACK__default__export__ = Severity;
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/numbers.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "MovingAverage": (()=>MovingAverage),
    "SlidingWindowAverage": (()=>SlidingWindowAverage),
    "clamp": (()=>clamp)
});
function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
}
class MovingAverage {
    constructor(){
        this._n = 1;
        this._val = 0;
    }
    update(value) {
        this._val = this._val + (value - this._val) / this._n;
        this._n += 1;
        return this._val;
    }
    get value() {
        return this._val;
    }
}
class SlidingWindowAverage {
    constructor(size){
        this._n = 0;
        this._val = 0;
        this._values = [];
        this._index = 0;
        this._sum = 0;
        this._values = new Array(size);
        this._values.fill(0, 0, size);
    }
    update(value) {
        const oldValue = this._values[this._index];
        this._values[this._index] = value;
        this._index = (this._index + 1) % this._values.length;
        this._sum -= oldValue;
        this._sum += value;
        if (this._n < this._values.length) {
            this._n += 1;
        }
        this._val = this._sum / this._n;
        return this._val;
    }
    get value() {
        return this._val;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/extpath.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "getRoot": (()=>getRoot),
    "hasDriveLetter": (()=>hasDriveLetter),
    "isEqualOrParent": (()=>isEqualOrParent),
    "isPathSeparator": (()=>isPathSeparator),
    "isWindowsDriveLetter": (()=>isWindowsDriveLetter),
    "toPosixPath": (()=>toPosixPath),
    "toSlashes": (()=>toSlashes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/path.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
;
;
;
function isPathSeparator(code) {
    return code === 47 /* CharCode.Slash */  || code === 92 /* CharCode.Backslash */ ;
}
function toSlashes(osPath) {
    return osPath.replace(/[\\/]/g, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].sep);
}
function toPosixPath(osPath) {
    if (osPath.indexOf('/') === -1) {
        osPath = toSlashes(osPath);
    }
    if (/^[a-zA-Z]:(\/|$)/.test(osPath)) {
        osPath = '/' + osPath;
    }
    return osPath;
}
function getRoot(path, sep = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].sep) {
    if (!path) {
        return '';
    }
    const len = path.length;
    const firstLetter = path.charCodeAt(0);
    if (isPathSeparator(firstLetter)) {
        if (isPathSeparator(path.charCodeAt(1))) {
            // UNC candidate \\localhost\shares\ddd
            //               ^^^^^^^^^^^^^^^^^^^
            if (!isPathSeparator(path.charCodeAt(2))) {
                let pos = 3;
                const start = pos;
                for(; pos < len; pos++){
                    if (isPathSeparator(path.charCodeAt(pos))) {
                        break;
                    }
                }
                if (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {
                    pos += 1;
                    for(; pos < len; pos++){
                        if (isPathSeparator(path.charCodeAt(pos))) {
                            return path.slice(0, pos + 1) // consume this separator
                            .replace(/[\\/]/g, sep);
                        }
                    }
                }
            }
        }
        // /user/far
        // ^
        return sep;
    } else if (isWindowsDriveLetter(firstLetter)) {
        // check for windows drive letter c:\ or c:
        if (path.charCodeAt(1) === 58 /* CharCode.Colon */ ) {
            if (isPathSeparator(path.charCodeAt(2))) {
                // C:\fff
                // ^^^
                return path.slice(0, 2) + sep;
            } else {
                // C:
                // ^^
                return path.slice(0, 2);
            }
        }
    }
    // check for URI
    // scheme://authority/path
    // ^^^^^^^^^^^^^^^^^^^
    let pos = path.indexOf('://');
    if (pos !== -1) {
        pos += 3; // 3 -> "://".length
        for(; pos < len; pos++){
            if (isPathSeparator(path.charCodeAt(pos))) {
                return path.slice(0, pos + 1); // consume this separator
            }
        }
    }
    return '';
}
function isEqualOrParent(base, parentCandidate, ignoreCase, separator = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"]) {
    if (base === parentCandidate) {
        return true;
    }
    if (!base || !parentCandidate) {
        return false;
    }
    if (parentCandidate.length > base.length) {
        return false;
    }
    if (ignoreCase) {
        const beginsWith = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["startsWithIgnoreCase"])(base, parentCandidate);
        if (!beginsWith) {
            return false;
        }
        if (parentCandidate.length === base.length) {
            return true; // same path, different casing
        }
        let sepOffset = parentCandidate.length;
        if (parentCandidate.charAt(parentCandidate.length - 1) === separator) {
            sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character
        }
        return base.charAt(sepOffset) === separator;
    }
    if (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {
        parentCandidate += separator;
    }
    return base.indexOf(parentCandidate) === 0;
}
function isWindowsDriveLetter(char0) {
    return char0 >= 65 /* CharCode.A */  && char0 <= 90 /* CharCode.Z */  || char0 >= 97 /* CharCode.a */  && char0 <= 122 /* CharCode.z */ ;
}
function hasDriveLetter(path, isWindowsOS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWindows"]) {
    if (isWindowsOS) {
        return isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === 58 /* CharCode.Colon */ ;
    }
    return false;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/glob.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "GLOBSTAR": (()=>GLOBSTAR),
    "GLOB_SPLIT": (()=>GLOB_SPLIT),
    "isRelativePattern": (()=>isRelativePattern),
    "match": (()=>match),
    "parse": (()=>parse),
    "splitGlobAware": (()=>splitGlobAware)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$async$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/async.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/extpath.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/map.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/path.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
;
;
;
;
;
;
const GLOBSTAR = '**';
const GLOB_SPLIT = '/';
const PATH_REGEX = '[/\\\\]'; // any slash or backslash
const NO_PATH_REGEX = '[^/\\\\]'; // any non-slash and non-backslash
const ALL_FORWARD_SLASHES = /\//g;
function starsToRegExp(starCount, isLastPattern) {
    switch(starCount){
        case 0:
            return '';
        case 1:
            return `${NO_PATH_REGEX}*?`; // 1 star matches any number of characters except path separator (/ and \) - non greedy (?)
        default:
            // Matches:  (Path Sep OR Path Val followed by Path Sep) 0-many times except when it's the last pattern
            //           in which case also matches (Path Sep followed by Path Val)
            // Group is non capturing because we don't need to capture at all (?:...)
            // Overall we use non-greedy matching because it could be that we match too much
            return `(?:${PATH_REGEX}|${NO_PATH_REGEX}+${PATH_REGEX}${isLastPattern ? `|${PATH_REGEX}${NO_PATH_REGEX}+` : ''})*?`;
    }
}
function splitGlobAware(pattern, splitChar) {
    if (!pattern) {
        return [];
    }
    const segments = [];
    let inBraces = false;
    let inBrackets = false;
    let curVal = '';
    for (const char of pattern){
        switch(char){
            case splitChar:
                if (!inBraces && !inBrackets) {
                    segments.push(curVal);
                    curVal = '';
                    continue;
                }
                break;
            case '{':
                inBraces = true;
                break;
            case '}':
                inBraces = false;
                break;
            case '[':
                inBrackets = true;
                break;
            case ']':
                inBrackets = false;
                break;
        }
        curVal += char;
    }
    // Tail
    if (curVal) {
        segments.push(curVal);
    }
    return segments;
}
function parseRegExp(pattern) {
    if (!pattern) {
        return '';
    }
    let regEx = '';
    // Split up into segments for each slash found
    const segments = splitGlobAware(pattern, GLOB_SPLIT);
    // Special case where we only have globstars
    if (segments.every((segment)=>segment === GLOBSTAR)) {
        regEx = '.*';
    } else {
        let previousSegmentWasGlobStar = false;
        segments.forEach((segment, index)=>{
            // Treat globstar specially
            if (segment === GLOBSTAR) {
                // if we have more than one globstar after another, just ignore it
                if (previousSegmentWasGlobStar) {
                    return;
                }
                regEx += starsToRegExp(2, index === segments.length - 1);
            } else {
                // States
                let inBraces = false;
                let braceVal = '';
                let inBrackets = false;
                let bracketVal = '';
                for (const char of segment){
                    // Support brace expansion
                    if (char !== '}' && inBraces) {
                        braceVal += char;
                        continue;
                    }
                    // Support brackets
                    if (inBrackets && (char !== ']' || !bracketVal)) {
                        let res;
                        // range operator
                        if (char === '-') {
                            res = char;
                        } else if ((char === '^' || char === '!') && !bracketVal) {
                            res = '^';
                        } else if (char === GLOB_SPLIT) {
                            res = '';
                        } else {
                            res = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeRegExpCharacters"])(char);
                        }
                        bracketVal += res;
                        continue;
                    }
                    switch(char){
                        case '{':
                            inBraces = true;
                            continue;
                        case '[':
                            inBrackets = true;
                            continue;
                        case '}':
                            {
                                const choices = splitGlobAware(braceVal, ',');
                                // Converts {foo,bar} => [foo|bar]
                                const braceRegExp = `(?:${choices.map((choice)=>parseRegExp(choice)).join('|')})`;
                                regEx += braceRegExp;
                                inBraces = false;
                                braceVal = '';
                                break;
                            }
                        case ']':
                            {
                                regEx += '[' + bracketVal + ']';
                                inBrackets = false;
                                bracketVal = '';
                                break;
                            }
                        case '?':
                            regEx += NO_PATH_REGEX; // 1 ? matches any single character except path separator (/ and \)
                            continue;
                        case '*':
                            regEx += starsToRegExp(1);
                            continue;
                        default:
                            regEx += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeRegExpCharacters"])(char);
                    }
                }
                // Tail: Add the slash we had split on if there is more to
                // come and the remaining pattern is not a globstar
                // For example if pattern: some/**/*.js we want the "/" after
                // some to be included in the RegEx to prevent a folder called
                // "something" to match as well.
                if (index < segments.length - 1 && // more segments to come after this
                (segments[index + 1] !== GLOBSTAR || // next segment is not **, or...
                index + 2 < segments.length // ...next segment is ** but there is more segments after that
                )) {
                    regEx += PATH_REGEX;
                }
            }
            // update globstar state
            previousSegmentWasGlobStar = segment === GLOBSTAR;
        });
    }
    return regEx;
}
// regexes to check for trivial glob patterns that just check for String#endsWith
const T1 = /^\*\*\/\*\.[\w\.-]+$/; // **/*.something
const T2 = /^\*\*\/([\w\.-]+)\/?$/; // **/something
const T3 = /^{\*\*\/\*?[\w\.-]+\/?(,\*\*\/\*?[\w\.-]+\/?)*}$/; // {**/*.something,**/*.else} or {**/package.json,**/project.json}
const T3_2 = /^{\*\*\/\*?[\w\.-]+(\/(\*\*)?)?(,\*\*\/\*?[\w\.-]+(\/(\*\*)?)?)*}$/; // Like T3, with optional trailing /**
const T4 = /^\*\*((\/[\w\.-]+)+)\/?$/; // **/something/else
const T5 = /^([\w\.-]+(\/[\w\.-]+)*)\/?$/; // something/else
const CACHE = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LRUCache"](10000); // bounded to 10000 elements
const FALSE = function() {
    return false;
};
const NULL = function() {
    return null;
};
function parsePattern(arg1, options) {
    if (!arg1) {
        return NULL;
    }
    // Handle relative patterns
    let pattern;
    if (typeof arg1 !== 'string') {
        pattern = arg1.pattern;
    } else {
        pattern = arg1;
    }
    // Whitespace trimming
    pattern = pattern.trim();
    // Check cache
    const patternKey = `${pattern}_${!!options.trimForExclusions}`;
    let parsedPattern = CACHE.get(patternKey);
    if (parsedPattern) {
        return wrapRelativePattern(parsedPattern, arg1);
    }
    // Check for Trivials
    let match;
    if (T1.test(pattern)) {
        parsedPattern = trivia1(pattern.substr(4), pattern); // common pattern: **/*.txt just need endsWith check
    } else if (match = T2.exec(trimForExclusions(pattern, options))) {
        parsedPattern = trivia2(match[1], pattern);
    } else if ((options.trimForExclusions ? T3_2 : T3).test(pattern)) {
        parsedPattern = trivia3(pattern, options);
    } else if (match = T4.exec(trimForExclusions(pattern, options))) {
        parsedPattern = trivia4and5(match[1].substr(1), pattern, true);
    } else if (match = T5.exec(trimForExclusions(pattern, options))) {
        parsedPattern = trivia4and5(match[1], pattern, false);
    } else {
        parsedPattern = toRegExp(pattern);
    }
    // Cache
    CACHE.set(patternKey, parsedPattern);
    return wrapRelativePattern(parsedPattern, arg1);
}
function wrapRelativePattern(parsedPattern, arg2) {
    if (typeof arg2 === 'string') {
        return parsedPattern;
    }
    const wrappedPattern = function(path, basename) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqualOrParent"])(path, arg2.base, !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLinux"])) {
            // skip glob matching if `base` is not a parent of `path`
            return null;
        }
        // Given we have checked `base` being a parent of `path`,
        // we can now remove the `base` portion of the `path`
        // and only match on the remaining path components
        // For that we try to extract the portion of the `path`
        // that comes after the `base` portion. We have to account
        // for the fact that `base` might end in a path separator
        // (https://github.com/microsoft/vscode/issues/162498)
        return parsedPattern((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ltrim"])(path.substr(arg2.base.length), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"]), basename);
    };
    // Make sure to preserve associated metadata
    wrappedPattern.allBasenames = parsedPattern.allBasenames;
    wrappedPattern.allPaths = parsedPattern.allPaths;
    wrappedPattern.basenames = parsedPattern.basenames;
    wrappedPattern.patterns = parsedPattern.patterns;
    return wrappedPattern;
}
function trimForExclusions(pattern, options) {
    return options.trimForExclusions && pattern.endsWith('/**') ? pattern.substr(0, pattern.length - 2) : pattern; // dropping **, tailing / is dropped later
}
// common pattern: **/*.txt just need endsWith check
function trivia1(base, pattern) {
    return function(path, basename) {
        return typeof path === 'string' && path.endsWith(base) ? pattern : null;
    };
}
// common pattern: **/some.txt just need basename check
function trivia2(base, pattern) {
    const slashBase = `/${base}`;
    const backslashBase = `\\${base}`;
    const parsedPattern = function(path, basename) {
        if (typeof path !== 'string') {
            return null;
        }
        if (basename) {
            return basename === base ? pattern : null;
        }
        return path === base || path.endsWith(slashBase) || path.endsWith(backslashBase) ? pattern : null;
    };
    const basenames = [
        base
    ];
    parsedPattern.basenames = basenames;
    parsedPattern.patterns = [
        pattern
    ];
    parsedPattern.allBasenames = basenames;
    return parsedPattern;
}
// repetition of common patterns (see above) {**/*.txt,**/*.png}
function trivia3(pattern, options) {
    const parsedPatterns = aggregateBasenameMatches(pattern.slice(1, -1).split(',').map((pattern)=>parsePattern(pattern, options)).filter((pattern)=>pattern !== NULL), pattern);
    const patternsLength = parsedPatterns.length;
    if (!patternsLength) {
        return NULL;
    }
    if (patternsLength === 1) {
        return parsedPatterns[0];
    }
    const parsedPattern = function(path, basename) {
        for(let i = 0, n = parsedPatterns.length; i < n; i++){
            if (parsedPatterns[i](path, basename)) {
                return pattern;
            }
        }
        return null;
    };
    const withBasenames = parsedPatterns.find((pattern)=>!!pattern.allBasenames);
    if (withBasenames) {
        parsedPattern.allBasenames = withBasenames.allBasenames;
    }
    const allPaths = parsedPatterns.reduce((all, current)=>current.allPaths ? all.concat(current.allPaths) : all, []);
    if (allPaths.length) {
        parsedPattern.allPaths = allPaths;
    }
    return parsedPattern;
}
// common patterns: **/something/else just need endsWith check, something/else just needs and equals check
function trivia4and5(targetPath, pattern, matchPathEnds) {
    const usingPosixSep = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"] === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].sep;
    const nativePath = usingPosixSep ? targetPath : targetPath.replace(ALL_FORWARD_SLASHES, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"]);
    const nativePathEnd = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"] + nativePath;
    const targetPathEnd = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].sep + targetPath;
    let parsedPattern;
    if (matchPathEnds) {
        parsedPattern = function(path, basename) {
            return typeof path === 'string' && (path === nativePath || path.endsWith(nativePathEnd) || !usingPosixSep && (path === targetPath || path.endsWith(targetPathEnd))) ? pattern : null;
        };
    } else {
        parsedPattern = function(path, basename) {
            return typeof path === 'string' && (path === nativePath || !usingPosixSep && path === targetPath) ? pattern : null;
        };
    }
    parsedPattern.allPaths = [
        (matchPathEnds ? '*/' : './') + targetPath
    ];
    return parsedPattern;
}
function toRegExp(pattern) {
    try {
        const regExp = new RegExp(`^${parseRegExp(pattern)}$`);
        return function(path) {
            regExp.lastIndex = 0; // reset RegExp to its initial state to reuse it!
            return typeof path === 'string' && regExp.test(path) ? pattern : null;
        };
    } catch (error) {
        return NULL;
    }
}
function match(arg1, path, hasSibling) {
    if (!arg1 || typeof path !== 'string') {
        return false;
    }
    return parse(arg1)(path, undefined, hasSibling);
}
function parse(arg1, options = {}) {
    if (!arg1) {
        return FALSE;
    }
    // Glob with String
    if (typeof arg1 === 'string' || isRelativePattern(arg1)) {
        const parsedPattern = parsePattern(arg1, options);
        if (parsedPattern === NULL) {
            return FALSE;
        }
        const resultPattern = function(path, basename) {
            return !!parsedPattern(path, basename);
        };
        if (parsedPattern.allBasenames) {
            resultPattern.allBasenames = parsedPattern.allBasenames;
        }
        if (parsedPattern.allPaths) {
            resultPattern.allPaths = parsedPattern.allPaths;
        }
        return resultPattern;
    }
    // Glob with Expression
    return parsedExpression(arg1, options);
}
function isRelativePattern(obj) {
    const rp = obj;
    if (!rp) {
        return false;
    }
    return typeof rp.base === 'string' && typeof rp.pattern === 'string';
}
function parsedExpression(expression, options) {
    const parsedPatterns = aggregateBasenameMatches(Object.getOwnPropertyNames(expression).map((pattern)=>parseExpressionPattern(pattern, expression[pattern], options)).filter((pattern)=>pattern !== NULL));
    const patternsLength = parsedPatterns.length;
    if (!patternsLength) {
        return NULL;
    }
    if (!parsedPatterns.some((parsedPattern)=>!!parsedPattern.requiresSiblings)) {
        if (patternsLength === 1) {
            return parsedPatterns[0];
        }
        const resultExpression = function(path, basename) {
            let resultPromises = undefined;
            for(let i = 0, n = parsedPatterns.length; i < n; i++){
                const result = parsedPatterns[i](path, basename);
                if (typeof result === 'string') {
                    return result; // immediately return as soon as the first expression matches
                }
                // If the result is a promise, we have to keep it for
                // later processing and await the result properly.
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$async$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isThenable"])(result)) {
                    if (!resultPromises) {
                        resultPromises = [];
                    }
                    resultPromises.push(result);
                }
            }
            // With result promises, we have to loop over each and
            // await the result before we can return any result.
            if (resultPromises) {
                return (async ()=>{
                    for (const resultPromise of resultPromises){
                        const result = await resultPromise;
                        if (typeof result === 'string') {
                            return result;
                        }
                    }
                    return null;
                })();
            }
            return null;
        };
        const withBasenames = parsedPatterns.find((pattern)=>!!pattern.allBasenames);
        if (withBasenames) {
            resultExpression.allBasenames = withBasenames.allBasenames;
        }
        const allPaths = parsedPatterns.reduce((all, current)=>current.allPaths ? all.concat(current.allPaths) : all, []);
        if (allPaths.length) {
            resultExpression.allPaths = allPaths;
        }
        return resultExpression;
    }
    const resultExpression = function(path, base, hasSibling) {
        let name = undefined;
        let resultPromises = undefined;
        for(let i = 0, n = parsedPatterns.length; i < n; i++){
            // Pattern matches path
            const parsedPattern = parsedPatterns[i];
            if (parsedPattern.requiresSiblings && hasSibling) {
                if (!base) {
                    base = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["basename"])(path);
                }
                if (!name) {
                    name = base.substr(0, base.length - (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extname"])(path).length);
                }
            }
            const result = parsedPattern(path, base, name, hasSibling);
            if (typeof result === 'string') {
                return result; // immediately return as soon as the first expression matches
            }
            // If the result is a promise, we have to keep it for
            // later processing and await the result properly.
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$async$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isThenable"])(result)) {
                if (!resultPromises) {
                    resultPromises = [];
                }
                resultPromises.push(result);
            }
        }
        // With result promises, we have to loop over each and
        // await the result before we can return any result.
        if (resultPromises) {
            return (async ()=>{
                for (const resultPromise of resultPromises){
                    const result = await resultPromise;
                    if (typeof result === 'string') {
                        return result;
                    }
                }
                return null;
            })();
        }
        return null;
    };
    const withBasenames = parsedPatterns.find((pattern)=>!!pattern.allBasenames);
    if (withBasenames) {
        resultExpression.allBasenames = withBasenames.allBasenames;
    }
    const allPaths = parsedPatterns.reduce((all, current)=>current.allPaths ? all.concat(current.allPaths) : all, []);
    if (allPaths.length) {
        resultExpression.allPaths = allPaths;
    }
    return resultExpression;
}
function parseExpressionPattern(pattern, value, options) {
    if (value === false) {
        return NULL; // pattern is disabled
    }
    const parsedPattern = parsePattern(pattern, options);
    if (parsedPattern === NULL) {
        return NULL;
    }
    // Expression Pattern is <boolean>
    if (typeof value === 'boolean') {
        return parsedPattern;
    }
    // Expression Pattern is <SiblingClause>
    if (value) {
        const when = value.when;
        if (typeof when === 'string') {
            const result = (path, basename, name, hasSibling)=>{
                if (!hasSibling || !parsedPattern(path, basename)) {
                    return null;
                }
                const clausePattern = when.replace('$(basename)', ()=>name);
                const matched = hasSibling(clausePattern);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$async$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isThenable"])(matched) ? matched.then((match)=>match ? pattern : null) : matched ? pattern : null;
            };
            result.requiresSiblings = true;
            return result;
        }
    }
    // Expression is anything
    return parsedPattern;
}
function aggregateBasenameMatches(parsedPatterns, result) {
    const basenamePatterns = parsedPatterns.filter((parsedPattern)=>!!parsedPattern.basenames);
    if (basenamePatterns.length < 2) {
        return parsedPatterns;
    }
    const basenames = basenamePatterns.reduce((all, current)=>{
        const basenames = current.basenames;
        return basenames ? all.concat(basenames) : all;
    }, []);
    let patterns;
    if (result) {
        patterns = [];
        for(let i = 0, n = basenames.length; i < n; i++){
            patterns.push(result);
        }
    } else {
        patterns = basenamePatterns.reduce((all, current)=>{
            const patterns = current.patterns;
            return patterns ? all.concat(patterns) : all;
        }, []);
    }
    const aggregate = function(path, basename) {
        if (typeof path !== 'string') {
            return null;
        }
        if (!basename) {
            let i;
            for(i = path.length; i > 0; i--){
                const ch = path.charCodeAt(i - 1);
                if (ch === 47 /* CharCode.Slash */  || ch === 92 /* CharCode.Backslash */ ) {
                    break;
                }
            }
            basename = path.substr(i);
        }
        const index = basenames.indexOf(basename);
        return index !== -1 ? patterns[index] : null;
    };
    aggregate.basenames = basenames;
    aggregate.patterns = patterns;
    aggregate.allBasenames = basenames;
    const aggregatedPatterns = parsedPatterns.filter((parsedPattern)=>!parsedPattern.basenames);
    aggregatedPatterns.push(aggregate);
    return aggregatedPatterns;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/decorators.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "memoize": (()=>memoize)
});
function memoize(_target, key, descriptor) {
    let fnKey = null;
    let fn = null;
    if (typeof descriptor.value === 'function') {
        fnKey = 'value';
        fn = descriptor.value;
        if (fn.length !== 0) {
            console.warn('Memoize should only be used in functions with zero parameters');
        }
    } else if (typeof descriptor.get === 'function') {
        fnKey = 'get';
        fn = descriptor.get;
    }
    if (!fn) {
        throw new Error('not supported');
    }
    const memoizeKey = `$memoize$${key}`;
    descriptor[fnKey] = function(...args) {
        if (!this.hasOwnProperty(memoizeKey)) {
            Object.defineProperty(this, memoizeKey, {
                configurable: false,
                enumerable: false,
                writable: false,
                value: fn.apply(this, args)
            });
        }
        return this[memoizeKey];
    };
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/scrollable.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "ScrollState": (()=>ScrollState),
    "Scrollable": (()=>Scrollable),
    "SmoothScrollingOperation": (()=>SmoothScrollingOperation),
    "SmoothScrollingUpdate": (()=>SmoothScrollingUpdate)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/event.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lifecycle.js [app-client] (ecmascript)");
;
;
class ScrollState {
    constructor(_forceIntegerValues, width, scrollWidth, scrollLeft, height, scrollHeight, scrollTop){
        this._forceIntegerValues = _forceIntegerValues;
        this._scrollStateBrand = undefined;
        if (this._forceIntegerValues) {
            width = width | 0;
            scrollWidth = scrollWidth | 0;
            scrollLeft = scrollLeft | 0;
            height = height | 0;
            scrollHeight = scrollHeight | 0;
            scrollTop = scrollTop | 0;
        }
        this.rawScrollLeft = scrollLeft; // before validation
        this.rawScrollTop = scrollTop; // before validation
        if (width < 0) {
            width = 0;
        }
        if (scrollLeft + width > scrollWidth) {
            scrollLeft = scrollWidth - width;
        }
        if (scrollLeft < 0) {
            scrollLeft = 0;
        }
        if (height < 0) {
            height = 0;
        }
        if (scrollTop + height > scrollHeight) {
            scrollTop = scrollHeight - height;
        }
        if (scrollTop < 0) {
            scrollTop = 0;
        }
        this.width = width;
        this.scrollWidth = scrollWidth;
        this.scrollLeft = scrollLeft;
        this.height = height;
        this.scrollHeight = scrollHeight;
        this.scrollTop = scrollTop;
    }
    equals(other) {
        return this.rawScrollLeft === other.rawScrollLeft && this.rawScrollTop === other.rawScrollTop && this.width === other.width && this.scrollWidth === other.scrollWidth && this.scrollLeft === other.scrollLeft && this.height === other.height && this.scrollHeight === other.scrollHeight && this.scrollTop === other.scrollTop;
    }
    withScrollDimensions(update, useRawScrollPositions) {
        return new ScrollState(this._forceIntegerValues, typeof update.width !== 'undefined' ? update.width : this.width, typeof update.scrollWidth !== 'undefined' ? update.scrollWidth : this.scrollWidth, useRawScrollPositions ? this.rawScrollLeft : this.scrollLeft, typeof update.height !== 'undefined' ? update.height : this.height, typeof update.scrollHeight !== 'undefined' ? update.scrollHeight : this.scrollHeight, useRawScrollPositions ? this.rawScrollTop : this.scrollTop);
    }
    withScrollPosition(update) {
        return new ScrollState(this._forceIntegerValues, this.width, this.scrollWidth, typeof update.scrollLeft !== 'undefined' ? update.scrollLeft : this.rawScrollLeft, this.height, this.scrollHeight, typeof update.scrollTop !== 'undefined' ? update.scrollTop : this.rawScrollTop);
    }
    createScrollEvent(previous, inSmoothScrolling) {
        const widthChanged = this.width !== previous.width;
        const scrollWidthChanged = this.scrollWidth !== previous.scrollWidth;
        const scrollLeftChanged = this.scrollLeft !== previous.scrollLeft;
        const heightChanged = this.height !== previous.height;
        const scrollHeightChanged = this.scrollHeight !== previous.scrollHeight;
        const scrollTopChanged = this.scrollTop !== previous.scrollTop;
        return {
            inSmoothScrolling: inSmoothScrolling,
            oldWidth: previous.width,
            oldScrollWidth: previous.scrollWidth,
            oldScrollLeft: previous.scrollLeft,
            width: this.width,
            scrollWidth: this.scrollWidth,
            scrollLeft: this.scrollLeft,
            oldHeight: previous.height,
            oldScrollHeight: previous.scrollHeight,
            oldScrollTop: previous.scrollTop,
            height: this.height,
            scrollHeight: this.scrollHeight,
            scrollTop: this.scrollTop,
            widthChanged: widthChanged,
            scrollWidthChanged: scrollWidthChanged,
            scrollLeftChanged: scrollLeftChanged,
            heightChanged: heightChanged,
            scrollHeightChanged: scrollHeightChanged,
            scrollTopChanged: scrollTopChanged
        };
    }
}
class Scrollable extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Disposable"] {
    constructor(options){
        super();
        this._scrollableBrand = undefined;
        this._onScroll = this._register(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Emitter"]());
        this.onScroll = this._onScroll.event;
        this._smoothScrollDuration = options.smoothScrollDuration;
        this._scheduleAtNextAnimationFrame = options.scheduleAtNextAnimationFrame;
        this._state = new ScrollState(options.forceIntegerValues, 0, 0, 0, 0, 0, 0);
        this._smoothScrolling = null;
    }
    dispose() {
        if (this._smoothScrolling) {
            this._smoothScrolling.dispose();
            this._smoothScrolling = null;
        }
        super.dispose();
    }
    setSmoothScrollDuration(smoothScrollDuration) {
        this._smoothScrollDuration = smoothScrollDuration;
    }
    validateScrollPosition(scrollPosition) {
        return this._state.withScrollPosition(scrollPosition);
    }
    getScrollDimensions() {
        return this._state;
    }
    setScrollDimensions(dimensions, useRawScrollPositions) {
        const newState = this._state.withScrollDimensions(dimensions, useRawScrollPositions);
        this._setState(newState, Boolean(this._smoothScrolling));
        // Validate outstanding animated scroll position target
        this._smoothScrolling?.acceptScrollDimensions(this._state);
    }
    /**
     * Returns the final scroll position that the instance will have once the smooth scroll animation concludes.
     * If no scroll animation is occurring, it will return the current scroll position instead.
     */ getFutureScrollPosition() {
        if (this._smoothScrolling) {
            return this._smoothScrolling.to;
        }
        return this._state;
    }
    /**
     * Returns the current scroll position.
     * Note: This result might be an intermediate scroll position, as there might be an ongoing smooth scroll animation.
     */ getCurrentScrollPosition() {
        return this._state;
    }
    setScrollPositionNow(update) {
        // no smooth scrolling requested
        const newState = this._state.withScrollPosition(update);
        // Terminate any outstanding smooth scrolling
        if (this._smoothScrolling) {
            this._smoothScrolling.dispose();
            this._smoothScrolling = null;
        }
        this._setState(newState, false);
    }
    setScrollPositionSmooth(update, reuseAnimation) {
        if (this._smoothScrollDuration === 0) {
            // Smooth scrolling not supported.
            return this.setScrollPositionNow(update);
        }
        if (this._smoothScrolling) {
            // Combine our pending scrollLeft/scrollTop with incoming scrollLeft/scrollTop
            update = {
                scrollLeft: typeof update.scrollLeft === 'undefined' ? this._smoothScrolling.to.scrollLeft : update.scrollLeft,
                scrollTop: typeof update.scrollTop === 'undefined' ? this._smoothScrolling.to.scrollTop : update.scrollTop
            };
            // Validate `update`
            const validTarget = this._state.withScrollPosition(update);
            if (this._smoothScrolling.to.scrollLeft === validTarget.scrollLeft && this._smoothScrolling.to.scrollTop === validTarget.scrollTop) {
                // No need to interrupt or extend the current animation since we're going to the same place
                return;
            }
            let newSmoothScrolling;
            if (reuseAnimation) {
                newSmoothScrolling = new SmoothScrollingOperation(this._smoothScrolling.from, validTarget, this._smoothScrolling.startTime, this._smoothScrolling.duration);
            } else {
                newSmoothScrolling = this._smoothScrolling.combine(this._state, validTarget, this._smoothScrollDuration);
            }
            this._smoothScrolling.dispose();
            this._smoothScrolling = newSmoothScrolling;
        } else {
            // Validate `update`
            const validTarget = this._state.withScrollPosition(update);
            this._smoothScrolling = SmoothScrollingOperation.start(this._state, validTarget, this._smoothScrollDuration);
        }
        // Begin smooth scrolling animation
        this._smoothScrolling.animationFrameDisposable = this._scheduleAtNextAnimationFrame(()=>{
            if (!this._smoothScrolling) {
                return;
            }
            this._smoothScrolling.animationFrameDisposable = null;
            this._performSmoothScrolling();
        });
    }
    hasPendingScrollAnimation() {
        return Boolean(this._smoothScrolling);
    }
    _performSmoothScrolling() {
        if (!this._smoothScrolling) {
            return;
        }
        const update = this._smoothScrolling.tick();
        const newState = this._state.withScrollPosition(update);
        this._setState(newState, true);
        if (!this._smoothScrolling) {
            // Looks like someone canceled the smooth scrolling
            // from the scroll event handler
            return;
        }
        if (update.isDone) {
            this._smoothScrolling.dispose();
            this._smoothScrolling = null;
            return;
        }
        // Continue smooth scrolling animation
        this._smoothScrolling.animationFrameDisposable = this._scheduleAtNextAnimationFrame(()=>{
            if (!this._smoothScrolling) {
                return;
            }
            this._smoothScrolling.animationFrameDisposable = null;
            this._performSmoothScrolling();
        });
    }
    _setState(newState, inSmoothScrolling) {
        const oldState = this._state;
        if (oldState.equals(newState)) {
            // no change
            return;
        }
        this._state = newState;
        this._onScroll.fire(this._state.createScrollEvent(oldState, inSmoothScrolling));
    }
}
class SmoothScrollingUpdate {
    constructor(scrollLeft, scrollTop, isDone){
        this.scrollLeft = scrollLeft;
        this.scrollTop = scrollTop;
        this.isDone = isDone;
    }
}
function createEaseOutCubic(from, to) {
    const delta = to - from;
    return function(completion) {
        return from + delta * easeOutCubic(completion);
    };
}
function createComposed(a, b, cut) {
    return function(completion) {
        if (completion < cut) {
            return a(completion / cut);
        }
        return b((completion - cut) / (1 - cut));
    };
}
class SmoothScrollingOperation {
    constructor(from, to, startTime, duration){
        this.from = from;
        this.to = to;
        this.duration = duration;
        this.startTime = startTime;
        this.animationFrameDisposable = null;
        this._initAnimations();
    }
    _initAnimations() {
        this.scrollLeft = this._initAnimation(this.from.scrollLeft, this.to.scrollLeft, this.to.width);
        this.scrollTop = this._initAnimation(this.from.scrollTop, this.to.scrollTop, this.to.height);
    }
    _initAnimation(from, to, viewportSize) {
        const delta = Math.abs(from - to);
        if (delta > 2.5 * viewportSize) {
            let stop1, stop2;
            if (from < to) {
                // scroll to 75% of the viewportSize
                stop1 = from + 0.75 * viewportSize;
                stop2 = to - 0.75 * viewportSize;
            } else {
                stop1 = from - 0.75 * viewportSize;
                stop2 = to + 0.75 * viewportSize;
            }
            return createComposed(createEaseOutCubic(from, stop1), createEaseOutCubic(stop2, to), 0.33);
        }
        return createEaseOutCubic(from, to);
    }
    dispose() {
        if (this.animationFrameDisposable !== null) {
            this.animationFrameDisposable.dispose();
            this.animationFrameDisposable = null;
        }
    }
    acceptScrollDimensions(state) {
        this.to = state.withScrollPosition(this.to);
        this._initAnimations();
    }
    tick() {
        return this._tick(Date.now());
    }
    _tick(now) {
        const completion = (now - this.startTime) / this.duration;
        if (completion < 1) {
            const newScrollLeft = this.scrollLeft(completion);
            const newScrollTop = this.scrollTop(completion);
            return new SmoothScrollingUpdate(newScrollLeft, newScrollTop, false);
        }
        return new SmoothScrollingUpdate(this.to.scrollLeft, this.to.scrollTop, true);
    }
    combine(from, to, duration) {
        return SmoothScrollingOperation.start(from, to, duration);
    }
    static start(from, to, duration) {
        // +10 / -10 : pretend the animation already started for a quicker response to a scroll request
        duration = duration + 10;
        const startTime = Date.now() - 10;
        return new SmoothScrollingOperation(from, to, startTime, duration);
    }
}
function easeInCubic(t) {
    return Math.pow(t, 3);
}
function easeOutCubic(t) {
    return 1 - easeInCubic(1 - t);
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/naturalLanguage/korean.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ // allow-any-unicode-comment-file
/**
 * Gets alternative Korean characters for the character code. This will return the ascii
 * character code(s) that a Hangul character may have been input with using a qwerty layout.
 *
 * This only aims to cover modern (not archaic) Hangul syllables.
 *
 * @param code The character code to get alternate characters for
 */ __turbopack_context__.s({
    "getKoreanAltChars": (()=>getKoreanAltChars)
});
function getKoreanAltChars(code) {
    const result = disassembleKorean(code);
    if (result && result.length > 0) {
        return new Uint32Array(result);
    }
    return undefined;
}
let codeBufferLength = 0;
const codeBuffer = new Uint32Array(10);
function disassembleKorean(code) {
    codeBufferLength = 0;
    // Initial consonants (초성)
    getCodesFromArray(code, modernConsonants, 4352 /* HangulRangeStartCode.InitialConsonant */ );
    if (codeBufferLength > 0) {
        return codeBuffer.subarray(0, codeBufferLength);
    }
    // Vowels (중성)
    getCodesFromArray(code, modernVowels, 4449 /* HangulRangeStartCode.Vowel */ );
    if (codeBufferLength > 0) {
        return codeBuffer.subarray(0, codeBufferLength);
    }
    // Final consonants (종성)
    getCodesFromArray(code, modernFinalConsonants, 4520 /* HangulRangeStartCode.FinalConsonant */ );
    if (codeBufferLength > 0) {
        return codeBuffer.subarray(0, codeBufferLength);
    }
    // Hangul Compatibility Jamo
    getCodesFromArray(code, compatibilityJamo, 12593 /* HangulRangeStartCode.CompatibilityJamo */ );
    if (codeBufferLength) {
        return codeBuffer.subarray(0, codeBufferLength);
    }
    // Hangul Syllables
    if (code >= 0xAC00 && code <= 0xD7A3) {
        const hangulIndex = code - 0xAC00;
        const vowelAndFinalConsonantProduct = hangulIndex % 588;
        // 0-based starting at 0x1100
        const initialConsonantIndex = Math.floor(hangulIndex / 588);
        // 0-based starting at 0x1161
        const vowelIndex = Math.floor(vowelAndFinalConsonantProduct / 28);
        // 0-based starting at 0x11A8
        // Subtract 1 as the standard algorithm uses the 0 index to represent no
        // final consonant
        const finalConsonantIndex = vowelAndFinalConsonantProduct % 28 - 1;
        if (initialConsonantIndex < modernConsonants.length) {
            getCodesFromArray(initialConsonantIndex, modernConsonants, 0);
        } else if (4352 /* HangulRangeStartCode.InitialConsonant */  + initialConsonantIndex - 12593 /* HangulRangeStartCode.CompatibilityJamo */  < compatibilityJamo.length) {
            getCodesFromArray(4352 /* HangulRangeStartCode.InitialConsonant */  + initialConsonantIndex, compatibilityJamo, 12593 /* HangulRangeStartCode.CompatibilityJamo */ );
        }
        if (vowelIndex < modernVowels.length) {
            getCodesFromArray(vowelIndex, modernVowels, 0);
        } else if (4449 /* HangulRangeStartCode.Vowel */  + vowelIndex - 12593 /* HangulRangeStartCode.CompatibilityJamo */  < compatibilityJamo.length) {
            getCodesFromArray(4449 /* HangulRangeStartCode.Vowel */  + vowelIndex - 12593 /* HangulRangeStartCode.CompatibilityJamo */ , compatibilityJamo, 12593 /* HangulRangeStartCode.CompatibilityJamo */ );
        }
        if (finalConsonantIndex >= 0) {
            if (finalConsonantIndex < modernFinalConsonants.length) {
                getCodesFromArray(finalConsonantIndex, modernFinalConsonants, 0);
            } else if (4520 /* HangulRangeStartCode.FinalConsonant */  + finalConsonantIndex - 12593 /* HangulRangeStartCode.CompatibilityJamo */  < compatibilityJamo.length) {
                getCodesFromArray(4520 /* HangulRangeStartCode.FinalConsonant */  + finalConsonantIndex - 12593 /* HangulRangeStartCode.CompatibilityJamo */ , compatibilityJamo, 12593 /* HangulRangeStartCode.CompatibilityJamo */ );
            }
        }
        if (codeBufferLength > 0) {
            return codeBuffer.subarray(0, codeBufferLength);
        }
    }
    return undefined;
}
function getCodesFromArray(code, array, arrayStartIndex) {
    // Verify the code is within the array's range
    if (code >= arrayStartIndex && code < arrayStartIndex + array.length) {
        addCodesToBuffer(array[code - arrayStartIndex]);
    }
}
function addCodesToBuffer(codes) {
    // NUL is ignored, this is used for archaic characters to avoid using a Map
    // for the data
    if (codes === 0 /* AsciiCode.NUL */ ) {
        return;
    }
    // Number stored in format: OptionalThirdCode << 16 | OptionalSecondCode << 8 | Code
    codeBuffer[codeBufferLength++] = codes & 0xFF;
    if (codes >> 8) {
        codeBuffer[codeBufferLength++] = codes >> 8 & 0xFF;
    }
    if (codes >> 16) {
        codeBuffer[codeBufferLength++] = codes >> 16 & 0xFF;
    }
}
/**
 * Hangul Jamo - Modern consonants #1
 *
 * Range U+1100..U+1112
 *
 * |        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F |
 * |--------|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
 * | U+110x | ᄀ | ᄁ | ᄂ | ᄃ | ᄄ | ᄅ | ᄆ | ᄇ | ᄈ | ᄉ | ᄊ | ᄋ | ᄌ | ᄍ | ᄎ | ᄏ |
 * | U+111x | ᄐ | ᄑ | ᄒ |
 */ const modernConsonants = new Uint8Array([
    114 /* AsciiCode.r */ ,
    82 /* AsciiCode.R */ ,
    115 /* AsciiCode.s */ ,
    101 /* AsciiCode.e */ ,
    69 /* AsciiCode.E */ ,
    102 /* AsciiCode.f */ ,
    97 /* AsciiCode.a */ ,
    113 /* AsciiCode.q */ ,
    81 /* AsciiCode.Q */ ,
    116 /* AsciiCode.t */ ,
    84 /* AsciiCode.T */ ,
    100 /* AsciiCode.d */ ,
    119 /* AsciiCode.w */ ,
    87 /* AsciiCode.W */ ,
    99 /* AsciiCode.c */ ,
    122 /* AsciiCode.z */ ,
    120 /* AsciiCode.x */ ,
    118 /* AsciiCode.v */ ,
    103 /* AsciiCode.g */ 
]);
/**
 * Hangul Jamo - Modern Vowels
 *
 * Range U+1161..U+1175
 *
 * |        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F |
 * |--------|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
 * | U+116x |   | ᅡ | ᅢ | ᅣ | ᅤ | ᅥ | ᅦ | ᅧ | ᅨ | ᅩ | ᅪ | ᅫ | ᅬ | ᅭ | ᅮ | ᅯ |
 * | U+117x | ᅰ | ᅱ | ᅲ | ᅳ | ᅴ | ᅵ |
 */ const modernVowels = new Uint16Array([
    107 /* AsciiCode.k */ ,
    111 /* AsciiCode.o */ ,
    105 /* AsciiCode.i */ ,
    79 /* AsciiCode.O */ ,
    106 /* AsciiCode.j */ ,
    112 /* AsciiCode.p */ ,
    117 /* AsciiCode.u */ ,
    80 /* AsciiCode.P */ ,
    104 /* AsciiCode.h */ ,
    27496 /* AsciiCodeCombo.hk */ ,
    28520 /* AsciiCodeCombo.ho */ ,
    27752 /* AsciiCodeCombo.hl */ ,
    121 /* AsciiCode.y */ ,
    110 /* AsciiCode.n */ ,
    27246 /* AsciiCodeCombo.nj */ ,
    28782 /* AsciiCodeCombo.np */ ,
    27758 /* AsciiCodeCombo.nl */ ,
    98 /* AsciiCode.b */ ,
    109 /* AsciiCode.m */ ,
    27757 /* AsciiCodeCombo.ml */ ,
    108 /* AsciiCode.l */ 
]);
/**
 * Hangul Jamo - Modern Consonants #2
 *
 * Range U+11A8..U+11C2
 *
 * |        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F |
 * |--------|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
 * | U+11Ax |   |   |   |   |   |   |   |   | ᆨ | ᆩ | ᆪ | ᆫ | ᆬ | ᆭ | ᆮ | ᆯ |
 * | U+11Bx | ᆰ | ᆱ | ᆲ | ᆳ | ᆴ | ᆵ | ᆶ | ᆷ | ᆸ | ᆹ | ᆺ | ᆻ | ᆼ | ᆽ | ᆾ | ᆿ |
 * | U+11Cx | ᇀ | ᇁ | ᇂ |
 */ const modernFinalConsonants = new Uint16Array([
    114 /* AsciiCode.r */ ,
    82 /* AsciiCode.R */ ,
    29810 /* AsciiCodeCombo.rt */ ,
    115 /* AsciiCode.s */ ,
    30579 /* AsciiCodeCombo.sw */ ,
    26483 /* AsciiCodeCombo.sg */ ,
    101 /* AsciiCode.e */ ,
    102 /* AsciiCode.f */ ,
    29286 /* AsciiCodeCombo.fr */ ,
    24934 /* AsciiCodeCombo.fa */ ,
    29030 /* AsciiCodeCombo.fq */ ,
    29798 /* AsciiCodeCombo.ft */ ,
    30822 /* AsciiCodeCombo.fx */ ,
    30310 /* AsciiCodeCombo.fv */ ,
    26470 /* AsciiCodeCombo.fg */ ,
    97 /* AsciiCode.a */ ,
    113 /* AsciiCode.q */ ,
    29809 /* AsciiCodeCombo.qt */ ,
    116 /* AsciiCode.t */ ,
    84 /* AsciiCode.T */ ,
    100 /* AsciiCode.d */ ,
    119 /* AsciiCode.w */ ,
    99 /* AsciiCode.c */ ,
    122 /* AsciiCode.z */ ,
    120 /* AsciiCode.x */ ,
    118 /* AsciiCode.v */ ,
    103 /* AsciiCode.g */ 
]);
/**
 * Hangul Compatibility Jamo
 *
 * Range U+3131..U+318F
 *
 * This includes range includes archaic jamo which we don't consider, these are
 * given the NUL character code in order to be ignored.
 *
 * |        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F |
 * |--------|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
 * | U+313x |   | ㄱ | ㄲ | ㄳ | ㄴ | ㄵ | ㄶ | ㄷ | ㄸ | ㄹ | ㄺ | ㄻ | ㄼ | ㄽ | ㄾ | ㄿ |
 * | U+314x | ㅀ | ㅁ | ㅂ | ㅃ | ㅄ | ㅅ | ㅆ | ㅇ | ㅈ | ㅉ | ㅊ | ㅋ | ㅌ | ㅍ | ㅎ | ㅏ |
 * | U+315x | ㅐ | ㅑ | ㅒ | ㅓ | ㅔ | ㅕ | ㅖ | ㅗ | ㅘ | ㅙ | ㅚ | ㅛ | ㅜ | ㅝ | ㅞ | ㅟ |
 * | U+316x | ㅠ | ㅡ | ㅢ | ㅣ | HF | ㅥ | ㅦ | ㅧ | ㅨ | ㅩ | ㅪ | ㅫ | ㅬ | ㅭ | ㅮ | ㅯ |
 * | U+317x | ㅰ | ㅱ | ㅲ | ㅳ | ㅴ | ㅵ | ㅶ | ㅷ | ㅸ | ㅹ | ㅺ | ㅻ | ㅼ | ㅽ | ㅾ | ㅿ |
 * | U+318x | ㆀ | ㆁ | ㆂ | ㆃ | ㆄ | ㆅ | ㆆ | ㆇ | ㆈ | ㆉ | ㆊ | ㆋ | ㆌ | ㆍ | ㆎ |
 */ const compatibilityJamo = new Uint16Array([
    114 /* AsciiCode.r */ ,
    82 /* AsciiCode.R */ ,
    29810 /* AsciiCodeCombo.rt */ ,
    115 /* AsciiCode.s */ ,
    30579 /* AsciiCodeCombo.sw */ ,
    26483 /* AsciiCodeCombo.sg */ ,
    101 /* AsciiCode.e */ ,
    69 /* AsciiCode.E */ ,
    102 /* AsciiCode.f */ ,
    29286 /* AsciiCodeCombo.fr */ ,
    24934 /* AsciiCodeCombo.fa */ ,
    29030 /* AsciiCodeCombo.fq */ ,
    29798 /* AsciiCodeCombo.ft */ ,
    30822 /* AsciiCodeCombo.fx */ ,
    30310 /* AsciiCodeCombo.fv */ ,
    26470 /* AsciiCodeCombo.fg */ ,
    97 /* AsciiCode.a */ ,
    113 /* AsciiCode.q */ ,
    81 /* AsciiCode.Q */ ,
    29809 /* AsciiCodeCombo.qt */ ,
    116 /* AsciiCode.t */ ,
    84 /* AsciiCode.T */ ,
    100 /* AsciiCode.d */ ,
    119 /* AsciiCode.w */ ,
    87 /* AsciiCode.W */ ,
    99 /* AsciiCode.c */ ,
    122 /* AsciiCode.z */ ,
    120 /* AsciiCode.x */ ,
    118 /* AsciiCode.v */ ,
    103 /* AsciiCode.g */ ,
    107 /* AsciiCode.k */ ,
    111 /* AsciiCode.o */ ,
    105 /* AsciiCode.i */ ,
    79 /* AsciiCode.O */ ,
    106 /* AsciiCode.j */ ,
    112 /* AsciiCode.p */ ,
    117 /* AsciiCode.u */ ,
    80 /* AsciiCode.P */ ,
    104 /* AsciiCode.h */ ,
    27496 /* AsciiCodeCombo.hk */ ,
    28520 /* AsciiCodeCombo.ho */ ,
    27752 /* AsciiCodeCombo.hl */ ,
    121 /* AsciiCode.y */ ,
    110 /* AsciiCode.n */ ,
    27246 /* AsciiCodeCombo.nj */ ,
    28782 /* AsciiCodeCombo.np */ ,
    27758 /* AsciiCodeCombo.nl */ ,
    98 /* AsciiCode.b */ ,
    109 /* AsciiCode.m */ ,
    27757 /* AsciiCodeCombo.ml */ ,
    108 /* AsciiCode.l */ 
]);
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/filters.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "FuzzyScore": (()=>FuzzyScore),
    "FuzzyScoreOptions": (()=>FuzzyScoreOptions),
    "anyScore": (()=>anyScore),
    "createMatches": (()=>createMatches),
    "fuzzyScore": (()=>fuzzyScore),
    "fuzzyScoreGracefulAggressive": (()=>fuzzyScoreGracefulAggressive),
    "isPatternInWord": (()=>isPatternInWord),
    "isUpper": (()=>isUpper),
    "matchesCamelCase": (()=>matchesCamelCase),
    "matchesContiguousSubString": (()=>matchesContiguousSubString),
    "matchesFuzzy": (()=>matchesFuzzy),
    "matchesFuzzy2": (()=>matchesFuzzy2),
    "matchesPrefix": (()=>matchesPrefix),
    "matchesStrictPrefix": (()=>matchesStrictPrefix),
    "matchesSubString": (()=>matchesSubString),
    "matchesWords": (()=>matchesWords),
    "or": (()=>or)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/map.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$naturalLanguage$2f$korean$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/naturalLanguage/korean.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
;
;
;
function or(...filter) {
    return function(word, wordToMatchAgainst) {
        for(let i = 0, len = filter.length; i < len; i++){
            const match = filter[i](word, wordToMatchAgainst);
            if (match) {
                return match;
            }
        }
        return null;
    };
}
const matchesStrictPrefix = _matchesPrefix.bind(undefined, false);
const matchesPrefix = _matchesPrefix.bind(undefined, true);
function _matchesPrefix(ignoreCase, word, wordToMatchAgainst) {
    if (!wordToMatchAgainst || wordToMatchAgainst.length < word.length) {
        return null;
    }
    let matches;
    if (ignoreCase) {
        matches = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["startsWithIgnoreCase"])(wordToMatchAgainst, word);
    } else {
        matches = wordToMatchAgainst.indexOf(word) === 0;
    }
    if (!matches) {
        return null;
    }
    return word.length > 0 ? [
        {
            start: 0,
            end: word.length
        }
    ] : [];
}
function matchesContiguousSubString(word, wordToMatchAgainst) {
    const index = wordToMatchAgainst.toLowerCase().indexOf(word.toLowerCase());
    if (index === -1) {
        return null;
    }
    return [
        {
            start: index,
            end: index + word.length
        }
    ];
}
function matchesSubString(word, wordToMatchAgainst) {
    return _matchesSubString(word.toLowerCase(), wordToMatchAgainst.toLowerCase(), 0, 0);
}
function _matchesSubString(word, wordToMatchAgainst, i, j) {
    if (i === word.length) {
        return [];
    } else if (j === wordToMatchAgainst.length) {
        return null;
    } else {
        if (word[i] === wordToMatchAgainst[j]) {
            let result = null;
            if (result = _matchesSubString(word, wordToMatchAgainst, i + 1, j + 1)) {
                return join({
                    start: j,
                    end: j + 1
                }, result);
            }
            return null;
        }
        return _matchesSubString(word, wordToMatchAgainst, i, j + 1);
    }
}
// CamelCase
function isLower(code) {
    return 97 /* CharCode.a */  <= code && code <= 122 /* CharCode.z */ ;
}
function isUpper(code) {
    return 65 /* CharCode.A */  <= code && code <= 90 /* CharCode.Z */ ;
}
function isNumber(code) {
    return 48 /* CharCode.Digit0 */  <= code && code <= 57 /* CharCode.Digit9 */ ;
}
function isWhitespace(code) {
    return code === 32 /* CharCode.Space */  || code === 9 /* CharCode.Tab */  || code === 10 /* CharCode.LineFeed */  || code === 13 /* CharCode.CarriageReturn */ ;
}
const wordSeparators = new Set();
// These are chosen as natural word separators based on writen text.
// It is a subset of the word separators used by the monaco editor.
'()[]{}<>`\'"-/;:,.?!'.split('').forEach((s)=>wordSeparators.add(s.charCodeAt(0)));
function isWordSeparator(code) {
    return isWhitespace(code) || wordSeparators.has(code);
}
function charactersMatch(codeA, codeB) {
    return codeA === codeB || isWordSeparator(codeA) && isWordSeparator(codeB);
}
const alternateCharsCache = new Map();
/**
 * Gets alternative codes to the character code passed in. This comes in the
 * form of an array of character codes, all of which must match _in order_ to
 * successfully match.
 *
 * @param code The character code to check.
 */ function getAlternateCodes(code) {
    if (alternateCharsCache.has(code)) {
        return alternateCharsCache.get(code);
    }
    // NOTE: This function is written in such a way that it can be extended in
    // the future, but right now the return type takes into account it's only
    // supported by a single "alt codes provider".
    // `ArrayLike<ArrayLike<number>>` is a more appropriate type if changed.
    let result;
    const codes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$naturalLanguage$2f$korean$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getKoreanAltChars"])(code);
    if (codes) {
        result = codes;
    }
    alternateCharsCache.set(code, result);
    return result;
}
function isAlphanumeric(code) {
    return isLower(code) || isUpper(code) || isNumber(code);
}
function join(head, tail) {
    if (tail.length === 0) {
        tail = [
            head
        ];
    } else if (head.end === tail[0].start) {
        tail[0].start = head.start;
    } else {
        tail.unshift(head);
    }
    return tail;
}
function nextAnchor(camelCaseWord, start) {
    for(let i = start; i < camelCaseWord.length; i++){
        const c = camelCaseWord.charCodeAt(i);
        if (isUpper(c) || isNumber(c) || i > 0 && !isAlphanumeric(camelCaseWord.charCodeAt(i - 1))) {
            return i;
        }
    }
    return camelCaseWord.length;
}
function _matchesCamelCase(word, camelCaseWord, i, j) {
    if (i === word.length) {
        return [];
    } else if (j === camelCaseWord.length) {
        return null;
    } else if (word[i] !== camelCaseWord[j].toLowerCase()) {
        return null;
    } else {
        let result = null;
        let nextUpperIndex = j + 1;
        result = _matchesCamelCase(word, camelCaseWord, i + 1, j + 1);
        while(!result && (nextUpperIndex = nextAnchor(camelCaseWord, nextUpperIndex)) < camelCaseWord.length){
            result = _matchesCamelCase(word, camelCaseWord, i + 1, nextUpperIndex);
            nextUpperIndex++;
        }
        return result === null ? null : join({
            start: j,
            end: j + 1
        }, result);
    }
}
// Heuristic to avoid computing camel case matcher for words that don't
// look like camelCaseWords.
function analyzeCamelCaseWord(word) {
    let upper = 0, lower = 0, alpha = 0, numeric = 0, code = 0;
    for(let i = 0; i < word.length; i++){
        code = word.charCodeAt(i);
        if (isUpper(code)) {
            upper++;
        }
        if (isLower(code)) {
            lower++;
        }
        if (isAlphanumeric(code)) {
            alpha++;
        }
        if (isNumber(code)) {
            numeric++;
        }
    }
    const upperPercent = upper / word.length;
    const lowerPercent = lower / word.length;
    const alphaPercent = alpha / word.length;
    const numericPercent = numeric / word.length;
    return {
        upperPercent,
        lowerPercent,
        alphaPercent,
        numericPercent
    };
}
function isUpperCaseWord(analysis) {
    const { upperPercent, lowerPercent } = analysis;
    return lowerPercent === 0 && upperPercent > 0.6;
}
function isCamelCaseWord(analysis) {
    const { upperPercent, lowerPercent, alphaPercent, numericPercent } = analysis;
    return lowerPercent > 0.2 && upperPercent < 0.8 && alphaPercent > 0.6 && numericPercent < 0.2;
}
// Heuristic to avoid computing camel case matcher for words that don't
// look like camel case patterns.
function isCamelCasePattern(word) {
    let upper = 0, lower = 0, code = 0, whitespace = 0;
    for(let i = 0; i < word.length; i++){
        code = word.charCodeAt(i);
        if (isUpper(code)) {
            upper++;
        }
        if (isLower(code)) {
            lower++;
        }
        if (isWhitespace(code)) {
            whitespace++;
        }
    }
    if ((upper === 0 || lower === 0) && whitespace === 0) {
        return word.length <= 30;
    } else {
        return upper <= 5;
    }
}
function matchesCamelCase(word, camelCaseWord) {
    if (!camelCaseWord) {
        return null;
    }
    camelCaseWord = camelCaseWord.trim();
    if (camelCaseWord.length === 0) {
        return null;
    }
    if (!isCamelCasePattern(word)) {
        return null;
    }
    // TODO: Consider removing this check
    if (camelCaseWord.length > 60) {
        camelCaseWord = camelCaseWord.substring(0, 60);
    }
    const analysis = analyzeCamelCaseWord(camelCaseWord);
    if (!isCamelCaseWord(analysis)) {
        if (!isUpperCaseWord(analysis)) {
            return null;
        }
        camelCaseWord = camelCaseWord.toLowerCase();
    }
    let result = null;
    let i = 0;
    word = word.toLowerCase();
    while(i < camelCaseWord.length && (result = _matchesCamelCase(word, camelCaseWord, 0, i)) === null){
        i = nextAnchor(camelCaseWord, i + 1);
    }
    return result;
}
function matchesWords(word, target, contiguous = false) {
    if (!target || target.length === 0) {
        return null;
    }
    let result = null;
    let targetIndex = 0;
    word = word.toLowerCase();
    target = target.toLowerCase();
    while(targetIndex < target.length){
        result = _matchesWords(word, target, 0, targetIndex, contiguous);
        if (result !== null) {
            break;
        }
        targetIndex = nextWord(target, targetIndex + 1);
    }
    return result;
}
function _matchesWords(word, target, wordIndex, targetIndex, contiguous) {
    let targetIndexOffset = 0;
    if (wordIndex === word.length) {
        return [];
    } else if (targetIndex === target.length) {
        return null;
    } else if (!charactersMatch(word.charCodeAt(wordIndex), target.charCodeAt(targetIndex))) {
        // Verify alternate characters before exiting
        const altChars = getAlternateCodes(word.charCodeAt(wordIndex));
        if (!altChars) {
            return null;
        }
        for(let k = 0; k < altChars.length; k++){
            if (!charactersMatch(altChars[k], target.charCodeAt(targetIndex + k))) {
                return null;
            }
        }
        targetIndexOffset += altChars.length - 1;
    }
    let result = null;
    let nextWordIndex = targetIndex + targetIndexOffset + 1;
    result = _matchesWords(word, target, wordIndex + 1, nextWordIndex, contiguous);
    if (!contiguous) {
        while(!result && (nextWordIndex = nextWord(target, nextWordIndex)) < target.length){
            result = _matchesWords(word, target, wordIndex + 1, nextWordIndex, contiguous);
            nextWordIndex++;
        }
    }
    if (!result) {
        return null;
    }
    // If the characters don't exactly match, then they must be word separators (see charactersMatch(...)).
    // We don't want to include this in the matches but we don't want to throw the target out all together so we return `result`.
    if (word.charCodeAt(wordIndex) !== target.charCodeAt(targetIndex)) {
        // Verify alternate characters before exiting
        const altChars = getAlternateCodes(word.charCodeAt(wordIndex));
        if (!altChars) {
            return result;
        }
        for(let k = 0; k < altChars.length; k++){
            if (altChars[k] !== target.charCodeAt(targetIndex + k)) {
                return result;
            }
        }
    }
    return join({
        start: targetIndex,
        end: targetIndex + targetIndexOffset + 1
    }, result);
}
function nextWord(word, start) {
    for(let i = start; i < word.length; i++){
        if (isWordSeparator(word.charCodeAt(i)) || i > 0 && isWordSeparator(word.charCodeAt(i - 1))) {
            return i;
        }
    }
    return word.length;
}
// Fuzzy
const fuzzyContiguousFilter = or(matchesPrefix, matchesCamelCase, matchesContiguousSubString);
const fuzzySeparateFilter = or(matchesPrefix, matchesCamelCase, matchesSubString);
const fuzzyRegExpCache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LRUCache"](10000); // bounded to 10000 elements
function matchesFuzzy(word, wordToMatchAgainst, enableSeparateSubstringMatching = false) {
    if (typeof word !== 'string' || typeof wordToMatchAgainst !== 'string') {
        return null; // return early for invalid input
    }
    // Form RegExp for wildcard matches
    let regexp = fuzzyRegExpCache.get(word);
    if (!regexp) {
        regexp = new RegExp((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertSimple2RegExpPattern"])(word), 'i');
        fuzzyRegExpCache.set(word, regexp);
    }
    // RegExp Filter
    const match = regexp.exec(wordToMatchAgainst);
    if (match) {
        return [
            {
                start: match.index,
                end: match.index + match[0].length
            }
        ];
    }
    // Default Filter
    return enableSeparateSubstringMatching ? fuzzySeparateFilter(word, wordToMatchAgainst) : fuzzyContiguousFilter(word, wordToMatchAgainst);
}
function matchesFuzzy2(pattern, word) {
    const score = fuzzyScore(pattern, pattern.toLowerCase(), 0, word, word.toLowerCase(), 0, {
        firstMatchCanBeWeak: true,
        boostFullMatch: true
    });
    return score ? createMatches(score) : null;
}
function anyScore(pattern, lowPattern, patternPos, word, lowWord, wordPos) {
    const max = Math.min(13, pattern.length);
    for(; patternPos < max; patternPos++){
        const result = fuzzyScore(pattern, lowPattern, patternPos, word, lowWord, wordPos, {
            firstMatchCanBeWeak: true,
            boostFullMatch: true
        });
        if (result) {
            return result;
        }
    }
    return [
        0,
        wordPos
    ];
}
function createMatches(score) {
    if (typeof score === 'undefined') {
        return [];
    }
    const res = [];
    const wordPos = score[1];
    for(let i = score.length - 1; i > 1; i--){
        const pos = score[i] + wordPos;
        const last = res[res.length - 1];
        if (last && last.end === pos) {
            last.end = pos + 1;
        } else {
            res.push({
                start: pos,
                end: pos + 1
            });
        }
    }
    return res;
}
const _maxLen = 128;
function initTable() {
    const table = [];
    const row = [];
    for(let i = 0; i <= _maxLen; i++){
        row[i] = 0;
    }
    for(let i = 0; i <= _maxLen; i++){
        table.push(row.slice(0));
    }
    return table;
}
function initArr(maxLen) {
    const row = [];
    for(let i = 0; i <= maxLen; i++){
        row[i] = 0;
    }
    return row;
}
const _minWordMatchPos = initArr(2 * _maxLen); // min word position for a certain pattern position
const _maxWordMatchPos = initArr(2 * _maxLen); // max word position for a certain pattern position
const _diag = initTable(); // the length of a contiguous diagonal match
const _table = initTable();
const _arrows = initTable();
const _debug = false;
function printTable(table, pattern, patternLen, word, wordLen) {
    function pad(s, n, pad1 = ' ') {
        while(s.length < n){
            s = pad1 + s;
        }
        return s;
    }
    let ret = ` |   |${word.split('').map((c)=>pad(c, 3)).join('|')}\n`;
    for(let i = 0; i <= patternLen; i++){
        if (i === 0) {
            ret += ' |';
        } else {
            ret += `${pattern[i - 1]}|`;
        }
        ret += table[i].slice(0, wordLen + 1).map((n)=>pad(n.toString(), 3)).join('|') + '\n';
    }
    return ret;
}
function printTables(pattern, patternStart, word, wordStart) {
    pattern = pattern.substr(patternStart);
    word = word.substr(wordStart);
    console.log(printTable(_table, pattern, pattern.length, word, word.length));
    console.log(printTable(_arrows, pattern, pattern.length, word, word.length));
    console.log(printTable(_diag, pattern, pattern.length, word, word.length));
}
function isSeparatorAtPos(value, index) {
    if (index < 0 || index >= value.length) {
        return false;
    }
    const code = value.codePointAt(index);
    switch(code){
        case 95 /* CharCode.Underline */ :
        case 45 /* CharCode.Dash */ :
        case 46 /* CharCode.Period */ :
        case 32 /* CharCode.Space */ :
        case 47 /* CharCode.Slash */ :
        case 92 /* CharCode.Backslash */ :
        case 39 /* CharCode.SingleQuote */ :
        case 34 /* CharCode.DoubleQuote */ :
        case 58 /* CharCode.Colon */ :
        case 36 /* CharCode.DollarSign */ :
        case 60 /* CharCode.LessThan */ :
        case 62 /* CharCode.GreaterThan */ :
        case 40 /* CharCode.OpenParen */ :
        case 41 /* CharCode.CloseParen */ :
        case 91 /* CharCode.OpenSquareBracket */ :
        case 93 /* CharCode.CloseSquareBracket */ :
        case 123 /* CharCode.OpenCurlyBrace */ :
        case 125 /* CharCode.CloseCurlyBrace */ :
            return true;
        case undefined:
            return false;
        default:
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEmojiImprecise"])(code)) {
                return true;
            }
            return false;
    }
}
function isWhitespaceAtPos(value, index) {
    if (index < 0 || index >= value.length) {
        return false;
    }
    const code = value.charCodeAt(index);
    switch(code){
        case 32 /* CharCode.Space */ :
        case 9 /* CharCode.Tab */ :
            return true;
        default:
            return false;
    }
}
function isUpperCaseAtPos(pos, word, wordLow) {
    return word[pos] !== wordLow[pos];
}
function isPatternInWord(patternLow, patternPos, patternLen, wordLow, wordPos, wordLen, fillMinWordPosArr = false) {
    while(patternPos < patternLen && wordPos < wordLen){
        if (patternLow[patternPos] === wordLow[wordPos]) {
            if (fillMinWordPosArr) {
                // Remember the min word position for each pattern position
                _minWordMatchPos[patternPos] = wordPos;
            }
            patternPos += 1;
        }
        wordPos += 1;
    }
    return patternPos === patternLen; // pattern must be exhausted
}
var FuzzyScore;
(function(FuzzyScore) {
    /**
     * No matches and value `-100`
     */ FuzzyScore.Default = [
        -100,
        0
    ];
    function isDefault(score) {
        return !score || score.length === 2 && score[0] === -100 && score[1] === 0;
    }
    FuzzyScore.isDefault = isDefault;
})(FuzzyScore || (FuzzyScore = {}));
class FuzzyScoreOptions {
    static{
        this.default = {
            boostFullMatch: true,
            firstMatchCanBeWeak: false
        };
    }
    constructor(firstMatchCanBeWeak, boostFullMatch){
        this.firstMatchCanBeWeak = firstMatchCanBeWeak;
        this.boostFullMatch = boostFullMatch;
    }
}
function fuzzyScore(pattern, patternLow, patternStart, word, wordLow, wordStart, options = FuzzyScoreOptions.default) {
    const patternLen = pattern.length > _maxLen ? _maxLen : pattern.length;
    const wordLen = word.length > _maxLen ? _maxLen : word.length;
    if (patternStart >= patternLen || wordStart >= wordLen || patternLen - patternStart > wordLen - wordStart) {
        return undefined;
    }
    // Run a simple check if the characters of pattern occur
    // (in order) at all in word. If that isn't the case we
    // stop because no match will be possible
    if (!isPatternInWord(patternLow, patternStart, patternLen, wordLow, wordStart, wordLen, true)) {
        return undefined;
    }
    // Find the max matching word position for each pattern position
    // NOTE: the min matching word position was filled in above, in the `isPatternInWord` call
    _fillInMaxWordMatchPos(patternLen, wordLen, patternStart, wordStart, patternLow, wordLow);
    let row = 1;
    let column = 1;
    let patternPos = patternStart;
    let wordPos = wordStart;
    const hasStrongFirstMatch = [
        false
    ];
    // There will be a match, fill in tables
    for(row = 1, patternPos = patternStart; patternPos < patternLen; row++, patternPos++){
        // Reduce search space to possible matching word positions and to possible access from next row
        const minWordMatchPos = _minWordMatchPos[patternPos];
        const maxWordMatchPos = _maxWordMatchPos[patternPos];
        const nextMaxWordMatchPos = patternPos + 1 < patternLen ? _maxWordMatchPos[patternPos + 1] : wordLen;
        for(column = minWordMatchPos - wordStart + 1, wordPos = minWordMatchPos; wordPos < nextMaxWordMatchPos; column++, wordPos++){
            let score = Number.MIN_SAFE_INTEGER;
            let canComeDiag = false;
            if (wordPos <= maxWordMatchPos) {
                score = _doScore(pattern, patternLow, patternPos, patternStart, word, wordLow, wordPos, wordLen, wordStart, _diag[row - 1][column - 1] === 0, hasStrongFirstMatch);
            }
            let diagScore = 0;
            if (score !== Number.MAX_SAFE_INTEGER) {
                canComeDiag = true;
                diagScore = score + _table[row - 1][column - 1];
            }
            const canComeLeft = wordPos > minWordMatchPos;
            const leftScore = canComeLeft ? _table[row][column - 1] + (_diag[row][column - 1] > 0 ? -5 : 0) : 0; // penalty for a gap start
            const canComeLeftLeft = wordPos > minWordMatchPos + 1 && _diag[row][column - 1] > 0;
            const leftLeftScore = canComeLeftLeft ? _table[row][column - 2] + (_diag[row][column - 2] > 0 ? -5 : 0) : 0; // penalty for a gap start
            if (canComeLeftLeft && (!canComeLeft || leftLeftScore >= leftScore) && (!canComeDiag || leftLeftScore >= diagScore)) {
                // always prefer choosing left left to jump over a diagonal because that means a match is earlier in the word
                _table[row][column] = leftLeftScore;
                _arrows[row][column] = 3 /* Arrow.LeftLeft */ ;
                _diag[row][column] = 0;
            } else if (canComeLeft && (!canComeDiag || leftScore >= diagScore)) {
                // always prefer choosing left since that means a match is earlier in the word
                _table[row][column] = leftScore;
                _arrows[row][column] = 2 /* Arrow.Left */ ;
                _diag[row][column] = 0;
            } else if (canComeDiag) {
                _table[row][column] = diagScore;
                _arrows[row][column] = 1 /* Arrow.Diag */ ;
                _diag[row][column] = _diag[row - 1][column - 1] + 1;
            } else {
                throw new Error(`not possible`);
            }
        }
    }
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    if (!hasStrongFirstMatch[0] && !options.firstMatchCanBeWeak) {
        return undefined;
    }
    row--;
    column--;
    const result = [
        _table[row][column],
        wordStart
    ];
    let backwardsDiagLength = 0;
    let maxMatchColumn = 0;
    while(row >= 1){
        // Find the column where we go diagonally up
        let diagColumn = column;
        do {
            const arrow = _arrows[row][diagColumn];
            if (arrow === 3 /* Arrow.LeftLeft */ ) {
                diagColumn = diagColumn - 2;
            } else if (arrow === 2 /* Arrow.Left */ ) {
                diagColumn = diagColumn - 1;
            } else {
                break;
            }
        }while (diagColumn >= 1)
        // Overturn the "forwards" decision if keeping the "backwards" diagonal would give a better match
        if (backwardsDiagLength > 1 // only if we would have a contiguous match of 3 characters
         && patternLow[patternStart + row - 1] === wordLow[wordStart + column - 1] // only if we can do a contiguous match diagonally
         && !isUpperCaseAtPos(diagColumn + wordStart - 1, word, wordLow) // only if the forwards chose diagonal is not an uppercase
         && backwardsDiagLength + 1 > _diag[row][diagColumn] // only if our contiguous match would be longer than the "forwards" contiguous match
        ) {
            diagColumn = column;
        }
        if (diagColumn === column) {
            // this is a contiguous match
            backwardsDiagLength++;
        } else {
            backwardsDiagLength = 1;
        }
        if (!maxMatchColumn) {
            // remember the last matched column
            maxMatchColumn = diagColumn;
        }
        row--;
        column = diagColumn - 1;
        result.push(column);
    }
    if (wordLen - wordStart === patternLen && options.boostFullMatch) {
        // the word matches the pattern with all characters!
        // giving the score a total match boost (to come up ahead other words)
        result[0] += 2;
    }
    // Add 1 penalty for each skipped character in the word
    const skippedCharsCount = maxMatchColumn - patternLen;
    result[0] -= skippedCharsCount;
    return result;
}
function _fillInMaxWordMatchPos(patternLen, wordLen, patternStart, wordStart, patternLow, wordLow) {
    let patternPos = patternLen - 1;
    let wordPos = wordLen - 1;
    while(patternPos >= patternStart && wordPos >= wordStart){
        if (patternLow[patternPos] === wordLow[wordPos]) {
            _maxWordMatchPos[patternPos] = wordPos;
            patternPos--;
        }
        wordPos--;
    }
}
function _doScore(pattern, patternLow, patternPos, patternStart, word, wordLow, wordPos, wordLen, wordStart, newMatchStart, outFirstMatchStrong) {
    if (patternLow[patternPos] !== wordLow[wordPos]) {
        return Number.MIN_SAFE_INTEGER;
    }
    let score = 1;
    let isGapLocation = false;
    if (wordPos === patternPos - patternStart) {
        // common prefix: `foobar <-> foobaz`
        //                            ^^^^^
        score = pattern[patternPos] === word[wordPos] ? 7 : 5;
    } else if (isUpperCaseAtPos(wordPos, word, wordLow) && (wordPos === 0 || !isUpperCaseAtPos(wordPos - 1, word, wordLow))) {
        // hitting upper-case: `foo <-> forOthers`
        //                              ^^ ^
        score = pattern[patternPos] === word[wordPos] ? 7 : 5;
        isGapLocation = true;
    } else if (isSeparatorAtPos(wordLow, wordPos) && (wordPos === 0 || !isSeparatorAtPos(wordLow, wordPos - 1))) {
        // hitting a separator: `. <-> foo.bar`
        //                                ^
        score = 5;
    } else if (isSeparatorAtPos(wordLow, wordPos - 1) || isWhitespaceAtPos(wordLow, wordPos - 1)) {
        // post separator: `foo <-> bar_foo`
        //                              ^^^
        score = 5;
        isGapLocation = true;
    }
    if (score > 1 && patternPos === patternStart) {
        outFirstMatchStrong[0] = true;
    }
    if (!isGapLocation) {
        isGapLocation = isUpperCaseAtPos(wordPos, word, wordLow) || isSeparatorAtPos(wordLow, wordPos - 1) || isWhitespaceAtPos(wordLow, wordPos - 1);
    }
    //
    if (patternPos === patternStart) {
        if (wordPos > wordStart) {
            // the first pattern character would match a word character that is not at the word start
            // so introduce a penalty to account for the gap preceding this match
            score -= isGapLocation ? 3 : 5;
        }
    } else {
        if (newMatchStart) {
            // this would be the beginning of a new match (i.e. there would be a gap before this location)
            score += isGapLocation ? 2 : 0;
        } else {
            // this is part of a contiguous match, so give it a slight bonus, but do so only if it would not be a preferred gap location
            score += isGapLocation ? 0 : 1;
        }
    }
    if (wordPos + 1 === wordLen) {
        // we always penalize gaps, but this gives unfair advantages to a match that would match the last character in the word
        // so pretend there is a gap after the last character in the word to normalize things
        score -= isGapLocation ? 3 : 5;
    }
    return score;
}
function fuzzyScoreGracefulAggressive(pattern, lowPattern, patternPos, word, lowWord, wordPos, options) {
    return fuzzyScoreWithPermutations(pattern, lowPattern, patternPos, word, lowWord, wordPos, true, options);
}
function fuzzyScoreWithPermutations(pattern, lowPattern, patternPos, word, lowWord, wordPos, aggressive, options) {
    let top = fuzzyScore(pattern, lowPattern, patternPos, word, lowWord, wordPos, options);
    if (top && !aggressive) {
        // when using the original pattern yield a result we`
        // return it unless we are aggressive and try to find
        // a better alignment, e.g. `cno` -> `^co^ns^ole` or `^c^o^nsole`.
        return top;
    }
    if (pattern.length >= 3) {
        // When the pattern is long enough then try a few (max 7)
        // permutations of the pattern to find a better match. The
        // permutations only swap neighbouring characters, e.g
        // `cnoso` becomes `conso`, `cnsoo`, `cnoos`.
        const tries = Math.min(7, pattern.length - 1);
        for(let movingPatternPos = patternPos + 1; movingPatternPos < tries; movingPatternPos++){
            const newPattern = nextTypoPermutation(pattern, movingPatternPos);
            if (newPattern) {
                const candidate = fuzzyScore(newPattern, newPattern.toLowerCase(), patternPos, word, lowWord, wordPos, options);
                if (candidate) {
                    candidate[0] -= 3; // permutation penalty
                    if (!top || candidate[0] > top[0]) {
                        top = candidate;
                    }
                }
            }
        }
    }
    return top;
}
function nextTypoPermutation(pattern, patternPos) {
    if (patternPos + 1 >= pattern.length) {
        return undefined;
    }
    const swap1 = pattern[patternPos];
    const swap2 = pattern[patternPos + 1];
    if (swap1 === swap2) {
        return undefined;
    }
    return pattern.slice(0, patternPos) + swap2 + swap1 + pattern.slice(patternPos + 2);
} //#endregion
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/iconLabels.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "escapeIcons": (()=>escapeIcons),
    "getCodiconAriaLabel": (()=>getCodiconAriaLabel),
    "markdownEscapeEscapedIcons": (()=>markdownEscapeEscapedIcons),
    "matchesFuzzyIconAware": (()=>matchesFuzzyIconAware),
    "parseLabelWithIcons": (()=>parseLabelWithIcons),
    "stripIcons": (()=>stripIcons)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$filters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/filters.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$themables$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/themables.js [app-client] (ecmascript)");
;
;
;
const iconStartMarker = '$(';
const iconsRegex = new RegExp(`\\$\\(${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$themables$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThemeIcon"].iconNameExpression}(?:${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$themables$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThemeIcon"].iconModifierExpression})?\\)`, 'g'); // no capturing groups
const escapeIconsRegex = new RegExp(`(\\\\)?${iconsRegex.source}`, 'g');
function escapeIcons(text) {
    return text.replace(escapeIconsRegex, (match, escaped)=>escaped ? match : `\\${match}`);
}
const markdownEscapedIconsRegex = new RegExp(`\\\\${iconsRegex.source}`, 'g');
function markdownEscapeEscapedIcons(text) {
    // Need to add an extra \ for escaping in markdown
    return text.replace(markdownEscapedIconsRegex, (match)=>`\\${match}`);
}
const stripIconsRegex = new RegExp(`(\\s)?(\\\\)?${iconsRegex.source}(\\s)?`, 'g');
function stripIcons(text) {
    if (text.indexOf(iconStartMarker) === -1) {
        return text;
    }
    return text.replace(stripIconsRegex, (match, preWhitespace, escaped, postWhitespace)=>escaped ? match : preWhitespace || postWhitespace || '');
}
function getCodiconAriaLabel(text) {
    if (!text) {
        return '';
    }
    return text.replace(/\$\((.*?)\)/g, (_match, codiconName)=>` ${codiconName} `).trim();
}
const _parseIconsRegex = new RegExp(`\\$\\(${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$themables$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThemeIcon"].iconNameCharacter}+\\)`, 'g');
function parseLabelWithIcons(input) {
    _parseIconsRegex.lastIndex = 0;
    let text = '';
    const iconOffsets = [];
    let iconsOffset = 0;
    while(true){
        const pos = _parseIconsRegex.lastIndex;
        const match = _parseIconsRegex.exec(input);
        const chars = input.substring(pos, match?.index);
        if (chars.length > 0) {
            text += chars;
            for(let i = 0; i < chars.length; i++){
                iconOffsets.push(iconsOffset);
            }
        }
        if (!match) {
            break;
        }
        iconsOffset += match[0].length;
    }
    return {
        text,
        iconOffsets
    };
}
function matchesFuzzyIconAware(query, target, enableSeparateSubstringMatching = false) {
    const { text, iconOffsets } = target;
    // Return early if there are no icon markers in the word to match against
    if (!iconOffsets || iconOffsets.length === 0) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$filters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["matchesFuzzy"])(query, text, enableSeparateSubstringMatching);
    }
    // Trim the word to match against because it could have leading
    // whitespace now if the word started with an icon
    const wordToMatchAgainstWithoutIconsTrimmed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ltrim"])(text, ' ');
    const leadingWhitespaceOffset = text.length - wordToMatchAgainstWithoutIconsTrimmed.length;
    // match on value without icon
    const matches = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$filters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["matchesFuzzy"])(query, wordToMatchAgainstWithoutIconsTrimmed, enableSeparateSubstringMatching);
    // Map matches back to offsets with icon and trimming
    if (matches) {
        for (const match of matches){
            const iconOffset = iconOffsets[match.start + leadingWhitespaceOffset] + leadingWhitespaceOffset /* overall leading whitespace offset */ ;
            match.start += iconOffset;
            match.end += iconOffset;
        }
    }
    return matches;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/resources.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "DataUri": (()=>DataUri),
    "ExtUri": (()=>ExtUri),
    "addTrailingPathSeparator": (()=>addTrailingPathSeparator),
    "basename": (()=>basename),
    "basenameOrAuthority": (()=>basenameOrAuthority),
    "dirname": (()=>dirname),
    "extUri": (()=>extUri),
    "extUriBiasedIgnorePathCase": (()=>extUriBiasedIgnorePathCase),
    "extUriIgnorePathCase": (()=>extUriIgnorePathCase),
    "extname": (()=>extname),
    "getComparisonKey": (()=>getComparisonKey),
    "hasTrailingPathSeparator": (()=>hasTrailingPathSeparator),
    "isAbsolutePath": (()=>isAbsolutePath),
    "isEqual": (()=>isEqual),
    "isEqualAuthority": (()=>isEqualAuthority),
    "isEqualOrParent": (()=>isEqualOrParent),
    "joinPath": (()=>joinPath),
    "normalizePath": (()=>normalizePath),
    "originalFSPath": (()=>originalFSPath),
    "relativePath": (()=>relativePath),
    "removeTrailingPathSeparator": (()=>removeTrailingPathSeparator),
    "resolvePath": (()=>resolvePath)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/extpath.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/network.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/path.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/uri.js [app-client] (ecmascript)");
;
;
;
;
;
;
function originalFSPath(uri) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["uriToFsPath"])(uri, true);
}
class ExtUri {
    constructor(_ignorePathCasing){
        this._ignorePathCasing = _ignorePathCasing;
    }
    compare(uri1, uri2, ignoreFragment = false) {
        if (uri1 === uri2) {
            return 0;
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compare"])(this.getComparisonKey(uri1, ignoreFragment), this.getComparisonKey(uri2, ignoreFragment));
    }
    isEqual(uri1, uri2, ignoreFragment = false) {
        if (uri1 === uri2) {
            return true;
        }
        if (!uri1 || !uri2) {
            return false;
        }
        return this.getComparisonKey(uri1, ignoreFragment) === this.getComparisonKey(uri2, ignoreFragment);
    }
    getComparisonKey(uri, ignoreFragment = false) {
        return uri.with({
            path: this._ignorePathCasing(uri) ? uri.path.toLowerCase() : undefined,
            fragment: ignoreFragment ? null : undefined
        }).toString();
    }
    isEqualOrParent(base, parentCandidate, ignoreFragment = false) {
        if (base.scheme === parentCandidate.scheme) {
            if (base.scheme === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Schemas"].file) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqualOrParent"])(originalFSPath(base), originalFSPath(parentCandidate), this._ignorePathCasing(base)) && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);
            }
            if (isEqualAuthority(base.authority, parentCandidate.authority)) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqualOrParent"])(base.path, parentCandidate.path, this._ignorePathCasing(base), '/') && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);
            }
        }
        return false;
    }
    // --- path math
    joinPath(resource, ...pathFragment) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].joinPath(resource, ...pathFragment);
    }
    basenameOrAuthority(resource) {
        return basename(resource) || resource.authority;
    }
    basename(resource) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].basename(resource.path);
    }
    extname(resource) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].extname(resource.path);
    }
    dirname(resource) {
        if (resource.path.length === 0) {
            return resource;
        }
        let dirname;
        if (resource.scheme === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Schemas"].file) {
            dirname = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].file((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dirname"])(originalFSPath(resource))).path;
        } else {
            dirname = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].dirname(resource.path);
            if (resource.authority && dirname.length && dirname.charCodeAt(0) !== 47 /* CharCode.Slash */ ) {
                console.error(`dirname("${resource.toString})) resulted in a relative path`);
                dirname = '/'; // If a URI contains an authority component, then the path component must either be empty or begin with a CharCode.Slash ("/") character
            }
        }
        return resource.with({
            path: dirname
        });
    }
    normalizePath(resource) {
        if (!resource.path.length) {
            return resource;
        }
        let normalizedPath;
        if (resource.scheme === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Schemas"].file) {
            normalizedPath = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].file((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["normalize"])(originalFSPath(resource))).path;
        } else {
            normalizedPath = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].normalize(resource.path);
        }
        return resource.with({
            path: normalizedPath
        });
    }
    relativePath(from, to) {
        if (from.scheme !== to.scheme || !isEqualAuthority(from.authority, to.authority)) {
            return undefined;
        }
        if (from.scheme === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Schemas"].file) {
            const relativePath = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["relative"])(originalFSPath(from), originalFSPath(to));
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWindows"] ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toSlashes"])(relativePath) : relativePath;
        }
        let fromPath = from.path || '/';
        const toPath = to.path || '/';
        if (this._ignorePathCasing(from)) {
            // make casing of fromPath match toPath
            let i = 0;
            for(const len = Math.min(fromPath.length, toPath.length); i < len; i++){
                if (fromPath.charCodeAt(i) !== toPath.charCodeAt(i)) {
                    if (fromPath.charAt(i).toLowerCase() !== toPath.charAt(i).toLowerCase()) {
                        break;
                    }
                }
            }
            fromPath = toPath.substr(0, i) + fromPath.substr(i);
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].relative(fromPath, toPath);
    }
    resolvePath(base, path) {
        if (base.scheme === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Schemas"].file) {
            const newURI = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].file((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolve"])(originalFSPath(base), path));
            return base.with({
                authority: newURI.authority,
                path: newURI.path
            });
        }
        path = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toPosixPath"])(path); // we allow path to be a windows path
        return base.with({
            path: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["posix"].resolve(base.path, path)
        });
    }
    // --- misc
    isAbsolutePath(resource) {
        return !!resource.path && resource.path[0] === '/';
    }
    isEqualAuthority(a1, a2) {
        return a1 === a2 || a1 !== undefined && a2 !== undefined && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["equalsIgnoreCase"])(a1, a2);
    }
    hasTrailingPathSeparator(resource, sep = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"]) {
        if (resource.scheme === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Schemas"].file) {
            const fsp = originalFSPath(resource);
            return fsp.length > (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRoot"])(fsp).length && fsp[fsp.length - 1] === sep;
        } else {
            const p = resource.path;
            return p.length > 1 && p.charCodeAt(p.length - 1) === 47 /* CharCode.Slash */  && !/^[a-zA-Z]:(\/$|\\$)/.test(resource.fsPath); // ignore the slash at offset 0
        }
    }
    removeTrailingPathSeparator(resource, sep = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"]) {
        // Make sure that the path isn't a drive letter. A trailing separator there is not removable.
        if (hasTrailingPathSeparator(resource, sep)) {
            return resource.with({
                path: resource.path.substr(0, resource.path.length - 1)
            });
        }
        return resource;
    }
    addTrailingPathSeparator(resource, sep = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"]) {
        let isRootSep = false;
        if (resource.scheme === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Schemas"].file) {
            const fsp = originalFSPath(resource);
            isRootSep = fsp !== undefined && fsp.length === (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRoot"])(fsp).length && fsp[fsp.length - 1] === sep;
        } else {
            sep = '/';
            const p = resource.path;
            isRootSep = p.length === 1 && p.charCodeAt(p.length - 1) === 47 /* CharCode.Slash */ ;
        }
        if (!isRootSep && !hasTrailingPathSeparator(resource, sep)) {
            return resource.with({
                path: resource.path + '/'
            });
        }
        return resource;
    }
}
const extUri = new ExtUri(()=>false);
const extUriBiasedIgnorePathCase = new ExtUri((uri)=>{
    // A file scheme resource is in the same platform as code, so ignore case for non linux platforms
    // Resource can be from another platform. Lowering the case as an hack. Should come from File system provider
    return uri.scheme === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$network$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Schemas"].file ? !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLinux"] : true;
});
const extUriIgnorePathCase = new ExtUri((_)=>true);
const isEqual = extUri.isEqual.bind(extUri);
const isEqualOrParent = extUri.isEqualOrParent.bind(extUri);
const getComparisonKey = extUri.getComparisonKey.bind(extUri);
const basenameOrAuthority = extUri.basenameOrAuthority.bind(extUri);
const basename = extUri.basename.bind(extUri);
const extname = extUri.extname.bind(extUri);
const dirname = extUri.dirname.bind(extUri);
const joinPath = extUri.joinPath.bind(extUri);
const normalizePath = extUri.normalizePath.bind(extUri);
const relativePath = extUri.relativePath.bind(extUri);
const resolvePath = extUri.resolvePath.bind(extUri);
const isAbsolutePath = extUri.isAbsolutePath.bind(extUri);
const isEqualAuthority = extUri.isEqualAuthority.bind(extUri);
const hasTrailingPathSeparator = extUri.hasTrailingPathSeparator.bind(extUri);
const removeTrailingPathSeparator = extUri.removeTrailingPathSeparator.bind(extUri);
const addTrailingPathSeparator = extUri.addTrailingPathSeparator.bind(extUri);
var DataUri;
(function(DataUri) {
    DataUri.META_DATA_LABEL = 'label';
    DataUri.META_DATA_DESCRIPTION = 'description';
    DataUri.META_DATA_SIZE = 'size';
    DataUri.META_DATA_MIME = 'mime';
    function parseMetaData(dataUri) {
        const metadata = new Map();
        // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...
        // the metadata is: size:2313;label:SomeLabel;description:SomeDescription
        const meta = dataUri.path.substring(dataUri.path.indexOf(';') + 1, dataUri.path.lastIndexOf(';'));
        meta.split(';').forEach((property)=>{
            const [key, value] = property.split(':');
            if (key && value) {
                metadata.set(key, value);
            }
        });
        // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...
        // the mime is: image/png
        const mime = dataUri.path.substring(0, dataUri.path.indexOf(';'));
        if (mime) {
            metadata.set(DataUri.META_DATA_MIME, mime);
        }
        return metadata;
    }
    DataUri.parseMetaData = parseMetaData;
})(DataUri || (DataUri = {}));
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/htmlContent.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "MarkdownString": (()=>MarkdownString),
    "appendEscapedMarkdownCodeBlockFence": (()=>appendEscapedMarkdownCodeBlockFence),
    "escapeDoubleQuotes": (()=>escapeDoubleQuotes),
    "escapeMarkdownSyntaxTokens": (()=>escapeMarkdownSyntaxTokens),
    "isEmptyMarkdownString": (()=>isEmptyMarkdownString),
    "isMarkdownString": (()=>isMarkdownString),
    "markdownStringEqual": (()=>markdownStringEqual),
    "parseHrefAndDimensions": (()=>parseHrefAndDimensions),
    "removeMarkdownEscapes": (()=>removeMarkdownEscapes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/errors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$iconLabels$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/iconLabels.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$resources$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/resources.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/uri.js [app-client] (ecmascript)");
;
;
;
;
;
class MarkdownString {
    constructor(value = '', isTrustedOrOptions = false){
        this.value = value;
        if (typeof this.value !== 'string') {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["illegalArgument"])('value');
        }
        if (typeof isTrustedOrOptions === 'boolean') {
            this.isTrusted = isTrustedOrOptions;
            this.supportThemeIcons = false;
            this.supportHtml = false;
        } else {
            this.isTrusted = isTrustedOrOptions.isTrusted ?? undefined;
            this.supportThemeIcons = isTrustedOrOptions.supportThemeIcons ?? false;
            this.supportHtml = isTrustedOrOptions.supportHtml ?? false;
        }
    }
    appendText(value, newlineStyle = 0 /* MarkdownStringTextNewlineStyle.Paragraph */ ) {
        this.value += escapeMarkdownSyntaxTokens(this.supportThemeIcons ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$iconLabels$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIcons"])(value) : value) // CodeQL [SM02383] The Markdown is fully sanitized after being rendered.
        .replace(/([ \t]+)/g, (_match, g1)=>'&nbsp;'.repeat(g1.length)) // CodeQL [SM02383] The Markdown is fully sanitized after being rendered.
        .replace(/\>/gm, '\\>') // CodeQL [SM02383] The Markdown is fully sanitized after being rendered.
        .replace(/\n/g, newlineStyle === 1 /* MarkdownStringTextNewlineStyle.Break */  ? '\\\n' : '\n\n'); // CodeQL [SM02383] The Markdown is fully sanitized after being rendered.
        return this;
    }
    appendMarkdown(value) {
        this.value += value;
        return this;
    }
    appendCodeblock(langId, code) {
        this.value += `\n${appendEscapedMarkdownCodeBlockFence(code, langId)}\n`;
        return this;
    }
    appendLink(target, label, title) {
        this.value += '[';
        this.value += this._escape(label, ']');
        this.value += '](';
        this.value += this._escape(String(target), ')');
        if (title) {
            this.value += ` "${this._escape(this._escape(title, '"'), ')')}"`;
        }
        this.value += ')';
        return this;
    }
    _escape(value, ch) {
        const r = new RegExp((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeRegExpCharacters"])(ch), 'g');
        return value.replace(r, (match, offset)=>{
            if (value.charAt(offset - 1) !== '\\') {
                return `\\${match}`;
            } else {
                return match;
            }
        });
    }
}
function isEmptyMarkdownString(oneOrMany) {
    if (isMarkdownString(oneOrMany)) {
        return !oneOrMany.value;
    } else if (Array.isArray(oneOrMany)) {
        return oneOrMany.every(isEmptyMarkdownString);
    } else {
        return true;
    }
}
function isMarkdownString(thing) {
    if (thing instanceof MarkdownString) {
        return true;
    } else if (thing && typeof thing === 'object') {
        return typeof thing.value === 'string' && (typeof thing.isTrusted === 'boolean' || typeof thing.isTrusted === 'object' || thing.isTrusted === undefined) && (typeof thing.supportThemeIcons === 'boolean' || thing.supportThemeIcons === undefined);
    }
    return false;
}
function markdownStringEqual(a, b) {
    if (a === b) {
        return true;
    } else if (!a || !b) {
        return false;
    } else {
        return a.value === b.value && a.isTrusted === b.isTrusted && a.supportThemeIcons === b.supportThemeIcons && a.supportHtml === b.supportHtml && (a.baseUri === b.baseUri || !!a.baseUri && !!b.baseUri && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$resources$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].from(a.baseUri), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].from(b.baseUri)));
    }
}
function escapeMarkdownSyntaxTokens(text) {
    // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    return text.replace(/[\\`*_{}[\]()#+\-!~]/g, '\\$&'); // CodeQL [SM02383] Backslash is escaped in the character class
}
function appendEscapedMarkdownCodeBlockFence(code, langId) {
    const longestFenceLength = code.match(/^`+/gm)?.reduce((a, b)=>a.length > b.length ? a : b).length ?? 0;
    const desiredFenceLength = longestFenceLength >= 3 ? longestFenceLength + 1 : 3;
    // the markdown result
    return [
        `${'`'.repeat(desiredFenceLength)}${langId}`,
        code,
        `${'`'.repeat(desiredFenceLength)}`
    ].join('\n');
}
function escapeDoubleQuotes(input) {
    return input.replace(/"/g, '&quot;');
}
function removeMarkdownEscapes(text) {
    if (!text) {
        return text;
    }
    return text.replace(/\\([\\`*_{}[\]()#+\-.!~])/g, '$1');
}
function parseHrefAndDimensions(href) {
    const dimensions = [];
    const splitted = href.split('|').map((s)=>s.trim());
    href = splitted[0];
    const parameters = splitted[1];
    if (parameters) {
        const heightFromParams = /height=(\d+)/.exec(parameters);
        const widthFromParams = /width=(\d+)/.exec(parameters);
        const height = heightFromParams ? heightFromParams[1] : '';
        const width = widthFromParams ? widthFromParams[1] : '';
        const widthIsFinite = isFinite(parseInt(width));
        const heightIsFinite = isFinite(parseInt(height));
        if (widthIsFinite) {
            dimensions.push(`width="${width}"`);
        }
        if (heightIsFinite) {
            dimensions.push(`height="${height}"`);
        }
    }
    return {
        href,
        dimensions
    };
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/idGenerator.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "IdGenerator": (()=>IdGenerator),
    "defaultGenerator": (()=>defaultGenerator)
});
class IdGenerator {
    constructor(prefix){
        this._prefix = prefix;
        this._lastId = 0;
    }
    nextId() {
        return this._prefix + ++this._lastId;
    }
}
const defaultGenerator = new IdGenerator('id#');
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/marked/marked.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * marked v14.0.0 - a markdown parser
 * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 */ /**
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 */ // ESM-uncomment-begin
__turbopack_context__.s({
    "Hooks": (()=>Hooks),
    "Lexer": (()=>Lexer),
    "Marked": (()=>Marked),
    "Parser": (()=>Parser),
    "Renderer": (()=>Renderer),
    "TextRenderer": (()=>TextRenderer),
    "Tokenizer": (()=>Tokenizer),
    "defaults": (()=>defaults),
    "getDefaults": (()=>getDefaults),
    "lexer": (()=>lexer),
    "marked": (()=>marked),
    "options": (()=>options),
    "parse": (()=>parse),
    "parseInline": (()=>parseInline),
    "parser": (()=>parser),
    "setOptions": (()=>setOptions),
    "use": (()=>use),
    "walkTokens": (()=>walkTokens)
});
let __marked_exports = {};
(function() {
    function define(deps, factory) {
        factory(__marked_exports);
    }
    define.amd = true;
    // ESM-uncomment-end
    (function(global, factory) {
        typeof define === 'function' && define.amd ? define([
            'exports'
        ], factory) : ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.marked = {}));
    })(this, function(exports1) {
        'use strict';
        /**
	 * Gets the original marked default options.
	 */ function _getDefaults() {
            return {
                async: false,
                breaks: false,
                extensions: null,
                gfm: true,
                hooks: null,
                pedantic: false,
                renderer: null,
                silent: false,
                tokenizer: null,
                walkTokens: null
            };
        }
        exports1.defaults = _getDefaults();
        function changeDefaults(newDefaults) {
            exports1.defaults = newDefaults;
        }
        /**
	 * Helpers
	 */ const escapeTest = /[&<>"']/;
        const escapeReplace = new RegExp(escapeTest.source, 'g');
        const escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
        const escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');
        const escapeReplacements = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        };
        const getEscapeReplacement = (ch)=>escapeReplacements[ch];
        function escape$1(html, encode) {
            if (encode) {
                if (escapeTest.test(html)) {
                    return html.replace(escapeReplace, getEscapeReplacement);
                }
            } else {
                if (escapeTestNoEncode.test(html)) {
                    return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
                }
            }
            return html;
        }
        const caret = /(^|[^\[])\^/g;
        function edit(regex, opt) {
            let source = typeof regex === 'string' ? regex : regex.source;
            opt = opt || '';
            const obj = {
                replace: (name, val)=>{
                    let valSource = typeof val === 'string' ? val : val.source;
                    valSource = valSource.replace(caret, '$1');
                    source = source.replace(name, valSource);
                    return obj;
                },
                getRegex: ()=>{
                    return new RegExp(source, opt);
                }
            };
            return obj;
        }
        function cleanUrl(href) {
            try {
                href = encodeURI(href).replace(/%25/g, '%');
            } catch  {
                return null;
            }
            return href;
        }
        const noopTest = {
            exec: ()=>null
        };
        function splitCells(tableRow, count) {
            // ensure that every cell-delimiting pipe has a space
            // before it to distinguish it from an escaped pipe
            const row = tableRow.replace(/\|/g, (match, offset, str)=>{
                let escaped = false;
                let curr = offset;
                while(--curr >= 0 && str[curr] === '\\')escaped = !escaped;
                if (escaped) {
                    // odd number of slashes means | is escaped
                    // so we leave it alone
                    return '|';
                } else {
                    // add space before unescaped |
                    return ' |';
                }
            }), cells = row.split(/ \|/);
            let i = 0;
            // First/last cell in a row cannot be empty if it has no leading/trailing pipe
            if (!cells[0].trim()) {
                cells.shift();
            }
            if (cells.length > 0 && !cells[cells.length - 1].trim()) {
                cells.pop();
            }
            if (count) {
                if (cells.length > count) {
                    cells.splice(count);
                } else {
                    while(cells.length < count)cells.push('');
                }
            }
            for(; i < cells.length; i++){
                // leading or trailing whitespace is ignored per the gfm spec
                cells[i] = cells[i].trim().replace(/\\\|/g, '|');
            }
            return cells;
        }
        /**
	 * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
	 * /c*$/ is vulnerable to REDOS.
	 *
	 * @param str
	 * @param c
	 * @param invert Remove suffix of non-c chars instead. Default falsey.
	 */ function rtrim(str, c, invert) {
            const l = str.length;
            if (l === 0) {
                return '';
            }
            // Length of suffix matching the invert condition.
            let suffLen = 0;
            // Step left until we fail to match the invert condition.
            while(suffLen < l){
                const currChar = str.charAt(l - suffLen - 1);
                if (currChar === c && !invert) {
                    suffLen++;
                } else if (currChar !== c && invert) {
                    suffLen++;
                } else {
                    break;
                }
            }
            return str.slice(0, l - suffLen);
        }
        function findClosingBracket(str, b) {
            if (str.indexOf(b[1]) === -1) {
                return -1;
            }
            let level = 0;
            for(let i = 0; i < str.length; i++){
                if (str[i] === '\\') {
                    i++;
                } else if (str[i] === b[0]) {
                    level++;
                } else if (str[i] === b[1]) {
                    level--;
                    if (level < 0) {
                        return i;
                    }
                }
            }
            return -1;
        }
        function outputLink(cap, link, raw, lexer) {
            const href = link.href;
            const title = link.title ? escape$1(link.title) : null;
            const text = cap[1].replace(/\\([\[\]])/g, '$1');
            if (cap[0].charAt(0) !== '!') {
                lexer.state.inLink = true;
                const token = {
                    type: 'link',
                    raw,
                    href,
                    title,
                    text,
                    tokens: lexer.inlineTokens(text)
                };
                lexer.state.inLink = false;
                return token;
            }
            return {
                type: 'image',
                raw,
                href,
                title,
                text: escape$1(text)
            };
        }
        function indentCodeCompensation(raw, text) {
            const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
            if (matchIndentToCode === null) {
                return text;
            }
            const indentToCode = matchIndentToCode[1];
            return text.split('\n').map((node)=>{
                const matchIndentInNode = node.match(/^\s+/);
                if (matchIndentInNode === null) {
                    return node;
                }
                const [indentInNode] = matchIndentInNode;
                if (indentInNode.length >= indentToCode.length) {
                    return node.slice(indentToCode.length);
                }
                return node;
            }).join('\n');
        }
        /**
	 * Tokenizer
	 */ class _Tokenizer {
            options;
            rules;
            lexer;
            constructor(options){
                this.options = options || exports1.defaults;
            }
            space(src) {
                const cap = this.rules.block.newline.exec(src);
                if (cap && cap[0].length > 0) {
                    return {
                        type: 'space',
                        raw: cap[0]
                    };
                }
            }
            code(src) {
                const cap = this.rules.block.code.exec(src);
                if (cap) {
                    const text = cap[0].replace(/^ {1,4}/gm, '');
                    return {
                        type: 'code',
                        raw: cap[0],
                        codeBlockStyle: 'indented',
                        text: !this.options.pedantic ? rtrim(text, '\n') : text
                    };
                }
            }
            fences(src) {
                const cap = this.rules.block.fences.exec(src);
                if (cap) {
                    const raw = cap[0];
                    const text = indentCodeCompensation(raw, cap[3] || '');
                    return {
                        type: 'code',
                        raw,
                        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],
                        text
                    };
                }
            }
            heading(src) {
                const cap = this.rules.block.heading.exec(src);
                if (cap) {
                    let text = cap[2].trim();
                    // remove trailing #s
                    if (/#$/.test(text)) {
                        const trimmed = rtrim(text, '#');
                        if (this.options.pedantic) {
                            text = trimmed.trim();
                        } else if (!trimmed || / $/.test(trimmed)) {
                            // CommonMark requires space before trailing #s
                            text = trimmed.trim();
                        }
                    }
                    return {
                        type: 'heading',
                        raw: cap[0],
                        depth: cap[1].length,
                        text,
                        tokens: this.lexer.inline(text)
                    };
                }
            }
            hr(src) {
                const cap = this.rules.block.hr.exec(src);
                if (cap) {
                    return {
                        type: 'hr',
                        raw: rtrim(cap[0], '\n')
                    };
                }
            }
            blockquote(src) {
                const cap = this.rules.block.blockquote.exec(src);
                if (cap) {
                    let lines = rtrim(cap[0], '\n').split('\n');
                    let raw = '';
                    let text = '';
                    const tokens = [];
                    while(lines.length > 0){
                        let inBlockquote = false;
                        const currentLines = [];
                        let i;
                        for(i = 0; i < lines.length; i++){
                            // get lines up to a continuation
                            if (/^ {0,3}>/.test(lines[i])) {
                                currentLines.push(lines[i]);
                                inBlockquote = true;
                            } else if (!inBlockquote) {
                                currentLines.push(lines[i]);
                            } else {
                                break;
                            }
                        }
                        lines = lines.slice(i);
                        const currentRaw = currentLines.join('\n');
                        const currentText = currentRaw// precede setext continuation with 4 spaces so it isn't a setext
                        .replace(/\n {0,3}((?:=+|-+) *)(?=\n|$)/g, '\n    $1').replace(/^ {0,3}>[ \t]?/gm, '');
                        raw = raw ? `${raw}\n${currentRaw}` : currentRaw;
                        text = text ? `${text}\n${currentText}` : currentText;
                        // parse blockquote lines as top level tokens
                        // merge paragraphs if this is a continuation
                        const top = this.lexer.state.top;
                        this.lexer.state.top = true;
                        this.lexer.blockTokens(currentText, tokens, true);
                        this.lexer.state.top = top;
                        // if there is no continuation then we are done
                        if (lines.length === 0) {
                            break;
                        }
                        const lastToken = tokens[tokens.length - 1];
                        if (lastToken?.type === 'code') {
                            break;
                        } else if (lastToken?.type === 'blockquote') {
                            // include continuation in nested blockquote
                            const oldToken = lastToken;
                            const newText = oldToken.raw + '\n' + lines.join('\n');
                            const newToken = this.blockquote(newText);
                            tokens[tokens.length - 1] = newToken;
                            raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;
                            text = text.substring(0, text.length - oldToken.text.length) + newToken.text;
                            break;
                        } else if (lastToken?.type === 'list') {
                            // include continuation in nested list
                            const oldToken = lastToken;
                            const newText = oldToken.raw + '\n' + lines.join('\n');
                            const newToken = this.list(newText);
                            tokens[tokens.length - 1] = newToken;
                            raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;
                            text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;
                            lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\n');
                            continue;
                        }
                    }
                    return {
                        type: 'blockquote',
                        raw,
                        tokens,
                        text
                    };
                }
            }
            list(src) {
                let cap = this.rules.block.list.exec(src);
                if (cap) {
                    let bull = cap[1].trim();
                    const isordered = bull.length > 1;
                    const list = {
                        type: 'list',
                        raw: '',
                        ordered: isordered,
                        start: isordered ? +bull.slice(0, -1) : '',
                        loose: false,
                        items: []
                    };
                    bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
                    if (this.options.pedantic) {
                        bull = isordered ? bull : '[*+-]';
                    }
                    // Get next list item
                    const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\t ][^\\n]*)?(?:\\n|$))`);
                    let endsWithBlankLine = false;
                    // Check if current bullet point can start a new List Item
                    while(src){
                        let endEarly = false;
                        let raw = '';
                        let itemContents = '';
                        if (!(cap = itemRegex.exec(src))) {
                            break;
                        }
                        if (this.rules.block.hr.test(src)) {
                            break;
                        }
                        raw = cap[0];
                        src = src.substring(raw.length);
                        let line = cap[2].split('\n', 1)[0].replace(/^\t+/, (t)=>' '.repeat(3 * t.length));
                        let nextLine = src.split('\n', 1)[0];
                        let blankLine = !line.trim();
                        let indent = 0;
                        if (this.options.pedantic) {
                            indent = 2;
                            itemContents = line.trimStart();
                        } else if (blankLine) {
                            indent = cap[1].length + 1;
                        } else {
                            indent = cap[2].search(/[^ ]/); // Find first non-space char
                            indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent
                            itemContents = line.slice(indent);
                            indent += cap[1].length;
                        }
                        if (blankLine && /^ *$/.test(nextLine)) {
                            raw += nextLine + '\n';
                            src = src.substring(nextLine.length + 1);
                            endEarly = true;
                        }
                        if (!endEarly) {
                            const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`);
                            const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
                            const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
                            const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);
                            // Check if following lines should be included in List Item
                            while(src){
                                const rawLine = src.split('\n', 1)[0];
                                nextLine = rawLine;
                                // Re-align to follow commonmark nesting rules
                                if (this.options.pedantic) {
                                    nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');
                                }
                                // End list item if found code fences
                                if (fencesBeginRegex.test(nextLine)) {
                                    break;
                                }
                                // End list item if found start of new heading
                                if (headingBeginRegex.test(nextLine)) {
                                    break;
                                }
                                // End list item if found start of new bullet
                                if (nextBulletRegex.test(nextLine)) {
                                    break;
                                }
                                // Horizontal rule found
                                if (hrRegex.test(src)) {
                                    break;
                                }
                                if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {
                                    itemContents += '\n' + nextLine.slice(indent);
                                } else {
                                    // not enough indentation
                                    if (blankLine) {
                                        break;
                                    }
                                    // paragraph continuation unless last line was a different block level element
                                    if (line.search(/[^ ]/) >= 4) {
                                        break;
                                    }
                                    if (fencesBeginRegex.test(line)) {
                                        break;
                                    }
                                    if (headingBeginRegex.test(line)) {
                                        break;
                                    }
                                    if (hrRegex.test(line)) {
                                        break;
                                    }
                                    itemContents += '\n' + nextLine;
                                }
                                if (!blankLine && !nextLine.trim()) {
                                    blankLine = true;
                                }
                                raw += rawLine + '\n';
                                src = src.substring(rawLine.length + 1);
                                line = nextLine.slice(indent);
                            }
                        }
                        if (!list.loose) {
                            // If the previous item ended with a blank line, the list is loose
                            if (endsWithBlankLine) {
                                list.loose = true;
                            } else if (/\n *\n *$/.test(raw)) {
                                endsWithBlankLine = true;
                            }
                        }
                        let istask = null;
                        let ischecked;
                        // Check for task list items
                        if (this.options.gfm) {
                            istask = /^\[[ xX]\] /.exec(itemContents);
                            if (istask) {
                                ischecked = istask[0] !== '[ ] ';
                                itemContents = itemContents.replace(/^\[[ xX]\] +/, '');
                            }
                        }
                        list.items.push({
                            type: 'list_item',
                            raw,
                            task: !!istask,
                            checked: ischecked,
                            loose: false,
                            text: itemContents,
                            tokens: []
                        });
                        list.raw += raw;
                    }
                    // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic
                    list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();
                    list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();
                    list.raw = list.raw.trimEnd();
                    // Item child tokens handled here at end because we needed to have the final item to trim it first
                    for(let i = 0; i < list.items.length; i++){
                        this.lexer.state.top = false;
                        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
                        if (!list.loose) {
                            // Check if list should be loose
                            const spacers = list.items[i].tokens.filter((t)=>t.type === 'space');
                            const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t)=>/\n.*\n/.test(t.raw));
                            list.loose = hasMultipleLineBreaks;
                        }
                    }
                    // Set all items to loose if list is loose
                    if (list.loose) {
                        for(let i = 0; i < list.items.length; i++){
                            list.items[i].loose = true;
                        }
                    }
                    return list;
                }
            }
            html(src) {
                const cap = this.rules.block.html.exec(src);
                if (cap) {
                    const token = {
                        type: 'html',
                        block: true,
                        raw: cap[0],
                        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',
                        text: cap[0]
                    };
                    return token;
                }
            }
            def(src) {
                const cap = this.rules.block.def.exec(src);
                if (cap) {
                    const tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
                    const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';
                    const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];
                    return {
                        type: 'def',
                        tag,
                        raw: cap[0],
                        href,
                        title
                    };
                }
            }
            table(src) {
                const cap = this.rules.block.table.exec(src);
                if (!cap) {
                    return;
                }
                if (!/[:|]/.test(cap[2])) {
                    // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading
                    return;
                }
                const headers = splitCells(cap[1]);
                const aligns = cap[2].replace(/^\||\| *$/g, '').split('|');
                const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, '').split('\n') : [];
                const item = {
                    type: 'table',
                    raw: cap[0],
                    header: [],
                    align: [],
                    rows: []
                };
                if (headers.length !== aligns.length) {
                    // header and align columns must be equal, rows can be different.
                    return;
                }
                for (const align of aligns){
                    if (/^ *-+: *$/.test(align)) {
                        item.align.push('right');
                    } else if (/^ *:-+: *$/.test(align)) {
                        item.align.push('center');
                    } else if (/^ *:-+ *$/.test(align)) {
                        item.align.push('left');
                    } else {
                        item.align.push(null);
                    }
                }
                for(let i = 0; i < headers.length; i++){
                    item.header.push({
                        text: headers[i],
                        tokens: this.lexer.inline(headers[i]),
                        header: true,
                        align: item.align[i]
                    });
                }
                for (const row of rows){
                    item.rows.push(splitCells(row, item.header.length).map((cell, i)=>{
                        return {
                            text: cell,
                            tokens: this.lexer.inline(cell),
                            header: false,
                            align: item.align[i]
                        };
                    }));
                }
                return item;
            }
            lheading(src) {
                const cap = this.rules.block.lheading.exec(src);
                if (cap) {
                    return {
                        type: 'heading',
                        raw: cap[0],
                        depth: cap[2].charAt(0) === '=' ? 1 : 2,
                        text: cap[1],
                        tokens: this.lexer.inline(cap[1])
                    };
                }
            }
            paragraph(src) {
                const cap = this.rules.block.paragraph.exec(src);
                if (cap) {
                    const text = cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1];
                    return {
                        type: 'paragraph',
                        raw: cap[0],
                        text,
                        tokens: this.lexer.inline(text)
                    };
                }
            }
            text(src) {
                const cap = this.rules.block.text.exec(src);
                if (cap) {
                    return {
                        type: 'text',
                        raw: cap[0],
                        text: cap[0],
                        tokens: this.lexer.inline(cap[0])
                    };
                }
            }
            escape(src) {
                const cap = this.rules.inline.escape.exec(src);
                if (cap) {
                    return {
                        type: 'escape',
                        raw: cap[0],
                        text: escape$1(cap[1])
                    };
                }
            }
            tag(src) {
                const cap = this.rules.inline.tag.exec(src);
                if (cap) {
                    if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
                        this.lexer.state.inLink = true;
                    } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
                        this.lexer.state.inLink = false;
                    }
                    if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
                        this.lexer.state.inRawBlock = true;
                    } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
                        this.lexer.state.inRawBlock = false;
                    }
                    return {
                        type: 'html',
                        raw: cap[0],
                        inLink: this.lexer.state.inLink,
                        inRawBlock: this.lexer.state.inRawBlock,
                        block: false,
                        text: cap[0]
                    };
                }
            }
            link(src) {
                const cap = this.rules.inline.link.exec(src);
                if (cap) {
                    const trimmedUrl = cap[2].trim();
                    if (!this.options.pedantic && /^</.test(trimmedUrl)) {
                        // commonmark requires matching angle brackets
                        if (!/>$/.test(trimmedUrl)) {
                            return;
                        }
                        // ending angle bracket cannot be escaped
                        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\');
                        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
                            return;
                        }
                    } else {
                        // find closing parenthesis
                        const lastParenIndex = findClosingBracket(cap[2], '()');
                        if (lastParenIndex > -1) {
                            const start = cap[0].indexOf('!') === 0 ? 5 : 4;
                            const linkLen = start + cap[1].length + lastParenIndex;
                            cap[2] = cap[2].substring(0, lastParenIndex);
                            cap[0] = cap[0].substring(0, linkLen).trim();
                            cap[3] = '';
                        }
                    }
                    let href = cap[2];
                    let title = '';
                    if (this.options.pedantic) {
                        // split pedantic href and title
                        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
                        if (link) {
                            href = link[1];
                            title = link[3];
                        }
                    } else {
                        title = cap[3] ? cap[3].slice(1, -1) : '';
                    }
                    href = href.trim();
                    if (/^</.test(href)) {
                        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
                            // pedantic allows starting angle bracket without ending angle bracket
                            href = href.slice(1);
                        } else {
                            href = href.slice(1, -1);
                        }
                    }
                    return outputLink(cap, {
                        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,
                        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title
                    }, cap[0], this.lexer);
                }
            }
            reflink(src, links) {
                let cap;
                if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
                    const linkString = (cap[2] || cap[1]).replace(/\s+/g, ' ');
                    const link = links[linkString.toLowerCase()];
                    if (!link) {
                        const text = cap[0].charAt(0);
                        return {
                            type: 'text',
                            raw: text,
                            text
                        };
                    }
                    return outputLink(cap, link, cap[0], this.lexer);
                }
            }
            emStrong(src, maskedSrc, prevChar = '') {
                let match = this.rules.inline.emStrongLDelim.exec(src);
                if (!match) return;
                // _ can't be between two alphanumerics. \p{L}\p{N} includes non-english alphabet/numbers as well
                if (match[3] && prevChar.match(/[\p{L}\p{N}]/u)) return;
                const nextChar = match[1] || match[2] || '';
                if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {
                    // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)
                    const lLength = [
                        ...match[0]
                    ].length - 1;
                    let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
                    const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;
                    endReg.lastIndex = 0;
                    // Clip maskedSrc to same section of string as src (move to lexer?)
                    maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
                    while((match = endReg.exec(maskedSrc)) != null){
                        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
                        if (!rDelim) continue; // skip single * in __abc*abc__
                        rLength = [
                            ...rDelim
                        ].length;
                        if (match[3] || match[4]) {
                            delimTotal += rLength;
                            continue;
                        } else if (match[5] || match[6]) {
                            if (lLength % 3 && !((lLength + rLength) % 3)) {
                                midDelimTotal += rLength;
                                continue; // CommonMark Emphasis Rules 9-10
                            }
                        }
                        delimTotal -= rLength;
                        if (delimTotal > 0) continue; // Haven't found enough closing delimiters
                        // Remove extra characters. *a*** -> *a*
                        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
                        // char length can be >1 for unicode characters;
                        const lastCharLength = [
                            ...match[0]
                        ][0].length;
                        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);
                        // Create `em` if smallest delimiter has odd char count. *a***
                        if (Math.min(lLength, rLength) % 2) {
                            const text = raw.slice(1, -1);
                            return {
                                type: 'em',
                                raw,
                                text,
                                tokens: this.lexer.inlineTokens(text)
                            };
                        }
                        // Create 'strong' if smallest delimiter has even char count. **a***
                        const text = raw.slice(2, -2);
                        return {
                            type: 'strong',
                            raw,
                            text,
                            tokens: this.lexer.inlineTokens(text)
                        };
                    }
                }
            }
            codespan(src) {
                const cap = this.rules.inline.code.exec(src);
                if (cap) {
                    let text = cap[2].replace(/\n/g, ' ');
                    const hasNonSpaceChars = /[^ ]/.test(text);
                    const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
                    if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
                        text = text.substring(1, text.length - 1);
                    }
                    text = escape$1(text, true);
                    return {
                        type: 'codespan',
                        raw: cap[0],
                        text
                    };
                }
            }
            br(src) {
                const cap = this.rules.inline.br.exec(src);
                if (cap) {
                    return {
                        type: 'br',
                        raw: cap[0]
                    };
                }
            }
            del(src) {
                const cap = this.rules.inline.del.exec(src);
                if (cap) {
                    return {
                        type: 'del',
                        raw: cap[0],
                        text: cap[2],
                        tokens: this.lexer.inlineTokens(cap[2])
                    };
                }
            }
            autolink(src) {
                const cap = this.rules.inline.autolink.exec(src);
                if (cap) {
                    let text, href;
                    if (cap[2] === '@') {
                        text = escape$1(cap[1]);
                        href = 'mailto:' + text;
                    } else {
                        text = escape$1(cap[1]);
                        href = text;
                    }
                    return {
                        type: 'link',
                        raw: cap[0],
                        text,
                        href,
                        tokens: [
                            {
                                type: 'text',
                                raw: text,
                                text
                            }
                        ]
                    };
                }
            }
            url(src) {
                let cap;
                if (cap = this.rules.inline.url.exec(src)) {
                    let text, href;
                    if (cap[2] === '@') {
                        text = escape$1(cap[0]);
                        href = 'mailto:' + text;
                    } else {
                        // do extended autolink path validation
                        let prevCapZero;
                        do {
                            prevCapZero = cap[0];
                            cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';
                        }while (prevCapZero !== cap[0])
                        text = escape$1(cap[0]);
                        if (cap[1] === 'www.') {
                            href = 'http://' + cap[0];
                        } else {
                            href = cap[0];
                        }
                    }
                    return {
                        type: 'link',
                        raw: cap[0],
                        text,
                        href,
                        tokens: [
                            {
                                type: 'text',
                                raw: text,
                                text
                            }
                        ]
                    };
                }
            }
            inlineText(src) {
                const cap = this.rules.inline.text.exec(src);
                if (cap) {
                    let text;
                    if (this.lexer.state.inRawBlock) {
                        text = cap[0];
                    } else {
                        text = escape$1(cap[0]);
                    }
                    return {
                        type: 'text',
                        raw: cap[0],
                        text
                    };
                }
            }
        }
        /**
	 * Block-Level Grammar
	 */ const newline = /^(?: *(?:\n|$))+/;
        const blockCode = /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/;
        const fences = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/;
        const hr = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/;
        const heading = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/;
        const bullet = /(?:[*+-]|\d{1,9}[.)])/;
        const lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html))+?)\n {0,3}(=+|-+) *(?:\n+|$)/).replace(/bull/g, bullet) // lists can interrupt
        .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt
        .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt
        .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt
        .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt
        .replace(/html/g, / {0,3}<[^\n>]+>\n/) // block html can interrupt
        .getRegex();
        const _paragraph = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/;
        const blockText = /^[^\n]+/;
        const _blockLabel = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
        const def = edit(/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/).replace('label', _blockLabel).replace('title', /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex();
        const list = edit(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g, bullet).getRegex();
        const _tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title' + '|tr|track|ul';
        const _comment = /<!--(?:-?>|[\s\S]*?(?:-->|$))/;
        const html = edit('^ {0,3}(?:' // optional indentation
         + '<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
         + '|comment[^\\n]*(\\n+|$)' // (2)
         + '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)' // (3)
         + '|<![A-Z][\\s\\S]*?(?:>\\n*|$)' // (4)
         + '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)' // (5)
         + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (6)
         + '|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) open tag
         + '|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) closing tag
         + ')', 'i').replace('comment', _comment).replace('tag', _tag).replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
        const paragraph = edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs
        .replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
        .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks
        .getRegex();
        const blockquote = edit(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace('paragraph', paragraph).getRegex();
        /**
	 * Normal Block Grammar
	 */ const blockNormal = {
            blockquote,
            code: blockCode,
            def,
            fences,
            heading,
            hr,
            html,
            lheading,
            list,
            newline,
            paragraph,
            table: noopTest,
            text: blockText
        };
        /**
	 * GFM Block Grammar
	 */ const gfmTable = edit('^ *([^\\n ].*)\\n' // Header
         + ' {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)' // Align
         + '(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)') // Cells
        .replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\s|$)').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
        .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // tables can be interrupted by type (6) html blocks
        .getRegex();
        const blockGfm = {
            ...blockNormal,
            table: gfmTable,
            paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs
            .replace('table', gfmTable) // interrupt paragraphs with table
            .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
            .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks
            .getRegex()
        };
        /**
	 * Pedantic grammar (original John Gruber's loose markdown specification)
	 */ const blockPedantic = {
            ...blockNormal,
            html: edit('^ *(?:comment *(?:\\n|\\s*$)' + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
             + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))').replace('comment', _comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b').getRegex(),
            def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
            heading: /^(#{1,6})(.*)(?:\n+|$)/,
            fences: noopTest,
            lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
            paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' *#{1,6} *[^\n]').replace('lheading', lheading).replace('|table', '').replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').replace('|tag', '').getRegex()
        };
        /**
	 * Inline-Level Grammar
	 */ const escape = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/;
        const inlineCode = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/;
        const br = /^( {2,}|\\)\n(?!\s*$)/;
        const inlineText = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/;
        // list of unicode punctuation marks, plus any missing characters from CommonMark spec
        const _punctuation = '\\p{P}\\p{S}';
        const punctuation = edit(/^((?![*_])[\spunctuation])/, 'u').replace(/punctuation/g, _punctuation).getRegex();
        // sequences em should skip over [title](link), `code`, <html>
        const blockSkip = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g;
        const emStrongLDelim = edit(/^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/, 'u').replace(/punct/g, _punctuation).getRegex();
        const emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)' // Skip orphan inside strong
         + '|[^*]+(?=[^*])' // Consume to delim
         + '|(?!\\*)[punct](\\*+)(?=[\\s]|$)' // (1) #*** can only be a Right Delimiter
         + '|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter
         + '|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])' // (3) #***a, ***a can only be Left Delimiter
         + '|[\\s](\\*+)(?!\\*)(?=[punct])' // (4) ***# can only be Left Delimiter
         + '|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter
         + '|[^punct\\s](\\*+)(?=[^punct\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter
        .replace(/punct/g, _punctuation).getRegex();
        // (6) Not allowed for _
        const emStrongRDelimUnd = edit('^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)' // Skip orphan inside strong
         + '|[^_]+(?=[^_])' // Consume to delim
         + '|(?!_)[punct](_+)(?=[\\s]|$)' // (1) #___ can only be a Right Delimiter
         + '|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter
         + '|(?!_)[punct\\s](_+)(?=[^punct\\s])' // (3) #___a, ___a can only be Left Delimiter
         + '|[\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter
         + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter
        .replace(/punct/g, _punctuation).getRegex();
        const anyPunctuation = edit(/\\([punct])/, 'gu').replace(/punct/g, _punctuation).getRegex();
        const autolink = edit(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();
        const _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();
        const tag = edit('^comment' + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
         + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
         + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
         + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
         + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>') // CDATA section
        .replace('comment', _inlineComment).replace('attribute', /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex();
        const _inlineLabel = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
        const link = edit(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/).replace('label', _inlineLabel).replace('href', /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/).replace('title', /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex();
        const reflink = edit(/^!?\[(label)\]\[(ref)\]/).replace('label', _inlineLabel).replace('ref', _blockLabel).getRegex();
        const nolink = edit(/^!?\[(ref)\](?:\[\])?/).replace('ref', _blockLabel).getRegex();
        const reflinkSearch = edit('reflink|nolink(?!\\()', 'g').replace('reflink', reflink).replace('nolink', nolink).getRegex();
        /**
	 * Normal Inline Grammar
	 */ const inlineNormal = {
            _backpedal: noopTest,
            anyPunctuation,
            autolink,
            blockSkip,
            br,
            code: inlineCode,
            del: noopTest,
            emStrongLDelim,
            emStrongRDelimAst,
            emStrongRDelimUnd,
            escape,
            link,
            nolink,
            punctuation,
            reflink,
            reflinkSearch,
            tag,
            text: inlineText,
            url: noopTest
        };
        /**
	 * Pedantic Inline Grammar
	 */ const inlinePedantic = {
            ...inlineNormal,
            link: edit(/^!?\[(label)\]\((.*?)\)/).replace('label', _inlineLabel).getRegex(),
            reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace('label', _inlineLabel).getRegex()
        };
        /**
	 * GFM Inline Grammar
	 */ const inlineGfm = {
            ...inlineNormal,
            escape: edit(escape).replace('])', '~|])').getRegex(),
            url: edit(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/, 'i').replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),
            _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
            del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
            text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
        };
        /**
	 * GFM + Line Breaks Inline Grammar
	 */ const inlineBreaks = {
            ...inlineGfm,
            br: edit(br).replace('{2,}', '*').getRegex(),
            text: edit(inlineGfm.text).replace('\\b_', '\\b_| {2,}\\n').replace(/\{2,\}/g, '*').getRegex()
        };
        /**
	 * exports
	 */ const block = {
            normal: blockNormal,
            gfm: blockGfm,
            pedantic: blockPedantic
        };
        const inline = {
            normal: inlineNormal,
            gfm: inlineGfm,
            breaks: inlineBreaks,
            pedantic: inlinePedantic
        };
        /**
	 * Block Lexer
	 */ class _Lexer {
            tokens;
            options;
            state;
            tokenizer;
            inlineQueue;
            constructor(options){
                // TokenList cannot be created in one go
                this.tokens = [];
                this.tokens.links = Object.create(null);
                this.options = options || exports1.defaults;
                this.options.tokenizer = this.options.tokenizer || new _Tokenizer();
                this.tokenizer = this.options.tokenizer;
                this.tokenizer.options = this.options;
                this.tokenizer.lexer = this;
                this.inlineQueue = [];
                this.state = {
                    inLink: false,
                    inRawBlock: false,
                    top: true
                };
                const rules = {
                    block: block.normal,
                    inline: inline.normal
                };
                if (this.options.pedantic) {
                    rules.block = block.pedantic;
                    rules.inline = inline.pedantic;
                } else if (this.options.gfm) {
                    rules.block = block.gfm;
                    if (this.options.breaks) {
                        rules.inline = inline.breaks;
                    } else {
                        rules.inline = inline.gfm;
                    }
                }
                this.tokenizer.rules = rules;
            }
            /**
		 * Expose Rules
		 */ static get rules() {
                return {
                    block,
                    inline
                };
            }
            /**
		 * Static Lex Method
		 */ static lex(src, options) {
                const lexer = new _Lexer(options);
                return lexer.lex(src);
            }
            /**
		 * Static Lex Inline Method
		 */ static lexInline(src, options) {
                const lexer = new _Lexer(options);
                return lexer.inlineTokens(src);
            }
            /**
		 * Preprocessing
		 */ lex(src) {
                src = src.replace(/\r\n|\r/g, '\n');
                this.blockTokens(src, this.tokens);
                for(let i = 0; i < this.inlineQueue.length; i++){
                    const next = this.inlineQueue[i];
                    this.inlineTokens(next.src, next.tokens);
                }
                this.inlineQueue = [];
                return this.tokens;
            }
            blockTokens(src, tokens = [], lastParagraphClipped = false) {
                if (this.options.pedantic) {
                    src = src.replace(/\t/g, '    ').replace(/^ +$/gm, '');
                } else {
                    src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs)=>{
                        return leading + '    '.repeat(tabs.length);
                    });
                }
                let token;
                let lastToken;
                let cutSrc;
                while(src){
                    if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer)=>{
                        if (token = extTokenizer.call({
                            lexer: this
                        }, src, tokens)) {
                            src = src.substring(token.raw.length);
                            tokens.push(token);
                            return true;
                        }
                        return false;
                    })) {
                        continue;
                    }
                    // newline
                    if (token = this.tokenizer.space(src)) {
                        src = src.substring(token.raw.length);
                        if (token.raw.length === 1 && tokens.length > 0) {
                            // if there's a single \n as a spacer, it's terminating the last line,
                            // so move it there so that we don't get unnecessary paragraph tags
                            tokens[tokens.length - 1].raw += '\n';
                        } else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    // code
                    if (token = this.tokenizer.code(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        // An indented code block cannot interrupt a paragraph.
                        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.text;
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    // fences
                    if (token = this.tokenizer.fences(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // heading
                    if (token = this.tokenizer.heading(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // hr
                    if (token = this.tokenizer.hr(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // blockquote
                    if (token = this.tokenizer.blockquote(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // list
                    if (token = this.tokenizer.list(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // html
                    if (token = this.tokenizer.html(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // def
                    if (token = this.tokenizer.def(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.raw;
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else if (!this.tokens.links[token.tag]) {
                            this.tokens.links[token.tag] = {
                                href: token.href,
                                title: token.title
                            };
                        }
                        continue;
                    }
                    // table (gfm)
                    if (token = this.tokenizer.table(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // lheading
                    if (token = this.tokenizer.lheading(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // top-level paragraph
                    // prevent paragraph consuming extensions by clipping 'src' to extension start
                    cutSrc = src;
                    if (this.options.extensions && this.options.extensions.startBlock) {
                        let startIndex = Infinity;
                        const tempSrc = src.slice(1);
                        let tempStart;
                        this.options.extensions.startBlock.forEach((getStartIndex)=>{
                            tempStart = getStartIndex.call({
                                lexer: this
                            }, tempSrc);
                            if (typeof tempStart === 'number' && tempStart >= 0) {
                                startIndex = Math.min(startIndex, tempStart);
                            }
                        });
                        if (startIndex < Infinity && startIndex >= 0) {
                            cutSrc = src.substring(0, startIndex + 1);
                        }
                    }
                    if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
                        lastToken = tokens[tokens.length - 1];
                        if (lastParagraphClipped && lastToken?.type === 'paragraph') {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.text;
                            this.inlineQueue.pop();
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else {
                            tokens.push(token);
                        }
                        lastParagraphClipped = cutSrc.length !== src.length;
                        src = src.substring(token.raw.length);
                        continue;
                    }
                    // text
                    if (token = this.tokenizer.text(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && lastToken.type === 'text') {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.text;
                            this.inlineQueue.pop();
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        } else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    if (src) {
                        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
                        if (this.options.silent) {
                            console.error(errMsg);
                            break;
                        } else {
                            throw new Error(errMsg);
                        }
                    }
                }
                this.state.top = true;
                return tokens;
            }
            inline(src, tokens = []) {
                this.inlineQueue.push({
                    src,
                    tokens
                });
                return tokens;
            }
            /**
		 * Lexing/Compiling
		 */ inlineTokens(src, tokens = []) {
                let token, lastToken, cutSrc;
                // String with links masked to avoid interference with em and strong
                let maskedSrc = src;
                let match;
                let keepPrevChar, prevChar;
                // Mask out reflinks
                if (this.tokens.links) {
                    const links = Object.keys(this.tokens.links);
                    if (links.length > 0) {
                        while((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null){
                            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {
                                maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
                            }
                        }
                    }
                }
                // Mask out other blocks
                while((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null){
                    maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
                }
                // Mask out escaped characters
                while((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null){
                    maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
                }
                while(src){
                    if (!keepPrevChar) {
                        prevChar = '';
                    }
                    keepPrevChar = false;
                    // extensions
                    if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer)=>{
                        if (token = extTokenizer.call({
                            lexer: this
                        }, src, tokens)) {
                            src = src.substring(token.raw.length);
                            tokens.push(token);
                            return true;
                        }
                        return false;
                    })) {
                        continue;
                    }
                    // escape
                    if (token = this.tokenizer.escape(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // tag
                    if (token = this.tokenizer.tag(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        } else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    // link
                    if (token = this.tokenizer.link(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // reflink, nolink
                    if (token = this.tokenizer.reflink(src, this.tokens.links)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        } else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    // em & strong
                    if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // code
                    if (token = this.tokenizer.codespan(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // br
                    if (token = this.tokenizer.br(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // del (gfm)
                    if (token = this.tokenizer.del(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // autolink
                    if (token = this.tokenizer.autolink(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // url (gfm)
                    if (!this.state.inLink && (token = this.tokenizer.url(src))) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // text
                    // prevent inlineText consuming extensions by clipping 'src' to extension start
                    cutSrc = src;
                    if (this.options.extensions && this.options.extensions.startInline) {
                        let startIndex = Infinity;
                        const tempSrc = src.slice(1);
                        let tempStart;
                        this.options.extensions.startInline.forEach((getStartIndex)=>{
                            tempStart = getStartIndex.call({
                                lexer: this
                            }, tempSrc);
                            if (typeof tempStart === 'number' && tempStart >= 0) {
                                startIndex = Math.min(startIndex, tempStart);
                            }
                        });
                        if (startIndex < Infinity && startIndex >= 0) {
                            cutSrc = src.substring(0, startIndex + 1);
                        }
                    }
                    if (token = this.tokenizer.inlineText(cutSrc)) {
                        src = src.substring(token.raw.length);
                        if (token.raw.slice(-1) !== '_') {
                            prevChar = token.raw.slice(-1);
                        }
                        keepPrevChar = true;
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && lastToken.type === 'text') {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        } else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    if (src) {
                        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
                        if (this.options.silent) {
                            console.error(errMsg);
                            break;
                        } else {
                            throw new Error(errMsg);
                        }
                    }
                }
                return tokens;
            }
        }
        /**
	 * Renderer
	 */ class _Renderer {
            options;
            parser;
            constructor(options){
                this.options = options || exports1.defaults;
            }
            space(token) {
                return '';
            }
            code({ text, lang, escaped }) {
                const langString = (lang || '').match(/^\S*/)?.[0];
                const code = text.replace(/\n$/, '') + '\n';
                if (!langString) {
                    return '<pre><code>' + (escaped ? code : escape$1(code, true)) + '</code></pre>\n';
                }
                return '<pre><code class="language-' + escape$1(langString) + '">' + (escaped ? code : escape$1(code, true)) + '</code></pre>\n';
            }
            blockquote({ tokens }) {
                const body = this.parser.parse(tokens);
                return `<blockquote>\n${body}</blockquote>\n`;
            }
            html({ text }) {
                return text;
            }
            heading({ tokens, depth }) {
                return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\n`;
            }
            hr(token) {
                return '<hr>\n';
            }
            list(token) {
                const ordered = token.ordered;
                const start = token.start;
                let body = '';
                for(let j = 0; j < token.items.length; j++){
                    const item = token.items[j];
                    body += this.listitem(item);
                }
                const type = ordered ? 'ol' : 'ul';
                const startAttr = ordered && start !== 1 ? ' start="' + start + '"' : '';
                return '<' + type + startAttr + '>\n' + body + '</' + type + '>\n';
            }
            listitem(item) {
                let itemBody = '';
                if (item.task) {
                    const checkbox = this.checkbox({
                        checked: !!item.checked
                    });
                    if (item.loose) {
                        if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {
                            item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;
                            if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
                                item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
                            }
                        } else {
                            item.tokens.unshift({
                                type: 'text',
                                raw: checkbox + ' ',
                                text: checkbox + ' '
                            });
                        }
                    } else {
                        itemBody += checkbox + ' ';
                    }
                }
                itemBody += this.parser.parse(item.tokens, !!item.loose);
                return `<li>${itemBody}</li>\n`;
            }
            checkbox({ checked }) {
                return '<input ' + (checked ? 'checked="" ' : '') + 'disabled="" type="checkbox">';
            }
            paragraph({ tokens }) {
                return `<p>${this.parser.parseInline(tokens)}</p>\n`;
            }
            table(token) {
                let header = '';
                // header
                let cell = '';
                for(let j = 0; j < token.header.length; j++){
                    cell += this.tablecell(token.header[j]);
                }
                header += this.tablerow({
                    text: cell
                });
                let body = '';
                for(let j = 0; j < token.rows.length; j++){
                    const row = token.rows[j];
                    cell = '';
                    for(let k = 0; k < row.length; k++){
                        cell += this.tablecell(row[k]);
                    }
                    body += this.tablerow({
                        text: cell
                    });
                }
                if (body) body = `<tbody>${body}</tbody>`;
                return '<table>\n' + '<thead>\n' + header + '</thead>\n' + body + '</table>\n';
            }
            tablerow({ text }) {
                return `<tr>\n${text}</tr>\n`;
            }
            tablecell(token) {
                const content = this.parser.parseInline(token.tokens);
                const type = token.header ? 'th' : 'td';
                const tag = token.align ? `<${type} align="${token.align}">` : `<${type}>`;
                return tag + content + `</${type}>\n`;
            }
            /**
		 * span level renderer
		 */ strong({ tokens }) {
                return `<strong>${this.parser.parseInline(tokens)}</strong>`;
            }
            em({ tokens }) {
                return `<em>${this.parser.parseInline(tokens)}</em>`;
            }
            codespan({ text }) {
                return `<code>${text}</code>`;
            }
            br(token) {
                return '<br>';
            }
            del({ tokens }) {
                return `<del>${this.parser.parseInline(tokens)}</del>`;
            }
            link({ href, title, tokens }) {
                const text = this.parser.parseInline(tokens);
                const cleanHref = cleanUrl(href);
                if (cleanHref === null) {
                    return text;
                }
                href = cleanHref;
                let out = '<a href="' + href + '"';
                if (title) {
                    out += ' title="' + title + '"';
                }
                out += '>' + text + '</a>';
                return out;
            }
            image({ href, title, text }) {
                const cleanHref = cleanUrl(href);
                if (cleanHref === null) {
                    return text;
                }
                href = cleanHref;
                let out = `<img src="${href}" alt="${text}"`;
                if (title) {
                    out += ` title="${title}"`;
                }
                out += '>';
                return out;
            }
            text(token) {
                return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;
            }
        }
        /**
	 * TextRenderer
	 * returns only the textual part of the token
	 */ class _TextRenderer {
            // no need for block level renderers
            strong({ text }) {
                return text;
            }
            em({ text }) {
                return text;
            }
            codespan({ text }) {
                return text;
            }
            del({ text }) {
                return text;
            }
            html({ text }) {
                return text;
            }
            text({ text }) {
                return text;
            }
            link({ text }) {
                return '' + text;
            }
            image({ text }) {
                return '' + text;
            }
            br() {
                return '';
            }
        }
        /**
	 * Parsing & Compiling
	 */ class _Parser {
            options;
            renderer;
            textRenderer;
            constructor(options){
                this.options = options || exports1.defaults;
                this.options.renderer = this.options.renderer || new _Renderer();
                this.renderer = this.options.renderer;
                this.renderer.options = this.options;
                this.renderer.parser = this;
                this.textRenderer = new _TextRenderer();
            }
            /**
		 * Static Parse Method
		 */ static parse(tokens, options) {
                const parser = new _Parser(options);
                return parser.parse(tokens);
            }
            /**
		 * Static Parse Inline Method
		 */ static parseInline(tokens, options) {
                const parser = new _Parser(options);
                return parser.parseInline(tokens);
            }
            /**
		 * Parse Loop
		 */ parse(tokens, top = true) {
                let out = '';
                for(let i = 0; i < tokens.length; i++){
                    const anyToken = tokens[i];
                    // Run any renderer extensions
                    if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {
                        const genericToken = anyToken;
                        const ret = this.options.extensions.renderers[genericToken.type].call({
                            parser: this
                        }, genericToken);
                        if (ret !== false || ![
                            'space',
                            'hr',
                            'heading',
                            'code',
                            'table',
                            'blockquote',
                            'list',
                            'html',
                            'paragraph',
                            'text'
                        ].includes(genericToken.type)) {
                            out += ret || '';
                            continue;
                        }
                    }
                    const token = anyToken;
                    switch(token.type){
                        case 'space':
                            {
                                out += this.renderer.space(token);
                                continue;
                            }
                        case 'hr':
                            {
                                out += this.renderer.hr(token);
                                continue;
                            }
                        case 'heading':
                            {
                                out += this.renderer.heading(token);
                                continue;
                            }
                        case 'code':
                            {
                                out += this.renderer.code(token);
                                continue;
                            }
                        case 'table':
                            {
                                out += this.renderer.table(token);
                                continue;
                            }
                        case 'blockquote':
                            {
                                out += this.renderer.blockquote(token);
                                continue;
                            }
                        case 'list':
                            {
                                out += this.renderer.list(token);
                                continue;
                            }
                        case 'html':
                            {
                                out += this.renderer.html(token);
                                continue;
                            }
                        case 'paragraph':
                            {
                                out += this.renderer.paragraph(token);
                                continue;
                            }
                        case 'text':
                            {
                                let textToken = token;
                                let body = this.renderer.text(textToken);
                                while(i + 1 < tokens.length && tokens[i + 1].type === 'text'){
                                    textToken = tokens[++i];
                                    body += '\n' + this.renderer.text(textToken);
                                }
                                if (top) {
                                    out += this.renderer.paragraph({
                                        type: 'paragraph',
                                        raw: body,
                                        text: body,
                                        tokens: [
                                            {
                                                type: 'text',
                                                raw: body,
                                                text: body
                                            }
                                        ]
                                    });
                                } else {
                                    out += body;
                                }
                                continue;
                            }
                        default:
                            {
                                const errMsg = 'Token with "' + token.type + '" type was not found.';
                                if (this.options.silent) {
                                    console.error(errMsg);
                                    return '';
                                } else {
                                    throw new Error(errMsg);
                                }
                            }
                    }
                }
                return out;
            }
            /**
		 * Parse Inline Tokens
		 */ parseInline(tokens, renderer) {
                renderer = renderer || this.renderer;
                let out = '';
                for(let i = 0; i < tokens.length; i++){
                    const anyToken = tokens[i];
                    // Run any renderer extensions
                    if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {
                        const ret = this.options.extensions.renderers[anyToken.type].call({
                            parser: this
                        }, anyToken);
                        if (ret !== false || ![
                            'escape',
                            'html',
                            'link',
                            'image',
                            'strong',
                            'em',
                            'codespan',
                            'br',
                            'del',
                            'text'
                        ].includes(anyToken.type)) {
                            out += ret || '';
                            continue;
                        }
                    }
                    const token = anyToken;
                    switch(token.type){
                        case 'escape':
                            {
                                out += renderer.text(token);
                                break;
                            }
                        case 'html':
                            {
                                out += renderer.html(token);
                                break;
                            }
                        case 'link':
                            {
                                out += renderer.link(token);
                                break;
                            }
                        case 'image':
                            {
                                out += renderer.image(token);
                                break;
                            }
                        case 'strong':
                            {
                                out += renderer.strong(token);
                                break;
                            }
                        case 'em':
                            {
                                out += renderer.em(token);
                                break;
                            }
                        case 'codespan':
                            {
                                out += renderer.codespan(token);
                                break;
                            }
                        case 'br':
                            {
                                out += renderer.br(token);
                                break;
                            }
                        case 'del':
                            {
                                out += renderer.del(token);
                                break;
                            }
                        case 'text':
                            {
                                out += renderer.text(token);
                                break;
                            }
                        default:
                            {
                                const errMsg = 'Token with "' + token.type + '" type was not found.';
                                if (this.options.silent) {
                                    console.error(errMsg);
                                    return '';
                                } else {
                                    throw new Error(errMsg);
                                }
                            }
                    }
                }
                return out;
            }
        }
        class _Hooks {
            options;
            constructor(options){
                this.options = options || exports1.defaults;
            }
            static passThroughHooks = new Set([
                'preprocess',
                'postprocess',
                'processAllTokens'
            ]);
            /**
		 * Process markdown before marked
		 */ preprocess(markdown) {
                return markdown;
            }
            /**
		 * Process HTML after marked is finished
		 */ postprocess(html) {
                return html;
            }
            /**
		 * Process all tokens before walk tokens
		 */ processAllTokens(tokens) {
                return tokens;
            }
        }
        class Marked {
            defaults = _getDefaults();
            options = this.setOptions;
            parse = this.parseMarkdown(_Lexer.lex, _Parser.parse);
            parseInline = this.parseMarkdown(_Lexer.lexInline, _Parser.parseInline);
            Parser = _Parser;
            Renderer = _Renderer;
            TextRenderer = _TextRenderer;
            Lexer = _Lexer;
            Tokenizer = _Tokenizer;
            Hooks = _Hooks;
            constructor(...args){
                this.use(...args);
            }
            /**
		 * Run callback for every token
		 */ walkTokens(tokens, callback) {
                let values = [];
                for (const token of tokens){
                    values = values.concat(callback.call(this, token));
                    switch(token.type){
                        case 'table':
                            {
                                const tableToken = token;
                                for (const cell of tableToken.header){
                                    values = values.concat(this.walkTokens(cell.tokens, callback));
                                }
                                for (const row of tableToken.rows){
                                    for (const cell of row){
                                        values = values.concat(this.walkTokens(cell.tokens, callback));
                                    }
                                }
                                break;
                            }
                        case 'list':
                            {
                                const listToken = token;
                                values = values.concat(this.walkTokens(listToken.items, callback));
                                break;
                            }
                        default:
                            {
                                const genericToken = token;
                                if (this.defaults.extensions?.childTokens?.[genericToken.type]) {
                                    this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens)=>{
                                        const tokens = genericToken[childTokens].flat(Infinity);
                                        values = values.concat(this.walkTokens(tokens, callback));
                                    });
                                } else if (genericToken.tokens) {
                                    values = values.concat(this.walkTokens(genericToken.tokens, callback));
                                }
                            }
                    }
                }
                return values;
            }
            use(...args) {
                const extensions = this.defaults.extensions || {
                    renderers: {},
                    childTokens: {}
                };
                args.forEach((pack)=>{
                    // copy options to new object
                    const opts = {
                        ...pack
                    };
                    // set async to true if it was set to true before
                    opts.async = this.defaults.async || opts.async || false;
                    // ==-- Parse "addon" extensions --== //
                    if (pack.extensions) {
                        pack.extensions.forEach((ext)=>{
                            if (!ext.name) {
                                throw new Error('extension name required');
                            }
                            if ('renderer' in ext) {
                                const prevRenderer = extensions.renderers[ext.name];
                                if (prevRenderer) {
                                    // Replace extension with func to run new extension but fall back if false
                                    extensions.renderers[ext.name] = function(...args) {
                                        let ret = ext.renderer.apply(this, args);
                                        if (ret === false) {
                                            ret = prevRenderer.apply(this, args);
                                        }
                                        return ret;
                                    };
                                } else {
                                    extensions.renderers[ext.name] = ext.renderer;
                                }
                            }
                            if ('tokenizer' in ext) {
                                if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {
                                    throw new Error("extension level must be 'block' or 'inline'");
                                }
                                const extLevel = extensions[ext.level];
                                if (extLevel) {
                                    extLevel.unshift(ext.tokenizer);
                                } else {
                                    extensions[ext.level] = [
                                        ext.tokenizer
                                    ];
                                }
                                if (ext.start) {
                                    if (ext.level === 'block') {
                                        if (extensions.startBlock) {
                                            extensions.startBlock.push(ext.start);
                                        } else {
                                            extensions.startBlock = [
                                                ext.start
                                            ];
                                        }
                                    } else if (ext.level === 'inline') {
                                        if (extensions.startInline) {
                                            extensions.startInline.push(ext.start);
                                        } else {
                                            extensions.startInline = [
                                                ext.start
                                            ];
                                        }
                                    }
                                }
                            }
                            if ('childTokens' in ext && ext.childTokens) {
                                extensions.childTokens[ext.name] = ext.childTokens;
                            }
                        });
                        opts.extensions = extensions;
                    }
                    // ==-- Parse "overwrite" extensions --== //
                    if (pack.renderer) {
                        const renderer = this.defaults.renderer || new _Renderer(this.defaults);
                        for(const prop in pack.renderer){
                            if (!(prop in renderer)) {
                                throw new Error(`renderer '${prop}' does not exist`);
                            }
                            if ([
                                'options',
                                'parser'
                            ].includes(prop)) {
                                continue;
                            }
                            const rendererProp = prop;
                            const rendererFunc = pack.renderer[rendererProp];
                            const prevRenderer = renderer[rendererProp];
                            // Replace renderer with func to run extension, but fall back if false
                            renderer[rendererProp] = (...args)=>{
                                let ret = rendererFunc.apply(renderer, args);
                                if (ret === false) {
                                    ret = prevRenderer.apply(renderer, args);
                                }
                                return ret || '';
                            };
                        }
                        opts.renderer = renderer;
                    }
                    if (pack.tokenizer) {
                        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
                        for(const prop in pack.tokenizer){
                            if (!(prop in tokenizer)) {
                                throw new Error(`tokenizer '${prop}' does not exist`);
                            }
                            if ([
                                'options',
                                'rules',
                                'lexer'
                            ].includes(prop)) {
                                continue;
                            }
                            const tokenizerProp = prop;
                            const tokenizerFunc = pack.tokenizer[tokenizerProp];
                            const prevTokenizer = tokenizer[tokenizerProp];
                            // Replace tokenizer with func to run extension, but fall back if false
                            // @ts-expect-error cannot type tokenizer function dynamically
                            tokenizer[tokenizerProp] = (...args)=>{
                                let ret = tokenizerFunc.apply(tokenizer, args);
                                if (ret === false) {
                                    ret = prevTokenizer.apply(tokenizer, args);
                                }
                                return ret;
                            };
                        }
                        opts.tokenizer = tokenizer;
                    }
                    // ==-- Parse Hooks extensions --== //
                    if (pack.hooks) {
                        const hooks = this.defaults.hooks || new _Hooks();
                        for(const prop in pack.hooks){
                            if (!(prop in hooks)) {
                                throw new Error(`hook '${prop}' does not exist`);
                            }
                            if (prop === 'options') {
                                continue;
                            }
                            const hooksProp = prop;
                            const hooksFunc = pack.hooks[hooksProp];
                            const prevHook = hooks[hooksProp];
                            if (_Hooks.passThroughHooks.has(prop)) {
                                // @ts-expect-error cannot type hook function dynamically
                                hooks[hooksProp] = (arg)=>{
                                    if (this.defaults.async) {
                                        return Promise.resolve(hooksFunc.call(hooks, arg)).then((ret)=>{
                                            return prevHook.call(hooks, ret);
                                        });
                                    }
                                    const ret = hooksFunc.call(hooks, arg);
                                    return prevHook.call(hooks, ret);
                                };
                            } else {
                                // @ts-expect-error cannot type hook function dynamically
                                hooks[hooksProp] = (...args)=>{
                                    let ret = hooksFunc.apply(hooks, args);
                                    if (ret === false) {
                                        ret = prevHook.apply(hooks, args);
                                    }
                                    return ret;
                                };
                            }
                        }
                        opts.hooks = hooks;
                    }
                    // ==-- Parse WalkTokens extensions --== //
                    if (pack.walkTokens) {
                        const walkTokens = this.defaults.walkTokens;
                        const packWalktokens = pack.walkTokens;
                        opts.walkTokens = function(token) {
                            let values = [];
                            values.push(packWalktokens.call(this, token));
                            if (walkTokens) {
                                values = values.concat(walkTokens.call(this, token));
                            }
                            return values;
                        };
                    }
                    this.defaults = {
                        ...this.defaults,
                        ...opts
                    };
                });
                return this;
            }
            setOptions(opt) {
                this.defaults = {
                    ...this.defaults,
                    ...opt
                };
                return this;
            }
            lexer(src, options) {
                return _Lexer.lex(src, options ?? this.defaults);
            }
            parser(tokens, options) {
                return _Parser.parse(tokens, options ?? this.defaults);
            }
            parseMarkdown(lexer, parser) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const parse = (src, options)=>{
                    const origOpt = {
                        ...options
                    };
                    const opt = {
                        ...this.defaults,
                        ...origOpt
                    };
                    const throwError = this.onError(!!opt.silent, !!opt.async);
                    // throw error if an extension set async to true but parse was called with async: false
                    if (this.defaults.async === true && origOpt.async === false) {
                        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));
                    }
                    // throw error in case of non string input
                    if (typeof src === 'undefined' || src === null) {
                        return throwError(new Error('marked(): input parameter is undefined or null'));
                    }
                    if (typeof src !== 'string') {
                        return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));
                    }
                    if (opt.hooks) {
                        opt.hooks.options = opt;
                    }
                    if (opt.async) {
                        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src)=>lexer(src, opt)).then((tokens)=>opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then((tokens)=>opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(()=>tokens) : tokens).then((tokens)=>parser(tokens, opt)).then((html)=>opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);
                    }
                    try {
                        if (opt.hooks) {
                            src = opt.hooks.preprocess(src);
                        }
                        let tokens = lexer(src, opt);
                        if (opt.hooks) {
                            tokens = opt.hooks.processAllTokens(tokens);
                        }
                        if (opt.walkTokens) {
                            this.walkTokens(tokens, opt.walkTokens);
                        }
                        let html = parser(tokens, opt);
                        if (opt.hooks) {
                            html = opt.hooks.postprocess(html);
                        }
                        return html;
                    } catch (e) {
                        return throwError(e);
                    }
                };
                return parse;
            }
            onError(silent, async) {
                return (e)=>{
                    e.message += '\nPlease report this to https://github.com/markedjs/marked.';
                    if (silent) {
                        const msg = '<p>An error occurred:</p><pre>' + escape$1(e.message + '', true) + '</pre>';
                        if (async) {
                            return Promise.resolve(msg);
                        }
                        return msg;
                    }
                    if (async) {
                        return Promise.reject(e);
                    }
                    throw e;
                };
            }
        }
        const markedInstance = new Marked();
        function marked(src, opt) {
            return markedInstance.parse(src, opt);
        }
        /**
	 * Sets the default options.
	 *
	 * @param options Hash of options
	 */ marked.options = marked.setOptions = function(options) {
            markedInstance.setOptions(options);
            marked.defaults = markedInstance.defaults;
            changeDefaults(marked.defaults);
            return marked;
        };
        /**
	 * Gets the original marked default options.
	 */ marked.getDefaults = _getDefaults;
        marked.defaults = exports1.defaults;
        /**
	 * Use Extension
	 */ marked.use = function(...args) {
            markedInstance.use(...args);
            marked.defaults = markedInstance.defaults;
            changeDefaults(marked.defaults);
            return marked;
        };
        /**
	 * Run callback for every token
	 */ marked.walkTokens = function(tokens, callback) {
            return markedInstance.walkTokens(tokens, callback);
        };
        /**
	 * Compiles markdown to HTML without enclosing `p` tag.
	 *
	 * @param src String of markdown source to be compiled
	 * @param options Hash of options
	 * @return String of compiled HTML
	 */ marked.parseInline = markedInstance.parseInline;
        /**
	 * Expose
	 */ marked.Parser = _Parser;
        marked.parser = _Parser.parse;
        marked.Renderer = _Renderer;
        marked.TextRenderer = _TextRenderer;
        marked.Lexer = _Lexer;
        marked.lexer = _Lexer.lex;
        marked.Tokenizer = _Tokenizer;
        marked.Hooks = _Hooks;
        marked.parse = marked;
        const options = marked.options;
        const setOptions = marked.setOptions;
        const use = marked.use;
        const walkTokens = marked.walkTokens;
        const parseInline = marked.parseInline;
        const parse = marked;
        const parser = _Parser.parse;
        const lexer = _Lexer.lex;
        exports1.Hooks = _Hooks;
        exports1.Lexer = _Lexer;
        exports1.Marked = Marked;
        exports1.Parser = _Parser;
        exports1.Renderer = _Renderer;
        exports1.TextRenderer = _TextRenderer;
        exports1.Tokenizer = _Tokenizer;
        exports1.getDefaults = _getDefaults;
        exports1.lexer = lexer;
        exports1.marked = marked;
        exports1.options = options;
        exports1.parse = parse;
        exports1.parseInline = parseInline;
        exports1.parser = parser;
        exports1.setOptions = setOptions;
        exports1.use = use;
        exports1.walkTokens = walkTokens;
    });
// ESM-uncomment-begin
})();
var Hooks = __marked_exports.Hooks || exports.Hooks;
var Lexer = __marked_exports.Lexer || exports.Lexer;
var Marked = __marked_exports.Marked || exports.Marked;
var Parser = __marked_exports.Parser || exports.Parser;
var Renderer = __marked_exports.Renderer || exports.Renderer;
var TextRenderer = __marked_exports.TextRenderer || exports.TextRenderer;
var Tokenizer = __marked_exports.Tokenizer || exports.Tokenizer;
var defaults = __marked_exports.defaults || exports.defaults;
var getDefaults = __marked_exports.getDefaults || exports.getDefaults;
var lexer = __marked_exports.lexer || exports.lexer;
var marked = __marked_exports.marked || exports.marked;
var options = __marked_exports.options || exports.options;
var parse = __marked_exports.parse || exports.parse;
var parseInline = __marked_exports.parseInline || exports.parseInline;
var parser = __marked_exports.parser || exports.parser;
var setOptions = __marked_exports.setOptions || exports.setOptions;
var use = __marked_exports.use || exports.use;
var walkTokens = __marked_exports.walkTokens || exports.walkTokens; // ESM-uncomment-end
 //# sourceMappingURL=marked.umd.js.map
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/marshalling.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "parse": (()=>parse),
    "revive": (()=>revive),
    "stringify": (()=>stringify)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/uri.js [app-client] (ecmascript)");
;
;
function stringify(obj) {
    return JSON.stringify(obj, replacer);
}
function parse(text) {
    let data = JSON.parse(text);
    data = revive(data);
    return data;
}
function replacer(key, value) {
    // URI is done via toJSON-member
    if (value instanceof RegExp) {
        return {
            $mid: 2 /* MarshalledId.Regexp */ ,
            source: value.source,
            flags: value.flags
        };
    }
    return value;
}
function revive(obj, depth = 0) {
    if (!obj || depth > 200) {
        return obj;
    }
    if (typeof obj === 'object') {
        switch(obj.$mid){
            case 1 /* MarshalledId.Uri */ :
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uri$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["URI"].revive(obj);
            case 2 /* MarshalledId.Regexp */ :
                return new RegExp(obj.source, obj.flags);
            case 17 /* MarshalledId.Date */ :
                return new Date(obj.source);
        }
        if (obj instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VSBuffer"] || obj instanceof Uint8Array) {
            return obj;
        }
        if (Array.isArray(obj)) {
            for(let i = 0; i < obj.length; ++i){
                obj[i] = revive(obj[i], depth + 1);
            }
        } else {
            // walk object
            for(const key in obj){
                if (Object.hasOwnProperty.call(obj, key)) {
                    obj[key] = revive(obj[key], depth + 1);
                }
            }
        }
    }
    return obj;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/range.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "Range": (()=>Range)
});
var Range;
(function(Range) {
    /**
     * Returns the intersection between two ranges as a range itself.
     * Returns `{ start: 0, end: 0 }` if the intersection is empty.
     */ function intersect(one, other) {
        if (one.start >= other.end || other.start >= one.end) {
            return {
                start: 0,
                end: 0
            };
        }
        const start = Math.max(one.start, other.start);
        const end = Math.min(one.end, other.end);
        if (end - start <= 0) {
            return {
                start: 0,
                end: 0
            };
        }
        return {
            start,
            end
        };
    }
    Range.intersect = intersect;
    function isEmpty(range) {
        return range.end - range.start <= 0;
    }
    Range.isEmpty = isEmpty;
    function intersects(one, other) {
        return !isEmpty(intersect(one, other));
    }
    Range.intersects = intersects;
    function relativeComplement(one, other) {
        const result = [];
        const first = {
            start: one.start,
            end: Math.min(other.start, one.end)
        };
        const second = {
            start: Math.max(other.end, one.start),
            end: one.end
        };
        if (!isEmpty(first)) {
            result.push(first);
        }
        if (!isEmpty(second)) {
            result.push(second);
        }
        return result;
    }
    Range.relativeComplement = relativeComplement;
})(Range || (Range = {}));
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/ime.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "IME": (()=>IME),
    "IMEImpl": (()=>IMEImpl)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/event.js [app-client] (ecmascript)");
;
class IMEImpl {
    constructor(){
        this._onDidChange = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Emitter"]();
        this.onDidChange = this._onDidChange.event;
        this._enabled = true;
    }
    get enabled() {
        return this._enabled;
    }
    /**
     * Enable IME
     */ enable() {
        this._enabled = true;
        this._onDidChange.fire();
    }
    /**
     * Disable IME
     */ disable() {
        this._enabled = false;
        this._onDidChange.fire();
    }
}
const IME = new IMEImpl();
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/keybindingLabels.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "AriaLabelProvider": (()=>AriaLabelProvider),
    "ElectronAcceleratorLabelProvider": (()=>ElectronAcceleratorLabelProvider),
    "ModifierLabelProvider": (()=>ModifierLabelProvider),
    "UILabelProvider": (()=>UILabelProvider),
    "UserSettingsLabelProvider": (()=>UserSettingsLabelProvider)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/nls.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/nls.js [app-client] (ecmascript) <locals>");
;
class ModifierLabelProvider {
    constructor(mac, windows, linux = windows){
        this.modifierLabels = [
            null
        ]; // index 0 will never me accessed.
        this.modifierLabels[2 /* OperatingSystem.Macintosh */ ] = mac;
        this.modifierLabels[1 /* OperatingSystem.Windows */ ] = windows;
        this.modifierLabels[3 /* OperatingSystem.Linux */ ] = linux;
    }
    toLabel(OS, chords, keyLabelProvider) {
        if (chords.length === 0) {
            return null;
        }
        const result = [];
        for(let i = 0, len = chords.length; i < len; i++){
            const chord = chords[i];
            const keyLabel = keyLabelProvider(chord);
            if (keyLabel === null) {
                // this keybinding cannot be expressed...
                return null;
            }
            result[i] = _simpleAsString(chord, keyLabel, this.modifierLabels[OS]);
        }
        return result.join(' ');
    }
}
const UILabelProvider = new ModifierLabelProvider({
    ctrlKey: '\u2303',
    shiftKey: '⇧',
    altKey: '⌥',
    metaKey: '⌘',
    separator: ''
}, {
    ctrlKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'ctrlKey',
        comment: [
            'This is the short form for the Control key on the keyboard'
        ]
    }, "Ctrl"),
    shiftKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'shiftKey',
        comment: [
            'This is the short form for the Shift key on the keyboard'
        ]
    }, "Shift"),
    altKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'altKey',
        comment: [
            'This is the short form for the Alt key on the keyboard'
        ]
    }, "Alt"),
    metaKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'windowsKey',
        comment: [
            'This is the short form for the Windows key on the keyboard'
        ]
    }, "Windows"),
    separator: '+'
}, {
    ctrlKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'ctrlKey',
        comment: [
            'This is the short form for the Control key on the keyboard'
        ]
    }, "Ctrl"),
    shiftKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'shiftKey',
        comment: [
            'This is the short form for the Shift key on the keyboard'
        ]
    }, "Shift"),
    altKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'altKey',
        comment: [
            'This is the short form for the Alt key on the keyboard'
        ]
    }, "Alt"),
    metaKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'superKey',
        comment: [
            'This is the short form for the Super key on the keyboard'
        ]
    }, "Super"),
    separator: '+'
});
const AriaLabelProvider = new ModifierLabelProvider({
    ctrlKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'ctrlKey.long',
        comment: [
            'This is the long form for the Control key on the keyboard'
        ]
    }, "Control"),
    shiftKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'shiftKey.long',
        comment: [
            'This is the long form for the Shift key on the keyboard'
        ]
    }, "Shift"),
    altKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'optKey.long',
        comment: [
            'This is the long form for the Alt/Option key on the keyboard'
        ]
    }, "Option"),
    metaKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'cmdKey.long',
        comment: [
            'This is the long form for the Command key on the keyboard'
        ]
    }, "Command"),
    separator: '+'
}, {
    ctrlKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'ctrlKey.long',
        comment: [
            'This is the long form for the Control key on the keyboard'
        ]
    }, "Control"),
    shiftKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'shiftKey.long',
        comment: [
            'This is the long form for the Shift key on the keyboard'
        ]
    }, "Shift"),
    altKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'altKey.long',
        comment: [
            'This is the long form for the Alt key on the keyboard'
        ]
    }, "Alt"),
    metaKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'windowsKey.long',
        comment: [
            'This is the long form for the Windows key on the keyboard'
        ]
    }, "Windows"),
    separator: '+'
}, {
    ctrlKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'ctrlKey.long',
        comment: [
            'This is the long form for the Control key on the keyboard'
        ]
    }, "Control"),
    shiftKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'shiftKey.long',
        comment: [
            'This is the long form for the Shift key on the keyboard'
        ]
    }, "Shift"),
    altKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'altKey.long',
        comment: [
            'This is the long form for the Alt key on the keyboard'
        ]
    }, "Alt"),
    metaKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])({
        key: 'superKey.long',
        comment: [
            'This is the long form for the Super key on the keyboard'
        ]
    }, "Super"),
    separator: '+'
});
const ElectronAcceleratorLabelProvider = new ModifierLabelProvider({
    ctrlKey: 'Ctrl',
    shiftKey: 'Shift',
    altKey: 'Alt',
    metaKey: 'Cmd',
    separator: '+'
}, {
    ctrlKey: 'Ctrl',
    shiftKey: 'Shift',
    altKey: 'Alt',
    metaKey: 'Super',
    separator: '+'
});
const UserSettingsLabelProvider = new ModifierLabelProvider({
    ctrlKey: 'ctrl',
    shiftKey: 'shift',
    altKey: 'alt',
    metaKey: 'cmd',
    separator: '+'
}, {
    ctrlKey: 'ctrl',
    shiftKey: 'shift',
    altKey: 'alt',
    metaKey: 'win',
    separator: '+'
}, {
    ctrlKey: 'ctrl',
    shiftKey: 'shift',
    altKey: 'alt',
    metaKey: 'meta',
    separator: '+'
});
function _simpleAsString(modifiers, key, labels) {
    if (key === null) {
        return '';
    }
    const result = [];
    // translate modifier keys: Ctrl-Shift-Alt-Meta
    if (modifiers.ctrlKey) {
        result.push(labels.ctrlKey);
    }
    if (modifiers.shiftKey) {
        result.push(labels.shiftKey);
    }
    if (modifiers.altKey) {
        result.push(labels.altKey);
    }
    if (modifiers.metaKey) {
        result.push(labels.metaKey);
    }
    // the actual key
    if (key !== '') {
        result.push(key);
    }
    return result.join(labels.separator);
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/ternarySearchTree.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConfigKeysIterator": (()=>ConfigKeysIterator),
    "PathIterator": (()=>PathIterator),
    "StringIterator": (()=>StringIterator),
    "TernarySearchTree": (()=>TernarySearchTree),
    "UriIterator": (()=>UriIterator)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
;
class StringIterator {
    constructor(){
        this._value = '';
        this._pos = 0;
    }
    reset(key) {
        this._value = key;
        this._pos = 0;
        return this;
    }
    next() {
        this._pos += 1;
        return this;
    }
    hasNext() {
        return this._pos < this._value.length - 1;
    }
    cmp(a) {
        const aCode = a.charCodeAt(0);
        const thisCode = this._value.charCodeAt(this._pos);
        return aCode - thisCode;
    }
    value() {
        return this._value[this._pos];
    }
}
class ConfigKeysIterator {
    constructor(_caseSensitive = true){
        this._caseSensitive = _caseSensitive;
    }
    reset(key) {
        this._value = key;
        this._from = 0;
        this._to = 0;
        return this.next();
    }
    hasNext() {
        return this._to < this._value.length;
    }
    next() {
        // this._data = key.split(/[\\/]/).filter(s => !!s);
        this._from = this._to;
        let justSeps = true;
        for(; this._to < this._value.length; this._to++){
            const ch = this._value.charCodeAt(this._to);
            if (ch === 46 /* CharCode.Period */ ) {
                if (justSeps) {
                    this._from++;
                } else {
                    break;
                }
            } else {
                justSeps = false;
            }
        }
        return this;
    }
    cmp(a) {
        return this._caseSensitive ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareSubstring"])(a, this._value, 0, a.length, this._from, this._to) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareSubstringIgnoreCase"])(a, this._value, 0, a.length, this._from, this._to);
    }
    value() {
        return this._value.substring(this._from, this._to);
    }
}
class PathIterator {
    constructor(_splitOnBackslash = true, _caseSensitive = true){
        this._splitOnBackslash = _splitOnBackslash;
        this._caseSensitive = _caseSensitive;
    }
    reset(key) {
        this._from = 0;
        this._to = 0;
        this._value = key;
        this._valueLen = key.length;
        for(let pos = key.length - 1; pos >= 0; pos--, this._valueLen--){
            const ch = this._value.charCodeAt(pos);
            if (!(ch === 47 /* CharCode.Slash */  || this._splitOnBackslash && ch === 92 /* CharCode.Backslash */ )) {
                break;
            }
        }
        return this.next();
    }
    hasNext() {
        return this._to < this._valueLen;
    }
    next() {
        // this._data = key.split(/[\\/]/).filter(s => !!s);
        this._from = this._to;
        let justSeps = true;
        for(; this._to < this._valueLen; this._to++){
            const ch = this._value.charCodeAt(this._to);
            if (ch === 47 /* CharCode.Slash */  || this._splitOnBackslash && ch === 92 /* CharCode.Backslash */ ) {
                if (justSeps) {
                    this._from++;
                } else {
                    break;
                }
            } else {
                justSeps = false;
            }
        }
        return this;
    }
    cmp(a) {
        return this._caseSensitive ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareSubstring"])(a, this._value, 0, a.length, this._from, this._to) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareSubstringIgnoreCase"])(a, this._value, 0, a.length, this._from, this._to);
    }
    value() {
        return this._value.substring(this._from, this._to);
    }
}
class UriIterator {
    constructor(_ignorePathCasing, _ignoreQueryAndFragment){
        this._ignorePathCasing = _ignorePathCasing;
        this._ignoreQueryAndFragment = _ignoreQueryAndFragment;
        this._states = [];
        this._stateIdx = 0;
    }
    reset(key) {
        this._value = key;
        this._states = [];
        if (this._value.scheme) {
            this._states.push(1 /* UriIteratorState.Scheme */ );
        }
        if (this._value.authority) {
            this._states.push(2 /* UriIteratorState.Authority */ );
        }
        if (this._value.path) {
            this._pathIterator = new PathIterator(false, !this._ignorePathCasing(key));
            this._pathIterator.reset(key.path);
            if (this._pathIterator.value()) {
                this._states.push(3 /* UriIteratorState.Path */ );
            }
        }
        if (!this._ignoreQueryAndFragment(key)) {
            if (this._value.query) {
                this._states.push(4 /* UriIteratorState.Query */ );
            }
            if (this._value.fragment) {
                this._states.push(5 /* UriIteratorState.Fragment */ );
            }
        }
        this._stateIdx = 0;
        return this;
    }
    next() {
        if (this._states[this._stateIdx] === 3 /* UriIteratorState.Path */  && this._pathIterator.hasNext()) {
            this._pathIterator.next();
        } else {
            this._stateIdx += 1;
        }
        return this;
    }
    hasNext() {
        return this._states[this._stateIdx] === 3 /* UriIteratorState.Path */  && this._pathIterator.hasNext() || this._stateIdx < this._states.length - 1;
    }
    cmp(a) {
        if (this._states[this._stateIdx] === 1 /* UriIteratorState.Scheme */ ) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareIgnoreCase"])(a, this._value.scheme);
        } else if (this._states[this._stateIdx] === 2 /* UriIteratorState.Authority */ ) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareIgnoreCase"])(a, this._value.authority);
        } else if (this._states[this._stateIdx] === 3 /* UriIteratorState.Path */ ) {
            return this._pathIterator.cmp(a);
        } else if (this._states[this._stateIdx] === 4 /* UriIteratorState.Query */ ) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compare"])(a, this._value.query);
        } else if (this._states[this._stateIdx] === 5 /* UriIteratorState.Fragment */ ) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compare"])(a, this._value.fragment);
        }
        throw new Error();
    }
    value() {
        if (this._states[this._stateIdx] === 1 /* UriIteratorState.Scheme */ ) {
            return this._value.scheme;
        } else if (this._states[this._stateIdx] === 2 /* UriIteratorState.Authority */ ) {
            return this._value.authority;
        } else if (this._states[this._stateIdx] === 3 /* UriIteratorState.Path */ ) {
            return this._pathIterator.value();
        } else if (this._states[this._stateIdx] === 4 /* UriIteratorState.Query */ ) {
            return this._value.query;
        } else if (this._states[this._stateIdx] === 5 /* UriIteratorState.Fragment */ ) {
            return this._value.fragment;
        }
        throw new Error();
    }
}
class TernarySearchTreeNode {
    constructor(){
        this.height = 1;
    }
    rotateLeft() {
        const tmp = this.right;
        this.right = tmp.left;
        tmp.left = this;
        this.updateHeight();
        tmp.updateHeight();
        return tmp;
    }
    rotateRight() {
        const tmp = this.left;
        this.left = tmp.right;
        tmp.right = this;
        this.updateHeight();
        tmp.updateHeight();
        return tmp;
    }
    updateHeight() {
        this.height = 1 + Math.max(this.heightLeft, this.heightRight);
    }
    balanceFactor() {
        return this.heightRight - this.heightLeft;
    }
    get heightLeft() {
        return this.left?.height ?? 0;
    }
    get heightRight() {
        return this.right?.height ?? 0;
    }
}
class TernarySearchTree {
    static forUris(ignorePathCasing = ()=>false, ignoreQueryAndFragment = ()=>false) {
        return new TernarySearchTree(new UriIterator(ignorePathCasing, ignoreQueryAndFragment));
    }
    static forStrings() {
        return new TernarySearchTree(new StringIterator());
    }
    static forConfigKeys() {
        return new TernarySearchTree(new ConfigKeysIterator());
    }
    constructor(segments){
        this._iter = segments;
    }
    clear() {
        this._root = undefined;
    }
    set(key, element) {
        const iter = this._iter.reset(key);
        let node;
        if (!this._root) {
            this._root = new TernarySearchTreeNode();
            this._root.segment = iter.value();
        }
        const stack = [];
        // find insert_node
        node = this._root;
        while(true){
            const val = iter.cmp(node.segment);
            if (val > 0) {
                // left
                if (!node.left) {
                    node.left = new TernarySearchTreeNode();
                    node.left.segment = iter.value();
                }
                stack.push([
                    -1 /* Dir.Left */ ,
                    node
                ]);
                node = node.left;
            } else if (val < 0) {
                // right
                if (!node.right) {
                    node.right = new TernarySearchTreeNode();
                    node.right.segment = iter.value();
                }
                stack.push([
                    1 /* Dir.Right */ ,
                    node
                ]);
                node = node.right;
            } else if (iter.hasNext()) {
                // mid
                iter.next();
                if (!node.mid) {
                    node.mid = new TernarySearchTreeNode();
                    node.mid.segment = iter.value();
                }
                stack.push([
                    0 /* Dir.Mid */ ,
                    node
                ]);
                node = node.mid;
            } else {
                break;
            }
        }
        // set value
        const oldElement = node.value;
        node.value = element;
        node.key = key;
        // balance
        for(let i = stack.length - 1; i >= 0; i--){
            const node = stack[i][1];
            node.updateHeight();
            const bf = node.balanceFactor();
            if (bf < -1 || bf > 1) {
                // needs rotate
                const d1 = stack[i][0];
                const d2 = stack[i + 1][0];
                if (d1 === 1 /* Dir.Right */  && d2 === 1 /* Dir.Right */ ) {
                    //right, right -> rotate left
                    stack[i][1] = node.rotateLeft();
                } else if (d1 === -1 /* Dir.Left */  && d2 === -1 /* Dir.Left */ ) {
                    // left, left -> rotate right
                    stack[i][1] = node.rotateRight();
                } else if (d1 === 1 /* Dir.Right */  && d2 === -1 /* Dir.Left */ ) {
                    // right, left -> double rotate right, left
                    node.right = stack[i + 1][1] = stack[i + 1][1].rotateRight();
                    stack[i][1] = node.rotateLeft();
                } else if (d1 === -1 /* Dir.Left */  && d2 === 1 /* Dir.Right */ ) {
                    // left, right -> double rotate left, right
                    node.left = stack[i + 1][1] = stack[i + 1][1].rotateLeft();
                    stack[i][1] = node.rotateRight();
                } else {
                    throw new Error();
                }
                // patch path to parent
                if (i > 0) {
                    switch(stack[i - 1][0]){
                        case -1 /* Dir.Left */ :
                            stack[i - 1][1].left = stack[i][1];
                            break;
                        case 1 /* Dir.Right */ :
                            stack[i - 1][1].right = stack[i][1];
                            break;
                        case 0 /* Dir.Mid */ :
                            stack[i - 1][1].mid = stack[i][1];
                            break;
                    }
                } else {
                    this._root = stack[0][1];
                }
            }
        }
        return oldElement;
    }
    get(key) {
        return this._getNode(key)?.value;
    }
    _getNode(key) {
        const iter = this._iter.reset(key);
        let node = this._root;
        while(node){
            const val = iter.cmp(node.segment);
            if (val > 0) {
                // left
                node = node.left;
            } else if (val < 0) {
                // right
                node = node.right;
            } else if (iter.hasNext()) {
                // mid
                iter.next();
                node = node.mid;
            } else {
                break;
            }
        }
        return node;
    }
    has(key) {
        const node = this._getNode(key);
        return !(node?.value === undefined && node?.mid === undefined);
    }
    delete(key) {
        return this._delete(key, false);
    }
    deleteSuperstr(key) {
        return this._delete(key, true);
    }
    _delete(key, superStr) {
        const iter = this._iter.reset(key);
        const stack = [];
        let node = this._root;
        // find node
        while(node){
            const val = iter.cmp(node.segment);
            if (val > 0) {
                // left
                stack.push([
                    -1 /* Dir.Left */ ,
                    node
                ]);
                node = node.left;
            } else if (val < 0) {
                // right
                stack.push([
                    1 /* Dir.Right */ ,
                    node
                ]);
                node = node.right;
            } else if (iter.hasNext()) {
                // mid
                iter.next();
                stack.push([
                    0 /* Dir.Mid */ ,
                    node
                ]);
                node = node.mid;
            } else {
                break;
            }
        }
        if (!node) {
            // node not found
            return;
        }
        if (superStr) {
            // removing children, reset height
            node.left = undefined;
            node.mid = undefined;
            node.right = undefined;
            node.height = 1;
        } else {
            // removing element
            node.key = undefined;
            node.value = undefined;
        }
        // BST node removal
        if (!node.mid && !node.value) {
            if (node.left && node.right) {
                // full node
                // replace deleted-node with the min-node of the right branch.
                // If there is no true min-node leave things as they are
                const min = this._min(node.right);
                if (min.key) {
                    const { key, value, segment } = min;
                    this._delete(min.key, false);
                    node.key = key;
                    node.value = value;
                    node.segment = segment;
                }
            } else {
                // empty or half empty
                const newChild = node.left ?? node.right;
                if (stack.length > 0) {
                    const [dir, parent] = stack[stack.length - 1];
                    switch(dir){
                        case -1 /* Dir.Left */ :
                            parent.left = newChild;
                            break;
                        case 0 /* Dir.Mid */ :
                            parent.mid = newChild;
                            break;
                        case 1 /* Dir.Right */ :
                            parent.right = newChild;
                            break;
                    }
                } else {
                    this._root = newChild;
                }
            }
        }
        // AVL balance
        for(let i = stack.length - 1; i >= 0; i--){
            const node = stack[i][1];
            node.updateHeight();
            const bf = node.balanceFactor();
            if (bf > 1) {
                // right heavy
                if (node.right.balanceFactor() >= 0) {
                    // right, right -> rotate left
                    stack[i][1] = node.rotateLeft();
                } else {
                    // right, left -> double rotate
                    node.right = node.right.rotateRight();
                    stack[i][1] = node.rotateLeft();
                }
            } else if (bf < -1) {
                // left heavy
                if (node.left.balanceFactor() <= 0) {
                    // left, left -> rotate right
                    stack[i][1] = node.rotateRight();
                } else {
                    // left, right -> double rotate
                    node.left = node.left.rotateLeft();
                    stack[i][1] = node.rotateRight();
                }
            }
            // patch path to parent
            if (i > 0) {
                switch(stack[i - 1][0]){
                    case -1 /* Dir.Left */ :
                        stack[i - 1][1].left = stack[i][1];
                        break;
                    case 1 /* Dir.Right */ :
                        stack[i - 1][1].right = stack[i][1];
                        break;
                    case 0 /* Dir.Mid */ :
                        stack[i - 1][1].mid = stack[i][1];
                        break;
                }
            } else {
                this._root = stack[0][1];
            }
        }
    }
    _min(node) {
        while(node.left){
            node = node.left;
        }
        return node;
    }
    findSubstr(key) {
        const iter = this._iter.reset(key);
        let node = this._root;
        let candidate = undefined;
        while(node){
            const val = iter.cmp(node.segment);
            if (val > 0) {
                // left
                node = node.left;
            } else if (val < 0) {
                // right
                node = node.right;
            } else if (iter.hasNext()) {
                // mid
                iter.next();
                candidate = node.value || candidate;
                node = node.mid;
            } else {
                break;
            }
        }
        return node && node.value || candidate;
    }
    findSuperstr(key) {
        return this._findSuperstrOrElement(key, false);
    }
    _findSuperstrOrElement(key, allowValue) {
        const iter = this._iter.reset(key);
        let node = this._root;
        while(node){
            const val = iter.cmp(node.segment);
            if (val > 0) {
                // left
                node = node.left;
            } else if (val < 0) {
                // right
                node = node.right;
            } else if (iter.hasNext()) {
                // mid
                iter.next();
                node = node.mid;
            } else {
                // collect
                if (!node.mid) {
                    if (allowValue) {
                        return node.value;
                    } else {
                        return undefined;
                    }
                } else {
                    return this._entries(node.mid);
                }
            }
        }
        return undefined;
    }
    forEach(callback) {
        for (const [key, value] of this){
            callback(value, key);
        }
    }
    *[Symbol.iterator]() {
        yield* this._entries(this._root);
    }
    _entries(node) {
        const result = [];
        this._dfsEntries(node, result);
        return result[Symbol.iterator]();
    }
    _dfsEntries(node, bucket) {
        // DFS
        if (!node) {
            return;
        }
        if (node.left) {
            this._dfsEntries(node.left, bucket);
        }
        if (node.value) {
            bucket.push([
                node.key,
                node.value
            ]);
        }
        if (node.mid) {
            this._dfsEntries(node.mid, bucket);
        }
        if (node.right) {
            this._dfsEntries(node.right, bucket);
        }
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/equals.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "equalsIfDefined": (()=>equalsIfDefined),
    "itemEquals": (()=>itemEquals),
    "itemsEquals": (()=>itemsEquals),
    "strictEquals": (()=>strictEquals),
    "structuralEquals": (()=>structuralEquals)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/arrays.js [app-client] (ecmascript)");
;
const strictEquals = (a, b)=>a === b;
function itemsEquals(itemEquals = strictEquals) {
    return (a, b)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["equals"])(a, b, itemEquals);
}
function itemEquals() {
    return (a, b)=>a.equals(b);
}
function equalsIfDefined(equalsOrV1, v2, equals) {
    if (equals !== undefined) {
        const v1 = equalsOrV1;
        if (v1 === undefined || v1 === null || v2 === undefined || v2 === null) {
            return v2 === v1;
        }
        return equals(v1, v2);
    } else {
        const equals = equalsOrV1;
        return (v1, v2)=>{
            if (v1 === undefined || v1 === null || v2 === undefined || v2 === null) {
                return v2 === v1;
            }
            return equals(v1, v2);
        };
    }
}
function structuralEquals(a, b) {
    if (a === b) {
        return true;
    }
    if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length !== b.length) {
            return false;
        }
        for(let i = 0; i < a.length; i++){
            if (!structuralEquals(a[i], b[i])) {
                return false;
            }
        }
        return true;
    }
    if (a && typeof a === 'object' && b && typeof b === 'object') {
        if (Object.getPrototypeOf(a) === Object.prototype && Object.getPrototypeOf(b) === Object.prototype) {
            const aObj = a;
            const bObj = b;
            const keysA = Object.keys(aObj);
            const keysB = Object.keys(bObj);
            const keysBSet = new Set(keysB);
            if (keysA.length !== keysB.length) {
                return false;
            }
            for (const key of keysA){
                if (!keysBSet.has(key)) {
                    return false;
                }
                if (!structuralEquals(aObj[key], bObj[key])) {
                    return false;
                }
            }
            return true;
        }
    }
    return false;
}
const objIds = new WeakMap();
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/debugName.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "DebugNameData": (()=>DebugNameData),
    "getDebugName": (()=>getDebugName),
    "getFunctionName": (()=>getFunctionName)
});
class DebugNameData {
    constructor(owner, debugNameSource, referenceFn){
        this.owner = owner;
        this.debugNameSource = debugNameSource;
        this.referenceFn = referenceFn;
    }
    getDebugName(target) {
        return getDebugName(target, this);
    }
}
const countPerName = new Map();
const cachedDebugName = new WeakMap();
function getDebugName(target, data) {
    const cached = cachedDebugName.get(target);
    if (cached) {
        return cached;
    }
    const dbgName = computeDebugName(target, data);
    if (dbgName) {
        let count = countPerName.get(dbgName) ?? 0;
        count++;
        countPerName.set(dbgName, count);
        const result = count === 1 ? dbgName : `${dbgName}#${count}`;
        cachedDebugName.set(target, result);
        return result;
    }
    return undefined;
}
function computeDebugName(self, data) {
    const cached = cachedDebugName.get(self);
    if (cached) {
        return cached;
    }
    const ownerStr = data.owner ? formatOwner(data.owner) + `.` : '';
    let result;
    const debugNameSource = data.debugNameSource;
    if (debugNameSource !== undefined) {
        if (typeof debugNameSource === 'function') {
            result = debugNameSource();
            if (result !== undefined) {
                return ownerStr + result;
            }
        } else {
            return ownerStr + debugNameSource;
        }
    }
    const referenceFn = data.referenceFn;
    if (referenceFn !== undefined) {
        result = getFunctionName(referenceFn);
        if (result !== undefined) {
            return ownerStr + result;
        }
    }
    if (data.owner !== undefined) {
        const key = findKey(data.owner, self);
        if (key !== undefined) {
            return ownerStr + key;
        }
    }
    return undefined;
}
function findKey(obj, value) {
    for(const key in obj){
        if (obj[key] === value) {
            return key;
        }
    }
    return undefined;
}
const countPerClassName = new Map();
const ownerId = new WeakMap();
function formatOwner(owner) {
    const id = ownerId.get(owner);
    if (id) {
        return id;
    }
    const className = getClassName(owner);
    let count = countPerClassName.get(className) ?? 0;
    count++;
    countPerClassName.set(className, count);
    const result = count === 1 ? className : `${className}#${count}`;
    ownerId.set(owner, result);
    return result;
}
function getClassName(obj) {
    const ctor = obj.constructor;
    if (ctor) {
        return ctor.name;
    }
    return 'Object';
}
function getFunctionName(fn) {
    const fnSrc = fn.toString();
    // Pattern: /** @description ... */
    const regexp = /\/\*\*\s*@description\s*([^*]*)\*\//;
    const match = regexp.exec(fnSrc);
    const result = match ? match[1] : undefined;
    return result?.trim();
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/logging.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "ConsoleObservableLogger": (()=>ConsoleObservableLogger),
    "getLogger": (()=>getLogger),
    "setLogger": (()=>setLogger)
});
let globalObservableLogger;
function setLogger(logger) {
    globalObservableLogger = logger;
}
function getLogger() {
    return globalObservableLogger;
}
class ConsoleObservableLogger {
    constructor(){
        this.indentation = 0;
        this.changedObservablesSets = new WeakMap();
    }
    textToConsoleArgs(text) {
        return consoleTextToArgs([
            normalText(repeat('|  ', this.indentation)),
            text
        ]);
    }
    formatInfo(info) {
        if (!info.hadValue) {
            return [
                normalText(` `),
                styled(formatValue(info.newValue, 60), {
                    color: 'green'
                }),
                normalText(` (initial)`)
            ];
        }
        return info.didChange ? [
            normalText(` `),
            styled(formatValue(info.oldValue, 70), {
                color: 'red',
                strikeThrough: true
            }),
            normalText(` `),
            styled(formatValue(info.newValue, 60), {
                color: 'green'
            })
        ] : [
            normalText(` (unchanged)`)
        ];
    }
    handleObservableChanged(observable, info) {
        console.log(...this.textToConsoleArgs([
            formatKind('observable value changed'),
            styled(observable.debugName, {
                color: 'BlueViolet'
            }),
            ...this.formatInfo(info)
        ]));
    }
    formatChanges(changes) {
        if (changes.size === 0) {
            return undefined;
        }
        return styled(' (changed deps: ' + [
            ...changes
        ].map((o)=>o.debugName).join(', ') + ')', {
            color: 'gray'
        });
    }
    handleDerivedCreated(derived) {
        const existingHandleChange = derived.handleChange;
        this.changedObservablesSets.set(derived, new Set());
        derived.handleChange = (observable, change)=>{
            this.changedObservablesSets.get(derived).add(observable);
            return existingHandleChange.apply(derived, [
                observable,
                change
            ]);
        };
    }
    handleDerivedRecomputed(derived, info) {
        const changedObservables = this.changedObservablesSets.get(derived);
        console.log(...this.textToConsoleArgs([
            formatKind('derived recomputed'),
            styled(derived.debugName, {
                color: 'BlueViolet'
            }),
            ...this.formatInfo(info),
            this.formatChanges(changedObservables),
            {
                data: [
                    {
                        fn: derived._debugNameData.referenceFn ?? derived._computeFn
                    }
                ]
            }
        ]));
        changedObservables.clear();
    }
    handleFromEventObservableTriggered(observable, info) {
        console.log(...this.textToConsoleArgs([
            formatKind('observable from event triggered'),
            styled(observable.debugName, {
                color: 'BlueViolet'
            }),
            ...this.formatInfo(info),
            {
                data: [
                    {
                        fn: observable._getValue
                    }
                ]
            }
        ]));
    }
    handleAutorunCreated(autorun) {
        const existingHandleChange = autorun.handleChange;
        this.changedObservablesSets.set(autorun, new Set());
        autorun.handleChange = (observable, change)=>{
            this.changedObservablesSets.get(autorun).add(observable);
            return existingHandleChange.apply(autorun, [
                observable,
                change
            ]);
        };
    }
    handleAutorunTriggered(autorun) {
        const changedObservables = this.changedObservablesSets.get(autorun);
        console.log(...this.textToConsoleArgs([
            formatKind('autorun'),
            styled(autorun.debugName, {
                color: 'BlueViolet'
            }),
            this.formatChanges(changedObservables),
            {
                data: [
                    {
                        fn: autorun._debugNameData.referenceFn ?? autorun._runFn
                    }
                ]
            }
        ]));
        changedObservables.clear();
        this.indentation++;
    }
    handleAutorunFinished(autorun) {
        this.indentation--;
    }
    handleBeginTransaction(transaction) {
        let transactionName = transaction.getDebugName();
        if (transactionName === undefined) {
            transactionName = '';
        }
        console.log(...this.textToConsoleArgs([
            formatKind('transaction'),
            styled(transactionName, {
                color: 'BlueViolet'
            }),
            {
                data: [
                    {
                        fn: transaction._fn
                    }
                ]
            }
        ]));
        this.indentation++;
    }
    handleEndTransaction() {
        this.indentation--;
    }
}
function consoleTextToArgs(text) {
    const styles = new Array();
    const data = [];
    let firstArg = '';
    function process(t) {
        if ('length' in t) {
            for (const item of t){
                if (item) {
                    process(item);
                }
            }
        } else if ('text' in t) {
            firstArg += `%c${t.text}`;
            styles.push(t.style);
            if (t.data) {
                data.push(...t.data);
            }
        } else if ('data' in t) {
            data.push(...t.data);
        }
    }
    process(text);
    const result = [
        firstArg,
        ...styles
    ];
    result.push(...data);
    return result;
}
function normalText(text) {
    return styled(text, {
        color: 'black'
    });
}
function formatKind(kind) {
    return styled(padStr(`${kind}: `, 10), {
        color: 'black',
        bold: true
    });
}
function styled(text, options = {
    color: 'black'
}) {
    function objToCss(styleObj) {
        return Object.entries(styleObj).reduce((styleString, [propName, propValue])=>{
            return `${styleString}${propName}:${propValue};`;
        }, '');
    }
    const style = {
        color: options.color
    };
    if (options.strikeThrough) {
        style['text-decoration'] = 'line-through';
    }
    if (options.bold) {
        style['font-weight'] = 'bold';
    }
    return {
        text,
        style: objToCss(style)
    };
}
function formatValue(value, availableLen) {
    switch(typeof value){
        case 'number':
            return '' + value;
        case 'string':
            if (value.length + 2 <= availableLen) {
                return `"${value}"`;
            }
            return `"${value.substr(0, availableLen - 7)}"+...`;
        case 'boolean':
            return value ? 'true' : 'false';
        case 'undefined':
            return 'undefined';
        case 'object':
            if (value === null) {
                return 'null';
            }
            if (Array.isArray(value)) {
                return formatArray(value, availableLen);
            }
            return formatObject(value, availableLen);
        case 'symbol':
            return value.toString();
        case 'function':
            return `[[Function${value.name ? ' ' + value.name : ''}]]`;
        default:
            return '' + value;
    }
}
function formatArray(value, availableLen) {
    let result = '[ ';
    let first = true;
    for (const val of value){
        if (!first) {
            result += ', ';
        }
        if (result.length - 5 > availableLen) {
            result += '...';
            break;
        }
        first = false;
        result += `${formatValue(val, availableLen - result.length)}`;
    }
    result += ' ]';
    return result;
}
function formatObject(value, availableLen) {
    let result = '{ ';
    let first = true;
    for (const [key, val] of Object.entries(value)){
        if (!first) {
            result += ', ';
        }
        if (result.length - 5 > availableLen) {
            result += '...';
            break;
        }
        first = false;
        result += `${key}: ${formatValue(val, availableLen - result.length)}`;
    }
    result += ' }';
    return result;
}
function repeat(str, count) {
    let result = '';
    for(let i = 1; i <= count; i++){
        result += str;
    }
    return result;
}
function padStr(str, length) {
    while(str.length < length){
        str += ' ';
    }
    return str;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/base.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "BaseObservable": (()=>BaseObservable),
    "ConvenientObservable": (()=>ConvenientObservable),
    "DisposableObservableValue": (()=>DisposableObservableValue),
    "ObservableValue": (()=>ObservableValue),
    "TransactionImpl": (()=>TransactionImpl),
    "_setDerivedOpts": (()=>_setDerivedOpts),
    "_setKeepObserved": (()=>_setKeepObserved),
    "_setRecomputeInitiallyAndOnChange": (()=>_setRecomputeInitiallyAndOnChange),
    "asyncTransaction": (()=>asyncTransaction),
    "disposableObservableValue": (()=>disposableObservableValue),
    "globalTransaction": (()=>globalTransaction),
    "observableValue": (()=>observableValue),
    "subtransaction": (()=>subtransaction),
    "transaction": (()=>transaction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/equals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/debugName.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/logging.js [app-client] (ecmascript)");
;
;
;
let _recomputeInitiallyAndOnChange;
function _setRecomputeInitiallyAndOnChange(recomputeInitiallyAndOnChange) {
    _recomputeInitiallyAndOnChange = recomputeInitiallyAndOnChange;
}
let _keepObserved;
function _setKeepObserved(keepObserved) {
    _keepObserved = keepObserved;
}
let _derived;
function _setDerivedOpts(derived) {
    _derived = derived;
}
class ConvenientObservable {
    get TChange() {
        return null;
    }
    reportChanges() {
        this.get();
    }
    /** @sealed */ read(reader) {
        if (reader) {
            return reader.readObservable(this);
        } else {
            return this.get();
        }
    }
    map(fnOrOwner, fnOrUndefined) {
        const owner = fnOrUndefined === undefined ? undefined : fnOrOwner;
        const fn = fnOrUndefined === undefined ? fnOrOwner : fnOrUndefined;
        return _derived({
            owner,
            debugName: ()=>{
                const name = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFunctionName"])(fn);
                if (name !== undefined) {
                    return name;
                }
                // regexp to match `x => x.y` or `x => x?.y` where x and y can be arbitrary identifiers (uses backref):
                const regexp = /^\s*\(?\s*([a-zA-Z_$][a-zA-Z_$0-9]*)\s*\)?\s*=>\s*\1(?:\??)\.([a-zA-Z_$][a-zA-Z_$0-9]*)\s*$/;
                const match = regexp.exec(fn.toString());
                if (match) {
                    return `${this.debugName}.${match[2]}`;
                }
                if (!owner) {
                    return `${this.debugName} (mapped)`;
                }
                return undefined;
            },
            debugReferenceFn: fn
        }, (reader)=>fn(this.read(reader), reader));
    }
    /**
     * @sealed
     * Converts an observable of an observable value into a direct observable of the value.
    */ flatten() {
        return _derived({
            owner: undefined,
            debugName: ()=>`${this.debugName} (flattened)`
        }, (reader)=>this.read(reader).read(reader));
    }
    recomputeInitiallyAndOnChange(store, handleValue) {
        store.add(_recomputeInitiallyAndOnChange(this, handleValue));
        return this;
    }
    /**
     * Ensures that this observable is observed. This keeps the cache alive.
     * However, in case of deriveds, it does not force eager evaluation (only when the value is read/get).
     * Use `recomputeInitiallyAndOnChange` for eager evaluation.
     */ keepObserved(store) {
        store.add(_keepObserved(this));
        return this;
    }
}
class BaseObservable extends ConvenientObservable {
    constructor(){
        super(...arguments);
        this.observers = new Set();
    }
    addObserver(observer) {
        const len = this.observers.size;
        this.observers.add(observer);
        if (len === 0) {
            this.onFirstObserverAdded();
        }
    }
    removeObserver(observer) {
        const deleted = this.observers.delete(observer);
        if (deleted && this.observers.size === 0) {
            this.onLastObserverRemoved();
        }
    }
    onFirstObserverAdded() {}
    onLastObserverRemoved() {}
}
function transaction(fn, getDebugName) {
    const tx = new TransactionImpl(fn, getDebugName);
    try {
        fn(tx);
    } finally{
        tx.finish();
    }
}
let _globalTransaction = undefined;
function globalTransaction(fn) {
    if (_globalTransaction) {
        fn(_globalTransaction);
    } else {
        const tx = new TransactionImpl(fn, undefined);
        _globalTransaction = tx;
        try {
            fn(tx);
        } finally{
            tx.finish(); // During finish, more actions might be added to the transaction.
            // Which is why we only clear the global transaction after finish.
            _globalTransaction = undefined;
        }
    }
}
async function asyncTransaction(fn, getDebugName) {
    const tx = new TransactionImpl(fn, getDebugName);
    try {
        await fn(tx);
    } finally{
        tx.finish();
    }
}
function subtransaction(tx, fn, getDebugName) {
    if (!tx) {
        transaction(fn, getDebugName);
    } else {
        fn(tx);
    }
}
class TransactionImpl {
    constructor(_fn, _getDebugName){
        this._fn = _fn;
        this._getDebugName = _getDebugName;
        this.updatingObservers = [];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLogger"])()?.handleBeginTransaction(this);
    }
    getDebugName() {
        if (this._getDebugName) {
            return this._getDebugName();
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFunctionName"])(this._fn);
    }
    updateObserver(observer, observable) {
        // When this gets called while finish is active, they will still get considered
        this.updatingObservers.push({
            observer,
            observable
        });
        observer.beginUpdate(observable);
    }
    finish() {
        const updatingObservers = this.updatingObservers;
        for(let i = 0; i < updatingObservers.length; i++){
            const { observer, observable } = updatingObservers[i];
            observer.endUpdate(observable);
        }
        // Prevent anyone from updating observers from now on.
        this.updatingObservers = null;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLogger"])()?.handleEndTransaction();
    }
}
function observableValue(nameOrOwner, initialValue) {
    let debugNameData;
    if (typeof nameOrOwner === 'string') {
        debugNameData = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](undefined, nameOrOwner, undefined);
    } else {
        debugNameData = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](nameOrOwner, undefined, undefined);
    }
    return new ObservableValue(debugNameData, initialValue, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
}
class ObservableValue extends BaseObservable {
    get debugName() {
        return this._debugNameData.getDebugName(this) ?? 'ObservableValue';
    }
    constructor(_debugNameData, initialValue, _equalityComparator){
        super();
        this._debugNameData = _debugNameData;
        this._equalityComparator = _equalityComparator;
        this._value = initialValue;
    }
    get() {
        return this._value;
    }
    set(value, tx, change) {
        if (change === undefined && this._equalityComparator(this._value, value)) {
            return;
        }
        let _tx;
        if (!tx) {
            tx = _tx = new TransactionImpl(()=>{}, ()=>`Setting ${this.debugName}`);
        }
        try {
            const oldValue = this._value;
            this._setValue(value);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLogger"])()?.handleObservableChanged(this, {
                oldValue,
                newValue: value,
                change,
                didChange: true,
                hadValue: true
            });
            for (const observer of this.observers){
                tx.updateObserver(observer, this);
                observer.handleChange(this, change);
            }
        } finally{
            if (_tx) {
                _tx.finish();
            }
        }
    }
    toString() {
        return `${this.debugName}: ${this._value}`;
    }
    _setValue(newValue) {
        this._value = newValue;
    }
}
function disposableObservableValue(nameOrOwner, initialValue) {
    let debugNameData;
    if (typeof nameOrOwner === 'string') {
        debugNameData = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](undefined, nameOrOwner, undefined);
    } else {
        debugNameData = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](nameOrOwner, undefined, undefined);
    }
    return new DisposableObservableValue(debugNameData, initialValue, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
}
class DisposableObservableValue extends ObservableValue {
    _setValue(newValue) {
        if (this._value === newValue) {
            return;
        }
        if (this._value) {
            this._value.dispose();
        }
        this._value = newValue;
    }
    dispose() {
        this._value?.dispose();
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/derived.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "Derived": (()=>Derived),
    "DerivedWithSetter": (()=>DerivedWithSetter),
    "derived": (()=>derived),
    "derivedDisposable": (()=>derivedDisposable),
    "derivedHandleChanges": (()=>derivedHandleChanges),
    "derivedOpts": (()=>derivedOpts),
    "derivedWithSetter": (()=>derivedWithSetter),
    "derivedWithStore": (()=>derivedWithStore)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$assert$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/assert.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/equals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lifecycle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/debugName.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/logging.js [app-client] (ecmascript)");
;
;
;
;
;
;
function derived(computeFnOrOwner, computeFn) {
    if (computeFn !== undefined) {
        return new Derived(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](computeFnOrOwner, undefined, computeFn), computeFn, undefined, undefined, undefined, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
    }
    return new Derived(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](undefined, undefined, computeFnOrOwner), computeFnOrOwner, undefined, undefined, undefined, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
}
function derivedWithSetter(owner, computeFn, setter) {
    return new DerivedWithSetter(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](owner, undefined, computeFn), computeFn, undefined, undefined, undefined, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"], setter);
}
function derivedOpts(options, computeFn) {
    return new Derived(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](options.owner, options.debugName, options.debugReferenceFn), computeFn, undefined, undefined, options.onLastObserverRemoved, options.equalsFn ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
}
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_setDerivedOpts"])(derivedOpts);
function derivedHandleChanges(options, computeFn) {
    return new Derived(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](options.owner, options.debugName, undefined), computeFn, options.createEmptyChangeSummary, options.handleChange, undefined, options.equalityComparer ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
}
function derivedWithStore(computeFnOrOwner, computeFnOrUndefined) {
    let computeFn;
    let owner;
    if (computeFnOrUndefined === undefined) {
        computeFn = computeFnOrOwner;
        owner = undefined;
    } else {
        owner = computeFnOrOwner;
        computeFn = computeFnOrUndefined;
    }
    const store = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DisposableStore"]();
    return new Derived(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](owner, undefined, computeFn), (r)=>{
        store.clear();
        return computeFn(r, store);
    }, undefined, undefined, ()=>store.dispose(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
}
function derivedDisposable(computeFnOrOwner, computeFnOrUndefined) {
    let computeFn;
    let owner;
    if (computeFnOrUndefined === undefined) {
        computeFn = computeFnOrOwner;
        owner = undefined;
    } else {
        owner = computeFnOrOwner;
        computeFn = computeFnOrUndefined;
    }
    let store = undefined;
    return new Derived(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](owner, undefined, computeFn), (r)=>{
        if (!store) {
            store = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DisposableStore"]();
        } else {
            store.clear();
        }
        const result = computeFn(r);
        if (result) {
            store.add(result);
        }
        return result;
    }, undefined, undefined, ()=>{
        if (store) {
            store.dispose();
            store = undefined;
        }
    }, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
}
class Derived extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BaseObservable"] {
    get debugName() {
        return this._debugNameData.getDebugName(this) ?? '(anonymous)';
    }
    constructor(_debugNameData, _computeFn, createChangeSummary, _handleChange, _handleLastObserverRemoved = undefined, _equalityComparator){
        super();
        this._debugNameData = _debugNameData;
        this._computeFn = _computeFn;
        this.createChangeSummary = createChangeSummary;
        this._handleChange = _handleChange;
        this._handleLastObserverRemoved = _handleLastObserverRemoved;
        this._equalityComparator = _equalityComparator;
        this.state = 0 /* DerivedState.initial */ ;
        this.value = undefined;
        this.updateCount = 0;
        this.dependencies = new Set();
        this.dependenciesToBeRemoved = new Set();
        this.changeSummary = undefined;
        this.changeSummary = this.createChangeSummary?.();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLogger"])()?.handleDerivedCreated(this);
    }
    onLastObserverRemoved() {
        /**
         * We are not tracking changes anymore, thus we have to assume
         * that our cache is invalid.
         */ this.state = 0 /* DerivedState.initial */ ;
        this.value = undefined;
        for (const d of this.dependencies){
            d.removeObserver(this);
        }
        this.dependencies.clear();
        this._handleLastObserverRemoved?.();
    }
    get() {
        if (this.observers.size === 0) {
            // Without observers, we don't know when to clean up stuff.
            // Thus, we don't cache anything to prevent memory leaks.
            const result = this._computeFn(this, this.createChangeSummary?.());
            // Clear new dependencies
            this.onLastObserverRemoved();
            return result;
        } else {
            do {
                // We might not get a notification for a dependency that changed while it is updating,
                // thus we also have to ask all our depedencies if they changed in this case.
                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */ ) {
                    for (const d of this.dependencies){
                        /** might call {@link handleChange} indirectly, which could make us stale */ d.reportChanges();
                        if (this.state === 2 /* DerivedState.stale */ ) {
                            break;
                        }
                    }
                }
                // We called report changes of all dependencies.
                // If we are still not stale, we can assume to be up to date again.
                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */ ) {
                    this.state = 3 /* DerivedState.upToDate */ ;
                }
                this._recomputeIfNeeded();
            // In case recomputation changed one of our dependencies, we need to recompute again.
            }while (this.state !== 3 /* DerivedState.upToDate */ )
            return this.value;
        }
    }
    _recomputeIfNeeded() {
        if (this.state === 3 /* DerivedState.upToDate */ ) {
            return;
        }
        const emptySet = this.dependenciesToBeRemoved;
        this.dependenciesToBeRemoved = this.dependencies;
        this.dependencies = emptySet;
        const hadValue = this.state !== 0 /* DerivedState.initial */ ;
        const oldValue = this.value;
        this.state = 3 /* DerivedState.upToDate */ ;
        const changeSummary = this.changeSummary;
        this.changeSummary = this.createChangeSummary?.();
        try {
            /** might call {@link handleChange} indirectly, which could invalidate us */ this.value = this._computeFn(this, changeSummary);
        } finally{
            // We don't want our observed observables to think that they are (not even temporarily) not being observed.
            // Thus, we only unsubscribe from observables that are definitely not read anymore.
            for (const o of this.dependenciesToBeRemoved){
                o.removeObserver(this);
            }
            this.dependenciesToBeRemoved.clear();
        }
        const didChange = hadValue && !this._equalityComparator(oldValue, this.value);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLogger"])()?.handleDerivedRecomputed(this, {
            oldValue,
            newValue: this.value,
            change: undefined,
            didChange,
            hadValue
        });
        if (didChange) {
            for (const r of this.observers){
                r.handleChange(this, undefined);
            }
        }
    }
    toString() {
        return `LazyDerived<${this.debugName}>`;
    }
    // IObserver Implementation
    beginUpdate(_observable) {
        this.updateCount++;
        const propagateBeginUpdate = this.updateCount === 1;
        if (this.state === 3 /* DerivedState.upToDate */ ) {
            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */ ;
            // If we propagate begin update, that will already signal a possible change.
            if (!propagateBeginUpdate) {
                for (const r of this.observers){
                    r.handlePossibleChange(this);
                }
            }
        }
        if (propagateBeginUpdate) {
            for (const r of this.observers){
                r.beginUpdate(this); // This signals a possible change
            }
        }
    }
    endUpdate(_observable) {
        this.updateCount--;
        if (this.updateCount === 0) {
            // End update could change the observer list.
            const observers = [
                ...this.observers
            ];
            for (const r of observers){
                r.endUpdate(this);
            }
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$assert$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertFn"])(()=>this.updateCount >= 0);
    }
    handlePossibleChange(observable) {
        // In all other states, observers already know that we might have changed.
        if (this.state === 3 /* DerivedState.upToDate */  && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {
            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */ ;
            for (const r of this.observers){
                r.handlePossibleChange(this);
            }
        }
    }
    handleChange(observable, change) {
        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {
            const shouldReact = this._handleChange ? this._handleChange({
                changedObservable: observable,
                change,
                didChange: (o)=>o === observable
            }, this.changeSummary) : true;
            const wasUpToDate = this.state === 3 /* DerivedState.upToDate */ ;
            if (shouldReact && (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */  || wasUpToDate)) {
                this.state = 2 /* DerivedState.stale */ ;
                if (wasUpToDate) {
                    for (const r of this.observers){
                        r.handlePossibleChange(this);
                    }
                }
            }
        }
    }
    // IReader Implementation
    readObservable(observable) {
        // Subscribe before getting the value to enable caching
        observable.addObserver(this);
        /** This might call {@link handleChange} indirectly, which could invalidate us */ const value = observable.get();
        // Which is why we only add the observable to the dependencies now.
        this.dependencies.add(observable);
        this.dependenciesToBeRemoved.delete(observable);
        return value;
    }
    addObserver(observer) {
        const shouldCallBeginUpdate = !this.observers.has(observer) && this.updateCount > 0;
        super.addObserver(observer);
        if (shouldCallBeginUpdate) {
            observer.beginUpdate(this);
        }
    }
    removeObserver(observer) {
        const shouldCallEndUpdate = this.observers.has(observer) && this.updateCount > 0;
        super.removeObserver(observer);
        if (shouldCallEndUpdate) {
            // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.
            observer.endUpdate(this);
        }
    }
}
class DerivedWithSetter extends Derived {
    constructor(debugNameData, computeFn, createChangeSummary, handleChange, handleLastObserverRemoved = undefined, equalityComparator, set){
        super(debugNameData, computeFn, createChangeSummary, handleChange, handleLastObserverRemoved, equalityComparator);
        this.set = set;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/autorun.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "AutorunObserver": (()=>AutorunObserver),
    "autorun": (()=>autorun),
    "autorunHandleChanges": (()=>autorunHandleChanges),
    "autorunOpts": (()=>autorunOpts),
    "autorunWithStore": (()=>autorunWithStore),
    "autorunWithStoreHandleChanges": (()=>autorunWithStoreHandleChanges)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$assert$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/assert.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lifecycle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/debugName.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/logging.js [app-client] (ecmascript)");
;
;
;
;
function autorun(fn) {
    return new AutorunObserver(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](undefined, undefined, fn), fn, undefined, undefined);
}
function autorunOpts(options, fn) {
    return new AutorunObserver(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](options.owner, options.debugName, options.debugReferenceFn ?? fn), fn, undefined, undefined);
}
function autorunHandleChanges(options, fn) {
    return new AutorunObserver(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](options.owner, options.debugName, options.debugReferenceFn ?? fn), fn, options.createEmptyChangeSummary, options.handleChange);
}
function autorunWithStoreHandleChanges(options, fn) {
    const store = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DisposableStore"]();
    const disposable = autorunHandleChanges({
        owner: options.owner,
        debugName: options.debugName,
        debugReferenceFn: options.debugReferenceFn ?? fn,
        createEmptyChangeSummary: options.createEmptyChangeSummary,
        handleChange: options.handleChange
    }, (reader, changeSummary)=>{
        store.clear();
        fn(reader, changeSummary, store);
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toDisposable"])(()=>{
        disposable.dispose();
        store.dispose();
    });
}
function autorunWithStore(fn) {
    const store = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DisposableStore"]();
    const disposable = autorunOpts({
        owner: undefined,
        debugName: undefined,
        debugReferenceFn: fn
    }, (reader)=>{
        store.clear();
        fn(reader, store);
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toDisposable"])(()=>{
        disposable.dispose();
        store.dispose();
    });
}
class AutorunObserver {
    get debugName() {
        return this._debugNameData.getDebugName(this) ?? '(anonymous)';
    }
    constructor(_debugNameData, _runFn, createChangeSummary, _handleChange){
        this._debugNameData = _debugNameData;
        this._runFn = _runFn;
        this.createChangeSummary = createChangeSummary;
        this._handleChange = _handleChange;
        this.state = 2 /* AutorunState.stale */ ;
        this.updateCount = 0;
        this.disposed = false;
        this.dependencies = new Set();
        this.dependenciesToBeRemoved = new Set();
        this.changeSummary = this.createChangeSummary?.();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLogger"])()?.handleAutorunCreated(this);
        this._runIfNeeded();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackDisposable"])(this);
    }
    dispose() {
        this.disposed = true;
        for (const o of this.dependencies){
            o.removeObserver(this);
        }
        this.dependencies.clear();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["markAsDisposed"])(this);
    }
    _runIfNeeded() {
        if (this.state === 3 /* AutorunState.upToDate */ ) {
            return;
        }
        const emptySet = this.dependenciesToBeRemoved;
        this.dependenciesToBeRemoved = this.dependencies;
        this.dependencies = emptySet;
        this.state = 3 /* AutorunState.upToDate */ ;
        const isDisposed = this.disposed;
        try {
            if (!isDisposed) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLogger"])()?.handleAutorunTriggered(this);
                const changeSummary = this.changeSummary;
                this.changeSummary = this.createChangeSummary?.();
                this._runFn(this, changeSummary);
            }
        } finally{
            if (!isDisposed) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLogger"])()?.handleAutorunFinished(this);
            }
            // We don't want our observed observables to think that they are (not even temporarily) not being observed.
            // Thus, we only unsubscribe from observables that are definitely not read anymore.
            for (const o of this.dependenciesToBeRemoved){
                o.removeObserver(this);
            }
            this.dependenciesToBeRemoved.clear();
        }
    }
    toString() {
        return `Autorun<${this.debugName}>`;
    }
    // IObserver implementation
    beginUpdate() {
        if (this.state === 3 /* AutorunState.upToDate */ ) {
            this.state = 1 /* AutorunState.dependenciesMightHaveChanged */ ;
        }
        this.updateCount++;
    }
    endUpdate() {
        if (this.updateCount === 1) {
            do {
                if (this.state === 1 /* AutorunState.dependenciesMightHaveChanged */ ) {
                    this.state = 3 /* AutorunState.upToDate */ ;
                    for (const d of this.dependencies){
                        d.reportChanges();
                        if (this.state === 2 /* AutorunState.stale */ ) {
                            break;
                        }
                    }
                }
                this._runIfNeeded();
            }while (this.state !== 3 /* AutorunState.upToDate */ )
        }
        this.updateCount--;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$assert$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertFn"])(()=>this.updateCount >= 0);
    }
    handlePossibleChange(observable) {
        if (this.state === 3 /* AutorunState.upToDate */  && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {
            this.state = 1 /* AutorunState.dependenciesMightHaveChanged */ ;
        }
    }
    handleChange(observable, change) {
        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {
            const shouldReact = this._handleChange ? this._handleChange({
                changedObservable: observable,
                change,
                didChange: (o)=>o === observable
            }, this.changeSummary) : true;
            if (shouldReact) {
                this.state = 2 /* AutorunState.stale */ ;
            }
        }
    }
    // IReader implementation
    readObservable(observable) {
        // In case the run action disposes the autorun
        if (this.disposed) {
            return observable.get();
        }
        observable.addObserver(this);
        const value = observable.get();
        this.dependencies.add(observable);
        this.dependenciesToBeRemoved.delete(observable);
        return value;
    }
}
(function(autorun) {
    autorun.Observer = AutorunObserver;
})(autorun || (autorun = {}));
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "FromEventObservable": (()=>FromEventObservable),
    "KeepAliveObserver": (()=>KeepAliveObserver),
    "ValueWithChangeEventFromObservable": (()=>ValueWithChangeEventFromObservable),
    "constObservable": (()=>constObservable),
    "derivedConstOnceDefined": (()=>derivedConstOnceDefined),
    "derivedObservableWithCache": (()=>derivedObservableWithCache),
    "derivedObservableWithWritableCache": (()=>derivedObservableWithWritableCache),
    "keepObserved": (()=>keepObserved),
    "mapObservableArrayCached": (()=>mapObservableArrayCached),
    "observableFromEvent": (()=>observableFromEvent),
    "observableFromEventOpts": (()=>observableFromEventOpts),
    "observableFromValueWithChangeEvent": (()=>observableFromValueWithChangeEvent),
    "observableSignal": (()=>observableSignal),
    "observableSignalFromEvent": (()=>observableSignalFromEvent),
    "recomputeInitiallyAndOnChange": (()=>recomputeInitiallyAndOnChange)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/event.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lifecycle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/debugName.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$derived$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/derived.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/logging.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/equals.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
function constObservable(value) {
    return new ConstObservable(value);
}
class ConstObservable extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ConvenientObservable"] {
    constructor(value){
        super();
        this.value = value;
    }
    get debugName() {
        return this.toString();
    }
    get() {
        return this.value;
    }
    addObserver(observer) {
    // NO OP
    }
    removeObserver(observer) {
    // NO OP
    }
    toString() {
        return `Const: ${this.value}`;
    }
}
function observableFromEvent(...args) {
    let owner;
    let event;
    let getValue;
    if (args.length === 3) {
        [owner, event, getValue] = args;
    } else {
        [event, getValue] = args;
    }
    return new FromEventObservable(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](owner, undefined, getValue), event, getValue, ()=>FromEventObservable.globalTransaction, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
}
function observableFromEventOpts(options, event, getValue) {
    return new FromEventObservable(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](options.owner, options.debugName, options.debugReferenceFn ?? getValue), event, getValue, ()=>FromEventObservable.globalTransaction, options.equalsFn ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
}
class FromEventObservable extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BaseObservable"] {
    constructor(_debugNameData, event, _getValue, _getTransaction, _equalityComparator){
        super();
        this._debugNameData = _debugNameData;
        this.event = event;
        this._getValue = _getValue;
        this._getTransaction = _getTransaction;
        this._equalityComparator = _equalityComparator;
        this.hasValue = false;
        this.handleEvent = (args)=>{
            const newValue = this._getValue(args);
            const oldValue = this.value;
            const didChange = !this.hasValue || !this._equalityComparator(oldValue, newValue);
            let didRunTransaction = false;
            if (didChange) {
                this.value = newValue;
                if (this.hasValue) {
                    didRunTransaction = true;
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["subtransaction"])(this._getTransaction(), (tx)=>{
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLogger"])()?.handleFromEventObservableTriggered(this, {
                            oldValue,
                            newValue,
                            change: undefined,
                            didChange,
                            hadValue: this.hasValue
                        });
                        for (const o of this.observers){
                            tx.updateObserver(o, this);
                            o.handleChange(this, undefined);
                        }
                    }, ()=>{
                        const name = this.getDebugName();
                        return 'Event fired' + (name ? `: ${name}` : '');
                    });
                }
                this.hasValue = true;
            }
            if (!didRunTransaction) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLogger"])()?.handleFromEventObservableTriggered(this, {
                    oldValue,
                    newValue,
                    change: undefined,
                    didChange,
                    hadValue: this.hasValue
                });
            }
        };
    }
    getDebugName() {
        return this._debugNameData.getDebugName(this);
    }
    get debugName() {
        const name = this.getDebugName();
        return 'From Event' + (name ? `: ${name}` : '');
    }
    onFirstObserverAdded() {
        this.subscription = this.event(this.handleEvent);
    }
    onLastObserverRemoved() {
        this.subscription.dispose();
        this.subscription = undefined;
        this.hasValue = false;
        this.value = undefined;
    }
    get() {
        if (this.subscription) {
            if (!this.hasValue) {
                this.handleEvent(undefined);
            }
            return this.value;
        } else {
            // no cache, as there are no subscribers to keep it updated
            const value = this._getValue(undefined);
            return value;
        }
    }
}
(function(observableFromEvent) {
    observableFromEvent.Observer = FromEventObservable;
    function batchEventsGlobally(tx, fn) {
        let didSet = false;
        if (FromEventObservable.globalTransaction === undefined) {
            FromEventObservable.globalTransaction = tx;
            didSet = true;
        }
        try {
            fn();
        } finally{
            if (didSet) {
                FromEventObservable.globalTransaction = undefined;
            }
        }
    }
    observableFromEvent.batchEventsGlobally = batchEventsGlobally;
})(observableFromEvent || (observableFromEvent = {}));
function observableSignalFromEvent(debugName, event) {
    return new FromEventObservableSignal(debugName, event);
}
class FromEventObservableSignal extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BaseObservable"] {
    constructor(debugName, event){
        super();
        this.debugName = debugName;
        this.event = event;
        this.handleEvent = ()=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transaction"])((tx)=>{
                for (const o of this.observers){
                    tx.updateObserver(o, this);
                    o.handleChange(this, undefined);
                }
            }, ()=>this.debugName);
        };
    }
    onFirstObserverAdded() {
        this.subscription = this.event(this.handleEvent);
    }
    onLastObserverRemoved() {
        this.subscription.dispose();
        this.subscription = undefined;
    }
    get() {
    // NO OP
    }
}
function observableSignal(debugNameOrOwner) {
    if (typeof debugNameOrOwner === 'string') {
        return new ObservableSignal(debugNameOrOwner);
    } else {
        return new ObservableSignal(undefined, debugNameOrOwner);
    }
}
class ObservableSignal extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BaseObservable"] {
    get debugName() {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](this._owner, this._debugName, undefined).getDebugName(this) ?? 'Observable Signal';
    }
    toString() {
        return this.debugName;
    }
    constructor(_debugName, _owner){
        super();
        this._debugName = _debugName;
        this._owner = _owner;
    }
    trigger(tx, change) {
        if (!tx) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transaction"])((tx)=>{
                this.trigger(tx, change);
            }, ()=>`Trigger signal ${this.debugName}`);
            return;
        }
        for (const o of this.observers){
            tx.updateObserver(o, this);
            o.handleChange(this, change);
        }
    }
    get() {
    // NO OP
    }
}
function keepObserved(observable) {
    const o = new KeepAliveObserver(false, undefined);
    observable.addObserver(o);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toDisposable"])(()=>{
        observable.removeObserver(o);
    });
}
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_setKeepObserved"])(keepObserved);
function recomputeInitiallyAndOnChange(observable, handleValue) {
    const o = new KeepAliveObserver(true, handleValue);
    observable.addObserver(o);
    if (handleValue) {
        handleValue(observable.get());
    } else {
        observable.reportChanges();
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toDisposable"])(()=>{
        observable.removeObserver(o);
    });
}
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_setRecomputeInitiallyAndOnChange"])(recomputeInitiallyAndOnChange);
class KeepAliveObserver {
    constructor(_forceRecompute, _handleValue){
        this._forceRecompute = _forceRecompute;
        this._handleValue = _handleValue;
        this._counter = 0;
    }
    beginUpdate(observable) {
        this._counter++;
    }
    endUpdate(observable) {
        this._counter--;
        if (this._counter === 0 && this._forceRecompute) {
            if (this._handleValue) {
                this._handleValue(observable.get());
            } else {
                observable.reportChanges();
            }
        }
    }
    handlePossibleChange(observable) {
    // NO OP
    }
    handleChange(observable, change) {
    // NO OP
    }
}
function derivedObservableWithCache(owner, computeFn) {
    let lastValue = undefined;
    const observable = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$derived$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["derivedOpts"])({
        owner,
        debugReferenceFn: computeFn
    }, (reader)=>{
        lastValue = computeFn(reader, lastValue);
        return lastValue;
    });
    return observable;
}
function derivedObservableWithWritableCache(owner, computeFn) {
    let lastValue = undefined;
    const onChange = observableSignal('derivedObservableWithWritableCache');
    const observable = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$derived$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["derived"])(owner, (reader)=>{
        onChange.read(reader);
        lastValue = computeFn(reader, lastValue);
        return lastValue;
    });
    return Object.assign(observable, {
        clearCache: (tx)=>{
            lastValue = undefined;
            onChange.trigger(tx);
        },
        setCache: (newValue, tx)=>{
            lastValue = newValue;
            onChange.trigger(tx);
        }
    });
}
function mapObservableArrayCached(owner, items, map, keySelector) {
    let m = new ArrayMap(map, keySelector);
    const self = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$derived$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["derivedOpts"])({
        debugReferenceFn: map,
        owner,
        onLastObserverRemoved: ()=>{
            m.dispose();
            m = new ArrayMap(map);
        }
    }, (reader)=>{
        m.setItems(items.read(reader));
        return m.getItems();
    });
    return self;
}
class ArrayMap {
    constructor(_map, _keySelector){
        this._map = _map;
        this._keySelector = _keySelector;
        this._cache = new Map();
        this._items = [];
    }
    dispose() {
        this._cache.forEach((entry)=>entry.store.dispose());
        this._cache.clear();
    }
    setItems(items) {
        const newItems = [];
        const itemsToRemove = new Set(this._cache.keys());
        for (const item of items){
            const key = this._keySelector ? this._keySelector(item) : item;
            let entry = this._cache.get(key);
            if (!entry) {
                const store = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lifecycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DisposableStore"]();
                const out = this._map(item, store);
                entry = {
                    out,
                    store
                };
                this._cache.set(key, entry);
            } else {
                itemsToRemove.delete(key);
            }
            newItems.push(entry.out);
        }
        for (const item of itemsToRemove){
            const entry = this._cache.get(item);
            entry.store.dispose();
            this._cache.delete(item);
        }
        this._items = newItems;
    }
    getItems() {
        return this._items;
    }
}
class ValueWithChangeEventFromObservable {
    constructor(observable){
        this.observable = observable;
    }
    get onDidChange() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Event"].fromObservableLight(this.observable);
    }
    get value() {
        return this.observable.get();
    }
}
function observableFromValueWithChangeEvent(owner, value) {
    if (value instanceof ValueWithChangeEventFromObservable) {
        return value.observable;
    }
    return observableFromEvent(owner, value.onDidChange, ()=>value.value);
}
function derivedConstOnceDefined(owner, fn) {
    return derivedObservableWithCache(owner, (reader, lastValue)=>lastValue ?? fn(reader));
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/promise.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "ObservablePromise": (()=>ObservablePromise),
    "PromiseResult": (()=>PromiseResult),
    "waitForState": (()=>waitForState)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$autorun$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/autorun.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/errors.js [app-client] (ecmascript)");
;
;
;
class ObservablePromise {
    static fromFn(fn) {
        return new ObservablePromise(fn());
    }
    constructor(promise){
        this._value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["observableValue"])(this, undefined);
        /**
         * The current state of the promise.
         * Is `undefined` if the promise didn't resolve yet.
         */ this.promiseResult = this._value;
        this.promise = promise.then((value)=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transaction"])((tx)=>{
                /** @description onPromiseResolved */ this._value.set(new PromiseResult(value, undefined), tx);
            });
            return value;
        }, (error)=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transaction"])((tx)=>{
                /** @description onPromiseRejected */ this._value.set(new PromiseResult(undefined, error), tx);
            });
            throw error;
        });
    }
}
class PromiseResult {
    constructor(/**
     * The value of the resolved promise.
     * Undefined if the promise rejected.
     */ data, /**
     * The error in case of a rejected promise.
     * Undefined if the promise resolved.
     */ error){
        this.data = data;
        this.error = error;
    }
}
function waitForState(observable, predicate, isError, cancellationToken) {
    if (!predicate) {
        predicate = (state)=>state !== null && state !== undefined;
    }
    return new Promise((resolve, reject)=>{
        let isImmediateRun = true;
        let shouldDispose = false;
        const stateObs = observable.map((state)=>{
            /** @description waitForState.state */ return {
                isFinished: predicate(state),
                error: isError ? isError(state) : false,
                state
            };
        });
        const d = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$autorun$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["autorun"])((reader)=>{
            /** @description waitForState */ const { isFinished, error, state } = stateObs.read(reader);
            if (isFinished || error) {
                if (isImmediateRun) {
                    // The variable `d` is not initialized yet
                    shouldDispose = true;
                } else {
                    d.dispose();
                }
                if (error) {
                    reject(error === true ? state : error);
                } else {
                    resolve(state);
                }
            }
        });
        if (cancellationToken) {
            const dc = cancellationToken.onCancellationRequested(()=>{
                d.dispose();
                dc.dispose();
                reject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CancellationError"]());
            });
            if (cancellationToken.isCancellationRequested) {
                d.dispose();
                dc.dispose();
                reject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CancellationError"]());
                return;
            }
        }
        isImmediateRun = false;
        if (shouldDispose) {
            d.dispose();
        }
    });
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/lazyObservableValue.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "LazyObservableValue": (()=>LazyObservableValue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/base.js [app-client] (ecmascript)");
;
class LazyObservableValue extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BaseObservable"] {
    get debugName() {
        return this._debugNameData.getDebugName(this) ?? 'LazyObservableValue';
    }
    constructor(_debugNameData, initialValue, _equalityComparator){
        super();
        this._debugNameData = _debugNameData;
        this._equalityComparator = _equalityComparator;
        this._isUpToDate = true;
        this._deltas = [];
        this._updateCounter = 0;
        this._value = initialValue;
    }
    get() {
        this._update();
        return this._value;
    }
    _update() {
        if (this._isUpToDate) {
            return;
        }
        this._isUpToDate = true;
        if (this._deltas.length > 0) {
            for (const observer of this.observers){
                for (const change of this._deltas){
                    observer.handleChange(this, change);
                }
            }
            this._deltas.length = 0;
        } else {
            for (const observer of this.observers){
                observer.handleChange(this, undefined);
            }
        }
    }
    _beginUpdate() {
        this._updateCounter++;
        if (this._updateCounter === 1) {
            for (const observer of this.observers){
                observer.beginUpdate(this);
            }
        }
    }
    _endUpdate() {
        this._updateCounter--;
        if (this._updateCounter === 0) {
            this._update();
            // End update could change the observer list.
            const observers = [
                ...this.observers
            ];
            for (const r of observers){
                r.endUpdate(this);
            }
        }
    }
    addObserver(observer) {
        const shouldCallBeginUpdate = !this.observers.has(observer) && this._updateCounter > 0;
        super.addObserver(observer);
        if (shouldCallBeginUpdate) {
            observer.beginUpdate(this);
        }
    }
    removeObserver(observer) {
        const shouldCallEndUpdate = this.observers.has(observer) && this._updateCounter > 0;
        super.removeObserver(observer);
        if (shouldCallEndUpdate) {
            // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.
            observer.endUpdate(this);
        }
    }
    set(value, tx, change) {
        if (change === undefined && this._equalityComparator(this._value, value)) {
            return;
        }
        let _tx;
        if (!tx) {
            tx = _tx = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionImpl"](()=>{}, ()=>`Setting ${this.debugName}`);
        }
        try {
            this._isUpToDate = false;
            this._setValue(value);
            if (change !== undefined) {
                this._deltas.push(change);
            }
            tx.updateObserver({
                beginUpdate: ()=>this._beginUpdate(),
                endUpdate: ()=>this._endUpdate(),
                handleChange: (observable, change)=>{},
                handlePossibleChange: (observable)=>{}
            }, this);
            if (this._updateCounter > 1) {
                // We already started begin/end update, so we need to manually call handlePossibleChange
                for (const observer of this.observers){
                    observer.handlePossibleChange(this);
                }
            }
        } finally{
            if (_tx) {
                _tx.finish();
            }
        }
    }
    toString() {
        return `${this.debugName}: ${this._value}`;
    }
    _setValue(newValue) {
        this._value = newValue;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/api.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "observableValueOpts": (()=>observableValueOpts)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/equals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/debugName.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$lazyObservableValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/lazyObservableValue.js [app-client] (ecmascript)");
;
;
;
;
function observableValueOpts(options, initialValue) {
    if (options.lazy) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$lazyObservableValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LazyObservableValue"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](options.owner, options.debugName, undefined), initialValue, options.equalsFn ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObservableValue"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$debugName$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DebugNameData"](options.owner, options.debugName, undefined), initialValue, options.equalsFn ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$equals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strictEquals"]);
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observable.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$derived$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/derived.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$autorun$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/autorun.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$promise$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/promise.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$api$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/api.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/logging.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
// Remove "//" in the next line to enable logging
const enableLogging = false;
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/observable.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$derived$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/derived.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$autorun$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/autorun.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$promise$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/promise.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$api$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/api.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/logging.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observable$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observable.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/collections.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "diffSets": (()=>diffSets),
    "intersection": (()=>intersection)
});
function diffSets(before, after) {
    const removed = [];
    const added = [];
    for (const element of before){
        if (!after.has(element)) {
            removed.push(element);
        }
    }
    for (const element of after){
        if (!before.has(element)) {
            added.push(element);
        }
    }
    return {
        removed,
        added
    };
}
function intersection(setA, setB) {
    const result = new Set();
    for (const elem of setB){
        if (setA.has(elem)) {
            result.add(elem);
        }
    }
    return result;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/linkedText.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "LinkedText": (()=>LinkedText),
    "parseLinkedText": (()=>parseLinkedText)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$decorators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/decorators.js [app-client] (ecmascript)");
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
;
class LinkedText {
    constructor(nodes){
        this.nodes = nodes;
    }
    toString() {
        return this.nodes.map((node)=>typeof node === 'string' ? node : node.label).join('');
    }
}
__decorate([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$decorators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memoize"]
], LinkedText.prototype, "toString", null);
const LINK_REGEX = /\[([^\]]+)\]\(((?:https?:\/\/|command:|file:)[^\)\s]+)(?: (["'])(.+?)(\3))?\)/gi;
function parseLinkedText(text) {
    const result = [];
    let index = 0;
    let match;
    while(match = LINK_REGEX.exec(text)){
        if (match.index - index > 0) {
            result.push(text.substring(index, match.index));
        }
        const [, label, href, , title] = match;
        if (title) {
            result.push({
                label,
                href,
                title
            });
        } else {
            result.push({
                label,
                href
            });
        }
        index = match.index + match[0].length;
    }
    if (index < text.length) {
        result.push(text.substring(index));
    }
    return new LinkedText(result);
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/navigator.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "ArrayNavigator": (()=>ArrayNavigator)
});
class ArrayNavigator {
    constructor(items, start = 0, end = items.length, index = start - 1){
        this.items = items;
        this.start = start;
        this.end = end;
        this.index = index;
    }
    current() {
        if (this.index === this.start - 1 || this.index === this.end) {
            return null;
        }
        return this.items[this.index];
    }
    next() {
        this.index = Math.min(this.index + 1, this.end);
        return this.current();
    }
    previous() {
        this.index = Math.max(this.index - 1, this.start - 1);
        return this.current();
    }
    first() {
        this.index = this.start;
        return this.current();
    }
    last() {
        this.index = this.end - 1;
        return this.current();
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/history.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "HistoryNavigator": (()=>HistoryNavigator)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$navigator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/navigator.js [app-client] (ecmascript)");
;
class HistoryNavigator {
    constructor(history = [], limit = 10){
        this._initialize(history);
        this._limit = limit;
        this._onChange();
    }
    getHistory() {
        return this._elements;
    }
    add(t) {
        this._history.delete(t);
        this._history.add(t);
        this._onChange();
    }
    next() {
        // This will navigate past the end of the last element, and in that case the input should be cleared
        return this._navigator.next();
    }
    previous() {
        if (this._currentPosition() !== 0) {
            return this._navigator.previous();
        }
        return null;
    }
    current() {
        return this._navigator.current();
    }
    first() {
        return this._navigator.first();
    }
    last() {
        return this._navigator.last();
    }
    isLast() {
        return this._currentPosition() >= this._elements.length - 1;
    }
    isNowhere() {
        return this._navigator.current() === null;
    }
    has(t) {
        return this._history.has(t);
    }
    _onChange() {
        this._reduceToLimit();
        const elements = this._elements;
        this._navigator = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$navigator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ArrayNavigator"](elements, 0, elements.length, elements.length);
    }
    _reduceToLimit() {
        const data = this._elements;
        if (data.length > this._limit) {
            this._initialize(data.slice(data.length - this._limit));
        }
    }
    _currentPosition() {
        const currentElement = this._navigator.current();
        if (!currentElement) {
            return -1;
        }
        return this._elements.indexOf(currentElement);
    }
    _initialize(history) {
        this._history = new Set();
        for (const entry of history){
            this._history.add(entry);
        }
    }
    get _elements() {
        const elements = [];
        this._history.forEach((e)=>elements.push(e));
        return elements;
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/comparers.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "compareAnything": (()=>compareAnything),
    "compareByPrefix": (()=>compareByPrefix),
    "compareFileNames": (()=>compareFileNames)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lazy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/lazy.js [app-client] (ecmascript)");
;
// When comparing large numbers of strings it's better for performance to create an
// Intl.Collator object and use the function provided by its compare property
// than it is to use String.prototype.localeCompare()
// A collator with numeric sorting enabled, and no sensitivity to case, accents or diacritics.
const intlFileNameCollatorBaseNumeric = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lazy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Lazy"](()=>{
    const collator = new Intl.Collator(undefined, {
        numeric: true,
        sensitivity: 'base'
    });
    return {
        collator,
        collatorIsNumeric: collator.resolvedOptions().numeric
    };
});
// A collator with numeric sorting enabled.
const intlFileNameCollatorNumeric = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lazy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Lazy"](()=>{
    const collator = new Intl.Collator(undefined, {
        numeric: true
    });
    return {
        collator
    };
});
// A collator with numeric sorting enabled, and sensitivity to accents and diacritics but not case.
const intlFileNameCollatorNumericCaseInsensitive = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$lazy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Lazy"](()=>{
    const collator = new Intl.Collator(undefined, {
        numeric: true,
        sensitivity: 'accent'
    });
    return {
        collator
    };
});
function compareFileNames(one, other, caseSensitive = false) {
    const a = one || '';
    const b = other || '';
    const result = intlFileNameCollatorBaseNumeric.value.collator.compare(a, b);
    // Using the numeric option will make compare(`foo1`, `foo01`) === 0. Disambiguate.
    if (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && a !== b) {
        return a < b ? -1 : 1;
    }
    return result;
}
function compareAnything(one, other, lookFor) {
    const elementAName = one.toLowerCase();
    const elementBName = other.toLowerCase();
    // Sort prefix matches over non prefix matches
    const prefixCompare = compareByPrefix(one, other, lookFor);
    if (prefixCompare) {
        return prefixCompare;
    }
    // Sort suffix matches over non suffix matches
    const elementASuffixMatch = elementAName.endsWith(lookFor);
    const elementBSuffixMatch = elementBName.endsWith(lookFor);
    if (elementASuffixMatch !== elementBSuffixMatch) {
        return elementASuffixMatch ? -1 : 1;
    }
    // Understand file names
    const r = compareFileNames(elementAName, elementBName);
    if (r !== 0) {
        return r;
    }
    // Compare by name
    return elementAName.localeCompare(elementBName);
}
function compareByPrefix(one, other, lookFor) {
    const elementAName = one.toLowerCase();
    const elementBName = other.toLowerCase();
    // Sort prefix matches over non prefix matches
    const elementAPrefixMatch = elementAName.startsWith(lookFor);
    const elementBPrefixMatch = elementBName.startsWith(lookFor);
    if (elementAPrefixMatch !== elementBPrefixMatch) {
        return elementAPrefixMatch ? -1 : 1;
    } else if (elementAPrefixMatch && elementBPrefixMatch) {
        if (elementAName.length < elementBName.length) {
            return -1;
        }
        if (elementAName.length > elementBName.length) {
            return 1;
        }
    }
    return 0;
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/hotReload.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "isHotReloadEnabled": (()=>isHotReloadEnabled),
    "registerHotReloadHandler": (()=>registerHotReloadHandler)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/process.js [app-client] (ecmascript)");
;
function isHotReloadEnabled() {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["env"] && !!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["env"]['VSCODE_DEV'];
}
function registerHotReloadHandler(handler) {
    if (!isHotReloadEnabled()) {
        return {
            dispose () {}
        };
    } else {
        const handlers = registerGlobalHotReloadHandler();
        handlers.add(handler);
        return {
            dispose () {
                handlers.delete(handler);
            }
        };
    }
}
function registerGlobalHotReloadHandler() {
    if (!hotReloadHandlers) {
        hotReloadHandlers = new Set();
    }
    const g = globalThis;
    if (!g.$hotReload_applyNewExports) {
        g.$hotReload_applyNewExports = (args)=>{
            const args2 = {
                config: {
                    mode: undefined
                },
                ...args
            };
            const results = [];
            for (const h of hotReloadHandlers){
                const result = h(args2);
                if (result) {
                    results.push(result);
                }
            }
            if (results.length > 0) {
                return (newExports)=>{
                    let result = false;
                    for (const r of results){
                        if (r(newExports)) {
                            result = true;
                        }
                    }
                    return result;
                };
            }
            return undefined;
        };
    }
    return hotReloadHandlers;
}
let hotReloadHandlers = undefined;
if (isHotReloadEnabled()) {
    // This code does not run in production.
    registerHotReloadHandler(({ oldExports, newSrc, config })=>{
        if (config.mode !== 'patch-prototype') {
            return undefined;
        }
        return (newExports)=>{
            for(const key in newExports){
                const exportedItem = newExports[key];
                console.log(`[hot-reload] Patching prototype methods of '${key}'`, {
                    exportedItem
                });
                if (typeof exportedItem === 'function' && exportedItem.prototype) {
                    const oldExportedItem = oldExports[key];
                    if (oldExportedItem) {
                        for (const prop of Object.getOwnPropertyNames(exportedItem.prototype)){
                            const descriptor = Object.getOwnPropertyDescriptor(exportedItem.prototype, prop);
                            const oldDescriptor = Object.getOwnPropertyDescriptor(oldExportedItem.prototype, prop);
                            if (descriptor?.value?.toString() !== oldDescriptor?.value?.toString()) {
                                console.log(`[hot-reload] Patching prototype method '${key}.${prop}'`);
                            }
                            Object.defineProperty(oldExportedItem.prototype, prop, descriptor);
                        }
                        newExports[key] = oldExportedItem;
                    }
                }
            }
            return true;
        };
    });
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/hotReloadHelpers.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "observeHotReloadableExports": (()=>observeHotReloadableExports),
    "readHotReloadableExport": (()=>readHotReloadableExport)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$hotReload$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/hotReload.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observable$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observable.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/observableInternal/utils.js [app-client] (ecmascript)");
;
;
function readHotReloadableExport(value, reader) {
    observeHotReloadableExports([
        value
    ], reader);
    return value;
}
function observeHotReloadableExports(values, reader) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$hotReload$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHotReloadEnabled"])()) {
        const o = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$observableInternal$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["observableSignalFromEvent"])('reload', (event)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$hotReload$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["registerHotReloadHandler"])(({ oldExports })=>{
                if (![
                    ...Object.values(oldExports)
                ].some((v)=>values.includes(v))) {
                    return undefined;
                }
                return (_newExports)=>{
                    event(undefined);
                    return true;
                };
            }));
        o.read(reader);
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/uuid.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "generateUuid": (()=>generateUuid)
});
const generateUuid = function() {
    // use `randomUUID` if possible
    if (typeof crypto === 'object' && typeof crypto.randomUUID === 'function') {
        return crypto.randomUUID.bind(crypto);
    }
    // use `randomValues` if possible
    let getRandomValues;
    if (typeof crypto === 'object' && typeof crypto.getRandomValues === 'function') {
        getRandomValues = crypto.getRandomValues.bind(crypto);
    } else {
        getRandomValues = function(bucket) {
            for(let i = 0; i < bucket.length; i++){
                bucket[i] = Math.floor(Math.random() * 256);
            }
            return bucket;
        };
    }
    // prep-work
    const _data = new Uint8Array(16);
    const _hex = [];
    for(let i = 0; i < 256; i++){
        _hex.push(i.toString(16).padStart(2, '0'));
    }
    return function generateUuid() {
        // get data
        getRandomValues(_data);
        // set version bits
        _data[6] = _data[6] & 0x0f | 0x40;
        _data[8] = _data[8] & 0x3f | 0x80;
        // print as string
        let i = 0;
        let result = '';
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += '-';
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += '-';
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += '-';
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += '-';
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        return result;
    };
}();
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/dataTransfer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "UriList": (()=>UriList),
    "VSDataTransfer": (()=>VSDataTransfer),
    "createFileDataTransferItem": (()=>createFileDataTransferItem),
    "createStringDataTransferItem": (()=>createStringDataTransferItem),
    "matchesMimeType": (()=>matchesMimeType)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/arrays.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$iterator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/iterator.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uuid$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/uuid.js [app-client] (ecmascript)");
;
;
;
function createStringDataTransferItem(stringOrPromise) {
    return {
        asString: async ()=>stringOrPromise,
        asFile: ()=>undefined,
        value: typeof stringOrPromise === 'string' ? stringOrPromise : undefined
    };
}
function createFileDataTransferItem(fileName, uri, data) {
    const file = {
        id: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$uuid$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["generateUuid"])(),
        name: fileName,
        uri,
        data
    };
    return {
        asString: async ()=>'',
        asFile: ()=>file,
        value: undefined
    };
}
class VSDataTransfer {
    constructor(){
        this._entries = new Map();
    }
    get size() {
        let size = 0;
        for (const _ of this._entries){
            size++;
        }
        return size;
    }
    has(mimeType) {
        return this._entries.has(this.toKey(mimeType));
    }
    matches(pattern) {
        const mimes = [
            ...this._entries.keys()
        ];
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$iterator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Iterable"].some(this, ([_, item])=>item.asFile())) {
            mimes.push('files');
        }
        return matchesMimeType_normalized(normalizeMimeType(pattern), mimes);
    }
    get(mimeType) {
        return this._entries.get(this.toKey(mimeType))?.[0];
    }
    /**
     * Add a new entry to this data transfer.
     *
     * This does not replace existing entries for `mimeType`.
     */ append(mimeType, value) {
        const existing = this._entries.get(mimeType);
        if (existing) {
            existing.push(value);
        } else {
            this._entries.set(this.toKey(mimeType), [
                value
            ]);
        }
    }
    /**
     * Set the entry for a given mime type.
     *
     * This replaces all existing entries for `mimeType`.
     */ replace(mimeType, value) {
        this._entries.set(this.toKey(mimeType), [
            value
        ]);
    }
    /**
     * Remove all entries for `mimeType`.
     */ delete(mimeType) {
        this._entries.delete(this.toKey(mimeType));
    }
    /**
     * Iterate over all `[mime, item]` pairs in this data transfer.
     *
     * There may be multiple entries for each mime type.
     */ *[Symbol.iterator]() {
        for (const [mine, items] of this._entries){
            for (const item of items){
                yield [
                    mine,
                    item
                ];
            }
        }
    }
    toKey(mimeType) {
        return normalizeMimeType(mimeType);
    }
}
function normalizeMimeType(mimeType) {
    return mimeType.toLowerCase();
}
function matchesMimeType(pattern, mimeTypes) {
    return matchesMimeType_normalized(normalizeMimeType(pattern), mimeTypes.map(normalizeMimeType));
}
function matchesMimeType_normalized(normalizedPattern, normalizedMimeTypes) {
    // Anything wildcard
    if (normalizedPattern === '*/*') {
        return normalizedMimeTypes.length > 0;
    }
    // Exact match
    if (normalizedMimeTypes.includes(normalizedPattern)) {
        return true;
    }
    // Wildcard, such as `image/*`
    const wildcard = normalizedPattern.match(/^([a-z]+)\/([a-z]+|\*)$/i);
    if (!wildcard) {
        return false;
    }
    const [_, type, subtype] = wildcard;
    if (subtype === '*') {
        return normalizedMimeTypes.some((mime)=>mime.startsWith(type + '/'));
    }
    return false;
}
const UriList = Object.freeze({
    // http://amundsen.com/hypermedia/urilist/
    create: (entries)=>{
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["distinct"])(entries.map((x)=>x.toString())).join('\r\n');
    },
    split: (str)=>{
        return str.split('\r\n');
    },
    parse: (str)=>{
        return UriList.split(str).filter((value)=>!value.startsWith('#'));
    }
});
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/hierarchicalKind.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "HierarchicalKind": (()=>HierarchicalKind)
});
class HierarchicalKind {
    static{
        this.sep = '.';
    }
    static{
        this.None = new HierarchicalKind('@@none@@');
    }
    static{
        this.Empty = new HierarchicalKind('');
    }
    constructor(value){
        this.value = value;
    }
    equals(other) {
        return this.value === other.value;
    }
    contains(other) {
        return this.equals(other) || this.value === '' || other.value.startsWith(this.value + HierarchicalKind.sep);
    }
    intersects(other) {
        return this.contains(other) || other.contains(this);
    }
    append(...parts) {
        return new HierarchicalKind((this.value ? [
            this.value,
            ...parts
        ] : parts).join(HierarchicalKind.sep));
    }
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/errorMessage.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "toErrorMessage": (()=>toErrorMessage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/arrays.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/types.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/nls.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/nls.js [app-client] (ecmascript) <locals>");
;
;
;
function exceptionToErrorMessage(exception, verbose) {
    if (verbose && (exception.stack || exception.stacktrace)) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])('stackTrace.format', "{0}: {1}", detectSystemErrorMessage(exception), stackToString(exception.stack) || stackToString(exception.stacktrace));
    }
    return detectSystemErrorMessage(exception);
}
function stackToString(stack) {
    if (Array.isArray(stack)) {
        return stack.join('\n');
    }
    return stack;
}
function detectSystemErrorMessage(exception) {
    // Custom node.js error from us
    if (exception.code === 'ERR_UNC_HOST_NOT_ALLOWED') {
        return `${exception.message}. Please update the 'security.allowedUNCHosts' setting if you want to allow this host.`;
    }
    // See https://nodejs.org/api/errors.html#errors_class_system_error
    if (typeof exception.code === 'string' && typeof exception.errno === 'number' && typeof exception.syscall === 'string') {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])('nodeExceptionMessage', "A system error occurred ({0})", exception.message);
    }
    return exception.message || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
}
function toErrorMessage(error = null, verbose = false) {
    if (!error) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
    }
    if (Array.isArray(error)) {
        const errors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coalesce"])(error);
        const msg = toErrorMessage(errors[0], verbose);
        if (errors.length > 1) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])('error.moreErrors', "{0} ({1} errors in total)", msg, errors.length);
        }
        return msg;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(error)) {
        return error;
    }
    if (error.detail) {
        const detail = error.detail;
        if (detail.error) {
            return exceptionToErrorMessage(detail.error, verbose);
        }
        if (detail.exception) {
            return exceptionToErrorMessage(detail.exception, verbose);
        }
    }
    if (error.stack) {
        return exceptionToErrorMessage(error, verbose);
    }
    if (error.message) {
        return error.message;
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$nls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["localize"])('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/search.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "buildReplaceStringWithCasePreserved": (()=>buildReplaceStringWithCasePreserved)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
;
function buildReplaceStringWithCasePreserved(matches, pattern) {
    if (matches && matches[0] !== '') {
        const containsHyphens = validateSpecificSpecialCharacter(matches, pattern, '-');
        const containsUnderscores = validateSpecificSpecialCharacter(matches, pattern, '_');
        if (containsHyphens && !containsUnderscores) {
            return buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '-');
        } else if (!containsHyphens && containsUnderscores) {
            return buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '_');
        }
        if (matches[0].toUpperCase() === matches[0]) {
            return pattern.toUpperCase();
        } else if (matches[0].toLowerCase() === matches[0]) {
            return pattern.toLowerCase();
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsUppercaseCharacter"])(matches[0][0]) && pattern.length > 0) {
            return pattern[0].toUpperCase() + pattern.substr(1);
        } else if (matches[0][0].toUpperCase() !== matches[0][0] && pattern.length > 0) {
            return pattern[0].toLowerCase() + pattern.substr(1);
        } else {
            // we don't understand its pattern yet.
            return pattern;
        }
    } else {
        return pattern;
    }
}
function validateSpecificSpecialCharacter(matches, pattern, specialCharacter) {
    const doesContainSpecialCharacter = matches[0].indexOf(specialCharacter) !== -1 && pattern.indexOf(specialCharacter) !== -1;
    return doesContainSpecialCharacter && matches[0].split(specialCharacter).length === pattern.split(specialCharacter).length;
}
function buildReplaceStringForSpecificSpecialCharacter(matches, pattern, specialCharacter) {
    const splitPatternAtSpecialCharacter = pattern.split(specialCharacter);
    const splitMatchAtSpecialCharacter = matches[0].split(specialCharacter);
    let replaceString = '';
    splitPatternAtSpecialCharacter.forEach((splitValue, index)=>{
        replaceString += buildReplaceStringWithCasePreserved([
            splitMatchAtSpecialCharacter[index]
        ], splitValue) + specialCharacter;
    });
    return replaceString.slice(0, -1);
}
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/labels.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "normalizeDriveLetter": (()=>normalizeDriveLetter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/extpath.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)");
;
;
function normalizeDriveLetter(path, isWindowsOS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWindows"]) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$extpath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasDriveLetter"])(path, isWindowsOS)) {
        return path.charAt(0).toUpperCase() + path.slice(1);
    }
    return path;
}
let normalizedUserHomeCached = Object.create(null);
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/fuzzyScorer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "pieceToQuery": (()=>pieceToQuery),
    "prepareQuery": (()=>prepareQuery),
    "scoreFuzzy2": (()=>scoreFuzzy2)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$filters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/filters.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/path.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/platform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/monaco-editor/esm/vs/base/common/strings.js [app-client] (ecmascript)");
;
;
;
;
const NO_SCORE2 = [
    undefined,
    []
];
function scoreFuzzy2(target, query, patternStart = 0, wordStart = 0) {
    // Score: multiple inputs
    const preparedQuery = query;
    if (preparedQuery.values && preparedQuery.values.length > 1) {
        return doScoreFuzzy2Multiple(target, preparedQuery.values, patternStart, wordStart);
    }
    // Score: single input
    return doScoreFuzzy2Single(target, query, patternStart, wordStart);
}
function doScoreFuzzy2Multiple(target, query, patternStart, wordStart) {
    let totalScore = 0;
    const totalMatches = [];
    for (const queryPiece of query){
        const [score, matches] = doScoreFuzzy2Single(target, queryPiece, patternStart, wordStart);
        if (typeof score !== 'number') {
            // if a single query value does not match, return with
            // no score entirely, we require all queries to match
            return NO_SCORE2;
        }
        totalScore += score;
        totalMatches.push(...matches);
    }
    // if we have a score, ensure that the positions are
    // sorted in ascending order and distinct
    return [
        totalScore,
        normalizeMatches(totalMatches)
    ];
}
function doScoreFuzzy2Single(target, query, patternStart, wordStart) {
    const score = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$filters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fuzzyScore"])(query.original, query.originalLowercase, patternStart, target, target.toLowerCase(), wordStart, {
        firstMatchCanBeWeak: true,
        boostFullMatch: true
    });
    if (!score) {
        return NO_SCORE2;
    }
    return [
        score[0],
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$filters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMatches"])(score)
    ];
}
const NO_ITEM_SCORE = Object.freeze({
    score: 0
});
function normalizeMatches(matches) {
    // sort matches by start to be able to normalize
    const sortedMatches = matches.sort((matchA, matchB)=>{
        return matchA.start - matchB.start;
    });
    // merge matches that overlap
    const normalizedMatches = [];
    let currentMatch = undefined;
    for (const match of sortedMatches){
        // if we have no current match or the matches
        // do not overlap, we take it as is and remember
        // it for future merging
        if (!currentMatch || !matchOverlaps(currentMatch, match)) {
            currentMatch = match;
            normalizedMatches.push(match);
        } else {
            currentMatch.start = Math.min(currentMatch.start, match.start);
            currentMatch.end = Math.max(currentMatch.end, match.end);
        }
    }
    return normalizedMatches;
}
function matchOverlaps(matchA, matchB) {
    if (matchA.end < matchB.start) {
        return false; // A ends before B starts
    }
    if (matchB.end < matchA.start) {
        return false; // B ends before A starts
    }
    return true;
}
/*
 * If a query is wrapped in quotes, the user does not want to
 * use fuzzy search for this query.
 */ function queryExpectsExactMatch(query) {
    return query.startsWith('"') && query.endsWith('"');
}
/**
 * Helper function to prepare a search value for scoring by removing unwanted characters
 * and allowing to score on multiple pieces separated by whitespace character.
 */ const MULTIPLE_QUERY_VALUES_SEPARATOR = ' ';
function prepareQuery(original) {
    if (typeof original !== 'string') {
        original = '';
    }
    const originalLowercase = original.toLowerCase();
    const { pathNormalized, normalized, normalizedLowercase } = normalizeQuery(original);
    const containsPathSeparator = pathNormalized.indexOf(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"]) >= 0;
    const expectExactMatch = queryExpectsExactMatch(original);
    let values = undefined;
    const originalSplit = original.split(MULTIPLE_QUERY_VALUES_SEPARATOR);
    if (originalSplit.length > 1) {
        for (const originalPiece of originalSplit){
            const expectExactMatchPiece = queryExpectsExactMatch(originalPiece);
            const { pathNormalized: pathNormalizedPiece, normalized: normalizedPiece, normalizedLowercase: normalizedLowercasePiece } = normalizeQuery(originalPiece);
            if (normalizedPiece) {
                if (!values) {
                    values = [];
                }
                values.push({
                    original: originalPiece,
                    originalLowercase: originalPiece.toLowerCase(),
                    pathNormalized: pathNormalizedPiece,
                    normalized: normalizedPiece,
                    normalizedLowercase: normalizedLowercasePiece,
                    expectContiguousMatch: expectExactMatchPiece
                });
            }
        }
    }
    return {
        original,
        originalLowercase,
        pathNormalized,
        normalized,
        normalizedLowercase,
        values,
        containsPathSeparator,
        expectContiguousMatch: expectExactMatch
    };
}
function normalizeQuery(original) {
    let pathNormalized;
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWindows"]) {
        pathNormalized = original.replace(/\//g, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"]); // Help Windows users to search for paths when using slash
    } else {
        pathNormalized = original.replace(/\\/g, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$path$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sep"]); // Help macOS/Linux users to search for paths when using backslash
    }
    // we remove quotes here because quotes are used for exact match search
    const normalized = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$monaco$2d$editor$2f$esm$2f$vs$2f$base$2f$common$2f$strings$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stripWildcards"])(pathNormalized).replace(/\s|"/g, '');
    return {
        pathNormalized,
        normalized,
        normalizedLowercase: normalized.toLowerCase()
    };
}
function pieceToQuery(arg1) {
    if (Array.isArray(arg1)) {
        return prepareQuery(arg1.map((piece)=>piece.original).join(MULTIPLE_QUERY_VALUES_SEPARATOR));
    }
    return prepareQuery(arg1.original);
} //#endregion
}}),
"[project]/node_modules/monaco-editor/esm/vs/base/common/tfIdf.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ __turbopack_context__.s({
    "TfIdfCalculator": (()=>TfIdfCalculator),
    "normalizeTfIdfScores": (()=>normalizeTfIdfScores)
});
function countMapFrom(values) {
    const map = new Map();
    for (const value of values){
        map.set(value, (map.get(value) ?? 0) + 1);
    }
    return map;
}
class TfIdfCalculator {
    constructor(){
        /**
         * Total number of chunks
         */ this.chunkCount = 0;
        this.chunkOccurrences = new Map();
        this.documents = new Map();
    }
    calculateScores(query, token) {
        const embedding = this.computeEmbedding(query);
        const idfCache = new Map();
        const scores = [];
        // For each document, generate one score
        for (const [key, doc] of this.documents){
            if (token.isCancellationRequested) {
                return [];
            }
            for (const chunk of doc.chunks){
                const score = this.computeSimilarityScore(chunk, embedding, idfCache);
                if (score > 0) {
                    scores.push({
                        key,
                        score
                    });
                }
            }
        }
        return scores;
    }
    /**
     * Count how many times each term (word) appears in a string.
     */ static termFrequencies(input) {
        return countMapFrom(TfIdfCalculator.splitTerms(input));
    }
    /**
     * Break a string into terms (words).
     */ static *splitTerms(input) {
        const normalize = (word)=>word.toLowerCase();
        // Only match on words that are at least 3 characters long and start with a letter
        for (const [word] of input.matchAll(/\b\p{Letter}[\p{Letter}\d]{2,}\b/gu)){
            yield normalize(word);
            const camelParts = word.replace(/([a-z])([A-Z])/g, '$1 $2').split(/\s+/g);
            if (camelParts.length > 1) {
                for (const part of camelParts){
                    // Require at least 3 letters in the parts of a camel case word
                    if (part.length > 2 && /\p{Letter}{3,}/gu.test(part)) {
                        yield normalize(part);
                    }
                }
            }
        }
    }
    updateDocuments(documents) {
        for (const { key } of documents){
            this.deleteDocument(key);
        }
        for (const doc of documents){
            const chunks = [];
            for (const text of doc.textChunks){
                // TODO: See if we can compute the tf lazily
                // The challenge is that we need to also update the `chunkOccurrences`
                // and all of those updates need to get flushed before the real TF-IDF of
                // anything is computed.
                const tf = TfIdfCalculator.termFrequencies(text);
                // Update occurrences list
                for (const term of tf.keys()){
                    this.chunkOccurrences.set(term, (this.chunkOccurrences.get(term) ?? 0) + 1);
                }
                chunks.push({
                    text,
                    tf
                });
            }
            this.chunkCount += chunks.length;
            this.documents.set(doc.key, {
                chunks
            });
        }
        return this;
    }
    deleteDocument(key) {
        const doc = this.documents.get(key);
        if (!doc) {
            return;
        }
        this.documents.delete(key);
        this.chunkCount -= doc.chunks.length;
        // Update term occurrences for the document
        for (const chunk of doc.chunks){
            for (const term of chunk.tf.keys()){
                const currentOccurrences = this.chunkOccurrences.get(term);
                if (typeof currentOccurrences === 'number') {
                    const newOccurrences = currentOccurrences - 1;
                    if (newOccurrences <= 0) {
                        this.chunkOccurrences.delete(term);
                    } else {
                        this.chunkOccurrences.set(term, newOccurrences);
                    }
                }
            }
        }
    }
    computeSimilarityScore(chunk, queryEmbedding, idfCache) {
        // Compute the dot product between the chunk's embedding and the query embedding
        // Note that the chunk embedding is computed lazily on a per-term basis.
        // This lets us skip a large number of calculations because the majority
        // of chunks do not share any terms with the query.
        let sum = 0;
        for (const [term, termTfidf] of Object.entries(queryEmbedding)){
            const chunkTf = chunk.tf.get(term);
            if (!chunkTf) {
                continue;
            }
            let chunkIdf = idfCache.get(term);
            if (typeof chunkIdf !== 'number') {
                chunkIdf = this.computeIdf(term);
                idfCache.set(term, chunkIdf);
            }
            const chunkTfidf = chunkTf * chunkIdf;
            sum += chunkTfidf * termTfidf;
        }
        return sum;
    }
    computeEmbedding(input) {
        const tf = TfIdfCalculator.termFrequencies(input);
        return this.computeTfidf(tf);
    }
    computeIdf(term) {
        const chunkOccurrences = this.chunkOccurrences.get(term) ?? 0;
        return chunkOccurrences > 0 ? Math.log((this.chunkCount + 1) / chunkOccurrences) : 0;
    }
    computeTfidf(termFrequencies) {
        const embedding = Object.create(null);
        for (const [word, occurrences] of termFrequencies){
            const idf = this.computeIdf(word);
            if (idf > 0) {
                embedding[word] = occurrences * idf;
            }
        }
        return embedding;
    }
}
function normalizeTfIdfScores(scores) {
    // copy of scores
    const result = scores.slice(0);
    // sort descending
    result.sort((a, b)=>b.score - a.score);
    // normalize
    const max = result[0]?.score ?? 0;
    if (max > 0) {
        for (const score of result){
            score.score /= max;
        }
    }
    return result;
}
}}),
}]);

//# sourceMappingURL=node_modules_monaco-editor_esm_vs_base_common_22c46854._.js.map